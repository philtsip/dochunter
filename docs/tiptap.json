[
    {
        "url": "./introduction.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Introduction\n\n## What’s Tiptap?\n[![Version](https://img.shields.io/npm/v/@tiptap/core.svg?label=version)](https://www.npmjs.com/package/@tiptap/core)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/core.svg)](https://npmcharts.com/compare/@tiptap/core?minimal=true)\n[![License](https://img.shields.io/npm/l/@tiptap/core.svg)](https://www.npmjs.com/package/@tiptap/core)\n[![Sponsor](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/ueberdosis)\n\nTiptap is a headless wrapper around [ProseMirror](https://ProseMirror.net) – a toolkit for building rich text WYSIWYG editors, which is already in use at many well-known companies such as *New York Times*, *The Guardian* or *Atlassian*.\n\nCreate exactly the rich text editor you want out of customizable building blocks. Tiptap comes with sensible defaults, a lot of extensions and a friendly API to customize every aspect. It’s backed by a welcoming community, open source, and free.\n\n## What does “headless” mean?\nThere is no provided user interface, you are absolutely free to build whatever interface you want. No need to overwrite any class, to use `!important` or other hacks, just write whatever you like in the setup you are used to.\n\n## Why should I use Tiptap?\n[ProseMirror](https://ProseMirror.net) is a well-written, reliable and very powerful editor toolkit. It’s not so much the ready-to-use editor most people look for, but with Tiptap you can start in minutes, choose from tons of amazing extensions and still have that powerful ProseMirror API accessible when you really need it.\n\n## Do you enjoy real-time editing?\n\nGreat! We do so, too. [Hocuspocus](https://hocuspocus.dev) is our yjs-based real-time solution for conflict-free text editing with Tiptap.\n\nEven better: Our managed solution [Tiptap Collab](https://tiptap.dev/collab) is just a few clicks away.<br />\n– Enhance your Tiptap experience with multiplayer support in minutes instead of hours.\n\n!!tiptap-collab-cta\n"
    },
    {
        "url": "./tutorials.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Tutorials\n\n## Introduction\n\nWe have prepared a few tutorials on to get started with a fully collaborative Tiptap editor using Tiptap Collab. More instructions on more complex usages are already on their way :)\n\n## Tiptap Collab Tutorials\n\n- [Get started with Tiptap Collab](/tutorials/get-started-with-tiptap-collab)\n- [JWT Authentication](/tutorials/jwt-authentication)\n\n### Need something else?\n\n- [Discord](https://discord.gg/WtJ49jGshW)\n- [Github](https://github.com/ueberdosis/tiptap/discussions)\n"
    },
    {
        "url": "./cloud.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Tiptap Collab\n\nImplementing real-time collaboration is quite hard. With Tiptap Collab we build a solution that does it in minutes. To see it in action check out our [live demo](https://tiptap.dev/editor).\n\nTiptap Collab is our managed cloud solution of [Hocuspocus](https://tiptap.dev/hocuspocus/introduction). It makes it a easy to add real-time collaboration to any application. If you already have an application using Tiptap Editor, it's even easier to add collaboration.\n\n:::warning Pro Feature\nTo get started, you need a Tiptap Pro account. [Log in](https://tiptap.dev/login) or [sign up](https://tiptap.dev/register) for free.\n:::\n\n## Getting Started\n\n### Installation\n\nFirst you need to install `@hocuspocus/provider` at least in version `2.0.0`.\n\n```bash\nnpm install @hocuspocus/provider\n```\n\n### Basic Usage\n\nTiptap Collab makes your application collaborative by synchronizing a Yjs document between connected users using websockets. If you're already using Yjs in your application, it's as easy as this:\n\n```typescript\nimport { TiptapCollabProvider } from '@hocuspocus/provider'\nimport * as Y from 'yjs'\n\nconst provider = new TiptapCollabProvider({\n  appId: 'your_app_id', // get this at collab.tiptap.dev\n  name: 'your_document_name', // e.g. a uuid uuidv4();\n  token: 'your_JWT', // see \"Authentication\" below\n  document: new Y.Doc() // pass your existing doc, or leave this out and use provider.document\n});\n```\n\n### Upgrade From Hocuspocus\n\nIf you are upgrading from our self-hosted collaboration backend called Hocuspocus, all you need to do is replace `HocuspocusProvider` with the new `TiptapCollabProvider`. The API is the same, it's just a wrapper that handles the hostname to your Tiptap Collab app and authentication.\n\n## Example\n\n[![Cloud Documents](https://tiptap.dev/images/docs/server/cloud/tiptapcollab-demo.png)](https://tiptap.dev/images/docs/server/cloud/tiptapcollab-demo.png)\n\nWe have created a simple client / server setup using replit that you can review and fork here:\n\n[Github](https://github.com/janthurau/TiptapCollab) or [Replit Demo](https://replit.com/@ueberdosis/TiptapCollab?v=1)\n\nThe example loads multiple documents over the same websocket (multiplexing), and shows how to implement per-document authentication using JWT.\n\nMore tutorials can be found in our [Tutorials section](/tutorials).\n\n## Authentication\n\nAuthentication is done using [JSON Web Token (JWT)](https://en.wikipedia.org/wiki/JSON_Web_Token). There are many libraries available to generate a valid token.\n\n### JWT Generation\n\nTo generate a JWT in the browser, you can use [http://jwtbuilder.jamiekurtz.com/](http://jwtbuilder.jamiekurtz.com/). You can leave all the fields as default, just replace the \"Key\" at the bottom with the secret from your [settings](https://collab.tiptap.dev/apps/settings).\n\nIn Node.js, you can generate a JWT like this:\n\n```typescript\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = {\n  // Use this list to limit the number of documents that can be accessed by this client.\n  // An empty array means no access at all.\n  // Not sending this property means access to all documents.\n  // We are supporting a wildcard at the end of the string (only there).\n  allowedDocumentNames: ['document-1', 'document-2', 'my-user-uuid/*', 'my-organization-uuid/*']\n}\n\n// This JWT should be sent in the `token` field of the provider. Never expose 'your_secret' to a frontend!\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n## Webhook\n\nYou can define a URL and we will call it every time a document has changed. This is useful for getting the JSON representation of the Yjs document in your own application. We call your webhook URL when the document is saved to our database. This operation is debounced by 2-10 seconds. So your application won't be flooded by us. Right now we're only exporting the fragment `default` of the Yjs document.\nYou can add the webhook URL in the [settings page](https://collab.tiptap.dev/apps/settings) of your Tiptap Collab app.\n\n### Payload\n\nA sample payload of the webhook request looks like this:\n\n```json\n{\n  \"appName\": '', // name of your app\n  \"name\": '', // name of the document\n  \"time\": // current time as ISOString (new Date()).toISOString())\n  \"tiptapJson\": {}, // JSON output from Tiptap (see https://tiptap.dev/guide/output#option-1-json): TiptapTransformer.fromYdoc()\n  \"ydocState\"?: {}, // optionally contains the entire yDoc as base64. Contact us to enable this property!\n  \"clientsCount\": 100 // number of currently connected clients\n}\n```\n\n### Signing\n\nAll requests to your webhook URL will contain a header called `X-Hocuspocus-Signature-256` that signs the entire message with your secret. You can find it in the [settings](https://collab.tiptap.dev/apps/settings) of your Tiptap Collab app.\n\n## Management API\n\nIn addition to the websocket protocol, each Tiptap Collab app comes with a REST API for managing your documents. It's exposed directly from your Tiptap Collab app, so it's available at your custom URL:\n\n`https://YOUR_APP_ID.collab.tiptap.cloud/`\n\nAuthentication is done using an API secret which you can find in the [settings](https://collab.tiptap.dev/) of your Tiptap Collab app. The secret must be sent as an `Authorization` header.\n\nIf your document identifier contains a slash (`/`), just make sure to encode it as `%2F`, e.g. using `encodeURIComponent` of vanilla JavaScript.\n\n### Create Document\n\n```bash\nPOST /api/documents/:identifier\n```\n\nThis call takes a binary Yjs update message (an existing Yjs document on your side must be encoded using `Y.encodeStateAsUpdate`) and creates a document. This can be used to seed documents before a user connects to the Tiptap Collab server.\n\nThis endpoint will return the HTTP status `204` if the document was created successfully, or `409` if the document already exists. If you want to overwrite it, you must delete it first.\n\n```bash\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '@yjsUpdate.binary.txt'\n```\n\n### List Documents\n\n```bash\nGET /api/documents?take=100&skip=0\n```\n\nThis call returns a list of all documents present on the servers storage. We're returning the first 100 by default, pass `take` or `skip` parameters to adjust this.\n\n```bash\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n### Get Document\n\n```bash\nGET /api/documents/:identifier?format=:format&fragment=:fragment\n```\n\nThis call exports the given document with all fragments in JSON format. We export either the current in-memory version or the version read from the database. If the document is currently open on your server, we will return the in-memory version.\n\n`format` supports either `yjs` or `json`. Default: `json`\n\nIf you choose the `yjs` format, you'll get the binary Yjs update message created with `Y.encodeStateAsUpdate`.\n\n`fragment` can be an array (`fragment=a&fragment=b`) of or a single fragment that you want to export. By default we'll export all fragments. Note that this is only taken into account when using the `json` format, otherwise you'll always get the whole Yjs document.\n\n```bash\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n**Note:** When using axios, you need to specify `responseType: arraybuffer` in the options of the request.\n\n```typescript\nimport * as Y from 'yjs'\n\nconst ydoc = new Y.Doc()\n\nconst axiosResult = await axios.get('https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/somedoc?format=yjs', {  headers: {\n    'Authorization': 'YOUR_SECRET_FROM_SETTINGS_AREA',\n  },\n  responseType: 'arraybuffer'  })\n\nY.applyUpdate(ydoc, axiosResult.data)\n```\n\nWhen using `node-fetch`, you need to use .arrayBuffer() and create a Buffer from it:\n\n```typescript\nimport * as Y from 'yjs'\n\nconst ydoc = new Y.Doc()\n\nconst fetchResult = await fetch('https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/somedoc?format=yjs', {\n  headers: {\n    'Authorization': 'YOUR_SECRET_FROM_SETTINGS_AREA',\n  },\n})\n\nY.applyUpdate(ydoc, Buffer.from(await docUpdateAsBinaryResponse.arrayBuffer()))\n```\n\n### Update Document\n\n```bash\nPATCH /api/documents/:identifier\n```\n\nThis call accepts a Yjs update message and will apply it on the existing document on the server.\nThis endpoint will return the HTTP status `204` if the document was updated successfully, `404` is the document does not exist, or `422` if the payload is invalid or the update cannot be applied.\n\n```bash\ncurl --location --request PATCH 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '@yjsUpdate.binary.txt'\n```\n\n\n### Delete Document\n\n```bash\nDELETE /api/documents/:identifier\n```\n\nThis endpoint deletes a document from the server after closing any open connection to the document.\n\nIt returns either HTTP status `204` if the document was deleted successfully or `404` if the document was not found.\n\nIf the endpoint returned `204`, but the document still exists, make sure that there is no user re-creating the document from the provider.\nWe are closing all connections before deleting a document, but your error handling might re-create the provider, and thus create the document again.\n\n```bash\ncurl --location --request DELETE 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n### Duplicate Document\n\nIn order to copy a document, you can just use the GET endpoint and then create it again with the POST endpoint, here's an example in typescript:\n\n```typescript\n\nconst docUpdateAsBinaryResponse = await axios.get('https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/somedoc?format=yjs', {\n  headers: {\n    'Authorization': 'YOUR_SECRET_FROM_SETTINGS_AREA',\n  },\n  responseType: 'arraybuffer',\n})\n\nawait axios.post('https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/somedoc-duplicated', docUpdateAsBinaryResponse.data, {\n  headers: {\n    'Authorization': 'YOUR_SECRET_FROM_SETTINGS_AREA',\n  },\n})\n\n```\n\n## Screenshots\n\nHere are some screenshots of Tiptap Collab to give you an idea what of Tiptap Collab looks like.\n\n### Dashboard\n\nView key metrics such as total or concurrent connections of your Tiptap Collab app.\n\n[![Cloud Dashboard](https://tiptap.dev/images/docs/server/cloud/dashboard.png)](https://tiptap.dev/images/docs/server/cloud/dashboard.png)\n\n### Documents\n\nGet insight into all your documents, such as size or delete them if you want.\n\n[![Cloud Documents](https://tiptap.dev/images/docs/server/cloud/documents.png)](https://tiptap.dev/images/docs/server/cloud/documents.png)\n\n### Logging\n\nView real-time log events for information about currently loaded or modified documents.\n\n[![Cloud Settings](https://tiptap.dev/images/docs/server/cloud/logging.png)](https://tiptap.dev/images/docs/server/cloud/logging.png)\n\n### Settings\n\nManage the authentication of your application or defined webhooks in the settings.\n\n[![Cloud Settings](https://tiptap.dev/images/docs/server/cloud/settings.png)](https://tiptap.dev/images/docs/server/cloud/settings.png)\n\n## Need anything else?\n\nContact us on [Discord](https://tiptap.dev/discord) or send an email to [humans@tiptap.dev](mailto:humans@tiptap.dev).\n"
    },
    {
        "url": "./about.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# About the project\n\n## Introduction\nTo deliver a top-notch developer experience and user experience, we put ~~hundreds~~ thousands of hours of unpaid work into Tiptap. Your funding helps us to make this work more and more financially sustainable. This enables us to provide helpful support, maintain all our packages, keep everything up to date, and develop new features and extensions for Tiptap.\n\nGive back to the open source community and [sponsor us on GitHub](https://github.com/sponsors/ueberdosis)! ♥\n\n## Your benefits as a sponsor 💖\n* Your issues and pull requests get a `sponsor ♥` label\n* Get a sponsor badge in all your comments on GitHub\n* Invest in the future of Tiptap\n* Give back to the open source community\n* Show support in your GitHub profile\n\nSounds good? [Sponsor us on GitHub!](https://github.com/sponsors/ueberdosis)\n\n## The maintainers of Tiptap\n\n!!team-grid\n\n## More peace of mind\nCompanies betting on Tiptap probably want some peace of mind and ensure that we keep maintaining Tiptap, but don’t forget that our work is based on the work of other lovely people that you should definitely sponsor too:\n\n* [Sponsor Marijn Haverbeke](https://marijnhaverbeke.nl/fund/) (ProseMirror)\n\n## Frequently asked questions\n\n### I can’t use GitHub. How can I support you?\nIf you’re a company, don’t want to use GitHub, don’t have a credit card or want a proper invoice from us, just reach out to us at [humans@tiptap.dev](mailto:humans@tiptap.dev).\n\nWe have an [OpenCollective](https://opencollective.com/tiptap), which allows you to send money through transfer, PayPal or credit card. Donations are tax deductible for US companies.\n\n### I want consulting. What’s your rate?\nIf you have an issue, a question, want to talk something through or anything else, [please use GitHub issues](https://github.com/ueberdosis/tiptap/issues/new/choose) to keep everything accessible to the whole community. For everything else, reach out to [humans@tiptap.dev](mailto:humans@tiptap.dev). We can take on a limited number of custom development and consulting contracts.\n\n### Can we have a call?\nNope, we are big fans of asynchronous communication. If you really need to reach out in private, send us an email to [humans@tiptap.dev](mailto:humans@tiptap.dev), but don’t expect technical email support. That all happens on [GitHub](https://github.com/ueberdosis/tiptap/issues)\n\n\n## P.S. Did you know, we’re also into realtime text editing?\n\nWith [Collaboration](https://tiptap.dev/collab) we  built a realtime backend for conflict-free text editing. And the best part: Integration into Tiptap is just a few clicks away.\n\nMake sure to check it out!\n\n!!tiptap-collab-cta\n"
    },
    {
        "url": "./installation.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Installation\n\n## Introduction\n\nTiptap is framework-agnostic and even works with Vanilla JavaScript (if that’s your thing). The following integration guides help you integrating Tiptap in your JavaScript project.\n\n## Integration guides\n\n- [Vanilla JavaScript](/installation/vanilla-javascript)\n- [React](/installation/react)\n- [Next.js](/installation/nextjs)\n- [Vue 3](/installation/vue3)\n- [Vue 2](/installation/vue2)\n- [Nuxt.js](/installation/nuxt)\n- [Svelte](/installation/svelte)\n- [Alpine.js](/installation/alpine)\n- [PHP](/installation/php)\n- [CDN](/installation/cdn)\n\n### Community efforts\n\n- [Angular](https://github.com/sibiraj-s/ngx-tiptap)\n- [SolidJS](https://github.com/LXSMNSYC/solid-tiptap)\n"
    },
    {
        "url": "./guide/custom-extensions.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Custom extensions\n\n## Introduction\nOne of the strengths of Tiptap is its extendability. You don’t depend on the provided extensions, it is intended to extend the editor to your liking.\n\nWith custom extensions you can add new content types and new functionalities, on top of what already exists or from scratch. Let’s start with a few common examples of how you can extend existing nodes, marks and extensions.\n\nYou’ll learn how you start from scratch at the end, but you’ll need the same knowledge for extending existing and creating new extensions.\n\n## Extend existing extensions\nEvery extension has an `extend()` method, which takes an object with everything you want to change or add to it.\n\nLet’s say, you’d like to change the keyboard shortcut for the bullet list. You should start with looking at the source code of the extension, in that case [the `BulletList` node](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bullet-list/src/bullet-list.ts). For the bespoken example to overwrite the keyboard shortcut, your code could look like this:\n\n```js\n// 1. Import the extension\nimport BulletList from '@tiptap/extension-bullet-list'\n\n// 2. Overwrite the keyboard shortcuts\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n\n// 3. Add the custom extension to your editor\nnew Editor({\n  extensions: [\n    CustomBulletList(),\n    // …\n  ],\n})\n```\n\nThe same applies to every aspect of an existing extension, except to the name. Let’s look at all the things that you can change through the extend method. We focus on one aspect in every example, but you can combine all those examples and change multiple aspects in one `extend()` call too.\n\n### Name\nThe extension name is used in a whole lot of places and changing it isn’t too easy. If you want to change the name of an existing extension, you can copy the whole extension and change the name in all occurrences.\n\nThe extension name is also part of the JSON. If you [store your content as JSON](/guide/output#option-1-json), you need to change the name there too.\n\n### Priority\nThe priority defines the order in which extensions are registered. The default priority is `100`, that’s what most extension have. Extensions with a higher priority will be loaded earlier.\n\n```js\nimport Link from '@tiptap/extension-link'\n\nconst CustomLink = Link.extend({\n  priority: 1000,\n})\n```\n\nThe order in which extensions are loaded influences two things:\n\n1. #### Plugin order\n   ProseMirror plugins of extensions with a higher priority will run first.\n\n2. #### Schema order\n   The [`Link`](/api/marks/link) mark for example has a higher priority, which means it will be rendered as `<a href=\"…\"><strong>Example</strong></a>` instead of `<strong><a href=\"…\">Example</a></strong>`.\n\n### Settings\nAll settings can be configured through the extension anyway, but if you want to change the default settings, for example to provide a library on top of Tiptap for other developers, you can do it like this:\n\n```js\nimport Heading from '@tiptap/extension-heading'\n\nconst CustomHeading = Heading.extend({\n  addOptions() {\n    return {\n      ...this.parent?.(),\n      levels: [1, 2, 3],\n    }\n  },\n})\n```\n\n### Storage\nAt some point you probably want to save some data within your extension instance. This data is mutable. You can access it within the extension under `this.storage`.\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  name: 'customExtension',\n\n  addStorage() {\n    return {\n      awesomeness: 100,\n    }\n  },\n\n  onUpdate() {\n    this.storage.awesomeness += 1\n  },\n})\n```\n\nOutside the extension you have access via `editor.storage`. Make sure that each extension has a unique name.\n\n```js\nconst editor = new Editor({\n  extensions: [\n    CustomExtension,\n  ],\n})\n\nconst awesomeness = editor.storage.customExtension.awesomeness\n```\n\n### Schema\nTiptap works with a strict schema, which configures how the content can be structured, nested, how it behaves and many more things. You [can change all aspects of the schema](/api/schema) for existing extensions. Let’s walk through a few common use cases.\n\nThe default `Blockquote` extension can wrap other nodes, like headings. If you want to allow nothing but paragraphs in your blockquotes, set the `content` attribute accordingly:\n\n```js\n// Blockquotes must only include paragraphs\nimport Blockquote from '@tiptap/extension-blockquote'\n\nconst CustomBlockquote = Blockquote.extend({\n  content: 'paragraph*',\n})\n```\n\nThe schema even allows to make your nodes draggable, that’s what the `draggable` option is for. It defaults to `false`, but you can override that.\n\n```js\n// Draggable paragraphs\nimport Paragraph from '@tiptap/extension-paragraph'\n\nconst CustomParagraph = Paragraph.extend({\n  draggable: true,\n})\n```\n\nThat’s just two tiny examples, but [the underlying ProseMirror schema](https://prosemirror.net/docs/ref/#model.SchemaSpec) is really powerful.\n\n### Attributes\nYou can use attributes to store additional information in the content. Let’s say you want to extend the default `Paragraph` node to have different colors:\n\n```js\nconst CustomParagraph = Paragraph.extend({\n  addAttributes() {\n    // Return an object with attribute configuration\n    return {\n      color: {\n        default: 'pink',\n      },\n    },\n  },\n})\n\n// Result:\n// <p color=\"pink\">Example Text</p>\n```\n\nThat is already enough to tell Tiptap about the new attribute, and set `'pink'` as the default value. All attributes will be rendered as a HTML attribute by default, and parsed from the content when initiated.\n\nLet’s stick with the color example and assume you want to add an inline style to actually color the text. With the `renderHTML` function you can return HTML attributes which will be rendered in the output.\n\nThis examples adds a style HTML attribute based on the value of `color`:\n\n```js\nconst CustomParagraph = Paragraph.extend({\n  addAttributes() {\n    return {\n      color: {\n        default: null,\n        // Take the attribute values\n        renderHTML: attributes => {\n          // … and return an object with HTML attributes.\n          return {\n            style: `color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n})\n\n// Result:\n// <p style=\"color: pink\">Example Text</p>\n```\n\nYou can also control how the attribute is parsed from the HTML. Maybe you want to store the color in an attribute called `data-color` (and not just `color`), here’s how you would do that:\n\n```js\nconst CustomParagraph = Paragraph.extend({\n  addAttributes() {\n    return {\n      color: {\n        default: null,\n        // Customize the HTML parsing (for example, to load the initial content)\n        parseHTML: element => element.getAttribute('data-color'),\n        // … and customize the HTML rendering.\n        renderHTML: attributes => {\n          return {\n            'data-color': attributes.color,\n            style: `color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n})\n\n// Result:\n// <p data-color=\"pink\" style=\"color: pink\">Example Text</p>\n```\n\nYou can completely disable the rendering of attributes with `rendered: false`.\n\n#### Extend existing attributes\nIf you want to add an attribute to an extension and keep existing attributes, you can access them through `this.parent()`.\n\nIn some cases, it is undefined, so make sure to check for that case, or use optional chaining `this.parent?.()`\n\n```js\nconst CustomTableCell = TableCell.extend({\n  addAttributes() {\n    return {\n      ...this.parent?.(),\n      myCustomAttribute: {\n        // …\n      },\n    }\n  },\n})\n```\n\n### Global attributes\nAttributes can be applied to multiple extensions at once. That’s useful for text alignment, line height, color, font family, and other styling related attributes.\n\nTake a closer look at [the full source code](https://github.com/ueberdosis/tiptap/tree/main/packages/extension-text-align) of the [`TextAlign`](/api/extensions/text-align) extension to see a more complex example. But here is how it works in a nutshell:\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst TextAlign = Extension.create({\n  addGlobalAttributes() {\n    return [\n      {\n        // Extend the following extensions\n        types: [\n          'heading',\n          'paragraph',\n        ],\n        // … with those attributes\n        attributes: {\n          textAlign: {\n            default: 'left',\n            renderHTML: attributes => ({\n              style: `text-align: ${attributes.textAlign}`,\n            }),\n            parseHTML: element => element.style.textAlign || 'left',\n          },\n        },\n      },\n    ]\n  },\n})\n```\n\n### Render HTML\nWith the `renderHTML` function you can control how an extension is rendered to HTML. We pass an attributes object to it, with all local attributes, global attributes, and configured CSS classes. Here is an example from the `Bold` extension:\n\n```js\nrenderHTML({ HTMLAttributes }) {\n  return ['strong', HTMLAttributes, 0]\n},\n```\n\nThe first value in the array should be the name of HTML tag. If the second element is an object, it’s interpreted as a set of attributes. Any elements after that are rendered as children.\n\nThe number zero (representing a hole) is used to indicate where the content should be inserted. Let’s look at the rendering of the `CodeBlock` extension with two nested tags:\n\n```js\nrenderHTML({ HTMLAttributes }) {\n  return ['pre', ['code', HTMLAttributes, 0]]\n},\n```\n\nIf you want to add some specific attributes there, import the `mergeAttributes` helper from `@tiptap/core`:\n\n```js\nimport { mergeAttributes } from '@tiptap/core'\n\n// ...\n\nrenderHTML({ HTMLAttributes }) {\n  return ['a', mergeAttributes(HTMLAttributes, { rel: this.options.rel }), 0]\n},\n```\n\n### Parse HTML\nThe `parseHTML()` function tries to load the editor document from HTML. The function gets the HTML DOM element passed as a parameter, and is expected to return an object with attributes and their values. Here is a simplified example from the [`Bold`](/api/marks/bold) mark:\n\n```js\nparseHTML() {\n  return [\n    {\n      tag: 'strong',\n    },\n  ]\n},\n```\n\nThis defines a rule to convert all `<strong>` tags to `Bold` marks. But you can get more advanced with this, here is the full example from the extension:\n\n```js\nparseHTML() {\n  return [\n    // <strong>\n    {\n      tag: 'strong',\n    },\n    // <b>\n    {\n      tag: 'b',\n      getAttrs: node => node.style.fontWeight !== 'normal' && null,\n    },\n    // <span style=\"font-weight: bold\"> and <span style=\"font-weight: 700\">\n    {\n      style: 'font-weight',\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n    },\n  ]\n},\n```\n\nThis checks for `<strong>` and `<b>` tags, and any HTML tag with an inline style setting the `font-weight` to bold.\n\nAs you can see, you can optionally pass a `getAttrs` callback, to add more complex checks, for example for specific HTML attributes. The callback gets passed the HTML DOM node, except when checking for the `style` attribute, then it’s the value.\n\nYou are wondering what’s that `&& null` doing? [ProseMirror expects `null` or `undefined` if the check is successful.](https://prosemirror.net/docs/ref/version/0.18.0.html#model.ParseRule.getAttrs)\n\n[Pass `priority` to a rule](https://prosemirror.net/docs/ref/version/0.18.0.html#model.ParseRule.priority) to resolve conflicts with other extensions, for example if you build a custom extension which looks for paragraphs with a class attribute, but you already use the default paragraph extension.\n\n#### Using getAttrs\nThe `getAttrs` function you’ve probably noticed in the example has two purposes:\n\n1. Check the HTML attributes to decide whether a rule matches (and a mark or node is created from that HTML). When the function returns `false`, it’s not matching.\n2. Get the DOM Element and use the HTML attributes to set your mark or node attributes accordingly:\n\n```js\nparseHTML() {\n  return [\n    {\n      tag: 'span',\n      getAttrs: element => {\n        // Check if the element has an attribute\n        element.hasAttribute('style')\n        // Get an inline style\n        element.style.color\n        // Get a specific attribute\n        element.getAttribute('data-color')\n      },\n    },\n  ]\n},\n```\n\nYou can return an object with the attribute as the key and the parsed value to set your mark or node attribute. We would recommend to use the `parseHTML` inside `addAttributes()`, though. That will keep your code cleaner.\n\n```js\naddAttributes() {\n  return {\n    color: {\n      // Set the color attribute according to the value of the `data-color` attribute\n      parseHTML: element => element.getAttribute('data-color'),\n    }\n  }\n},\n```\n\nRead more about `getAttrs` and all other `ParseRule` properties in the [ProseMirror reference](https://prosemirror.net/docs/ref/#model.ParseRule).\n\n### Commands\n```js\nimport Paragraph from '@tiptap/extension-paragraph'\n\nconst CustomParagraph = Paragraph.extend({\n  addCommands() {\n    return {\n      paragraph: () => ({ commands }) => {\n        return commands.setNode('paragraph')\n      },\n    }\n  },\n})\n```\n\n:::warning Use the commands parameter inside of addCommands\nTo access other commands inside `addCommands` use the `commands` parameter that’s passed to it.\n:::\n\n### Keyboard shortcuts\nMost core extensions come with sensible keyboard shortcut defaults. Depending on what you want to build, you’ll likely want to change them though. With the `addKeyboardShortcuts()` method you can overwrite the predefined shortcut map:\n\n```js\n// Change the bullet list keyboard shortcut\nimport BulletList from '@tiptap/extension-bullet-list'\n\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n```\n\n### Input rules\nWith input rules you can define regular expressions to listen for user inputs. They are used for markdown shortcuts, or for example to convert text like `(c)` to a `©` (and many more) with the [`Typography`](/api/extensions/typography) extension. Use the `markInputRule` helper function for marks, and the `nodeInputRule` for nodes.\n\nBy default text between two tildes on both sides is transformed to ~~striked text~~. If you want to think one tilde on each side is enough, you can overwrite the input rule like this:\n\n```js\n// Use the ~single tilde~ markdown shortcut\nimport Strike from '@tiptap/extension-strike'\nimport { markInputRule } from '@tiptap/core'\n\n// Default:\n// const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\n\n// New:\nconst inputRegex = /(?:^|\\s)((?:~)((?:[^~]+))(?:~))$/\n\nconst CustomStrike = Strike.extend({\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n```\n\n### Paste rules\nPaste rules work like input rules (see above) do. But instead of listening to what the user types, they are applied to pasted content.\n\nThere is one tiny difference in the regular expression. Input rules typically end with a `$` dollar sign (which means “asserts position at the end of a line”), paste rules typically look through all the content and don’t have said `$` dollar sign.\n\nTaking the example from above and applying it to the paste rule would look like the following example.\n\n```js\n// Check pasted content for the ~single tilde~ markdown syntax\nimport Strike from '@tiptap/extension-strike'\nimport { markPasteRule } from '@tiptap/core'\n\n// Default:\n// const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\n// New:\nconst pasteRegex = /(?:^|\\s)((?:~)((?:[^~]+))(?:~))/g\n\nconst CustomStrike = Strike.extend({\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n```\n\n### Events\nYou can even move your [event listeners](/api/events) to a separate extension. Here is an example with listeners for all events:\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  onCreate() {\n    // The editor is ready.\n  },\n  onUpdate() {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ event }) {\n    // The editor is focused.\n  },\n  onBlur({ event }) {\n    // The editor isn’t focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n})\n```\n\n### What’s available in this?\nThose extensions aren’t classes, but you still have a few important things available in `this` everywhere in the extension.\n\n```js\n// Name of the extension, for example 'bulletList'\nthis.name\n\n// Editor instance\nthis.editor\n\n// ProseMirror type\nthis.type\n\n// Object with all settings\nthis.options\n\n// Everything that’s in the extended extension\nthis.parent\n```\n\n### ProseMirror Plugins (Advanced)\nAfter all, Tiptap is built on ProseMirror and ProseMirror has a pretty powerful plugin API, too. To access that directly, use `addProseMirrorPlugins()`.\n\n#### Existing plugins\nYou can wrap existing ProseMirror plugins in Tiptap extensions like shown in the example below.\n\n```js\nimport { history } from '@tiptap/pm/history'\n\nconst History = Extension.create({\n  addProseMirrorPlugins() {\n    return [\n      history(),\n      // …\n    ]\n  },\n})\n```\n\n#### Access the ProseMirror API\nTo hook into events, for example a click, double click or when content is pasted, you can pass [event handlers](https://prosemirror.net/docs/ref/#view.EditorProps) to `editorProps` on the [editor](/api/editor#editor-props).\n\nOr you can add them to a Tiptap extension like shown in the below example.\n\n```js\nimport { Extension } from '@tiptap/core'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\nexport const EventHandler = Extension.create({\n  name: 'eventHandler',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('eventHandler'),\n        props: {\n          handleClick(view, pos, event) { /* … */ },\n          handleDoubleClick(view, pos, event) { /* … */ },\n          handlePaste(view, event, slice) { /* … */ },\n          // … and many, many more.\n          // Here is the full list: https://prosemirror.net/docs/ref/#view.EditorProps\n        },\n      }),\n    ]\n  },\n})\n```\n\n### Node views (Advanced)\nFor advanced use cases, where you need to execute JavaScript inside your nodes, for example to render a sophisticated interface around an image, you need to learn about node views.\n\nThey are really powerful, but also complex. In a nutshell, you need to return a parent DOM element, and a DOM element where the content should be rendered in. Look at the following, simplified example:\n\n```js\nimport Image from '@tiptap/extension-image'\n\nconst CustomImage = Image.extend({\n  addNodeView() {\n    return () => {\n      const container = document.createElement('div')\n\n      container.addEventListener('click', event => {\n        alert('clicked on the container')\n      })\n\n      const content = document.createElement('div')\n      container.append(content)\n\n      return {\n        dom: container,\n        contentDOM: content,\n      }\n    }\n  },\n})\n```\n\nThere is a whole lot to learn about node views, so head over to the [dedicated section in our guide about node views](/guide/node-views) for more information. If you are looking for a real-world example, look at the source code of the [`TaskItem`](/api/nodes/task-item) node. This is using a node view to render the checkboxes.\n\n## Create new extensions\nYou can build your own extensions from scratch and you know what? It’s the same syntax as for extending existing extension described above.\n\n### Create a node\nIf you think of the document as a tree, then [nodes](/api/nodes) are just a type of content in that tree. Good examples to learn from are [`Paragraph`](/api/nodes/paragraph), [`Heading`](/api/nodes/heading), or [`CodeBlock`](/api/nodes/code-block).\n\n```js\nimport { Node } from '@tiptap/core'\n\nconst CustomNode = Node.create({\n  name: 'customNode',\n\n  // Your code goes here.\n})\n```\n\nNodes don’t have to be blocks. They can also be rendered inline with the text, for example for [@mentions](/api/nodes/mention).\n\n### Create a mark\nOne or multiple marks can be applied to [nodes](/api/nodes), for example to add inline formatting. Good examples to learn from are [`Bold`](/api/marks/bold), [`Italic`](/api/marks/italic) and [`Highlight`](/api/marks/highlight).\n\n```js\nimport { Mark } from '@tiptap/core'\n\nconst CustomMark = Mark.create({\n  name: 'customMark',\n\n  // Your code goes here.\n})\n```\n\n### Create an extension\nExtensions add new capabilities to Tiptap and you’ll read the word extension here very often, even for nodes and marks. But there are literal extensions. Those can’t add to the schema (like marks and nodes do), but can add functionality or change the behaviour of the editor.\n\nA good example to learn from is probably [`TextAlign`](/api/extensions/text-align).\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  name: 'customExtension',\n\n  // Your code goes here.\n})\n```\n\n## Creating and publishing standalone extensions\nIf you want to create and publish your own extensions for Tiptap, you can use our CLI tool to bootstrap your project.\nSimply run `npm init tiptap-extension` and follow the instructions. The CLI will create a new folder with a pre-configured project for you including a build script running on Rollup.\n\nIf you want to test your extension locally, you can run `npm link` in the project folder and then `npm link YOUR_EXTENSION` in your project (for example a Vite app).\n\n## Sharing\nWhen everything is working fine, don’t forget to [share it with the community](https://github.com/ueberdosis/tiptap/issues/819) or in our [awesome-tiptap](https://github.com/ueberdosis/awesome-tiptap) repository.\n"
    },
    {
        "url": "./guide/output.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Output\n\n## Introduction\nYou can store your content as a JSON object or as a good old HTML string. Both work fine. And of course, you can pass both formats to the editor to restore your content. Here is an interactive example, that exports the content as HTML and JSON when the document is changed:\n\n## Export\n\n### Option 1: JSON\nJSON is probably easier to loop through, for example to look for a mention and it’s more like what Tiptap uses under the hood. Anyway, if you want to use JSON to store the content we provide a method to retrieve the content as JSON:\n\n```js\nconst json = editor.getJSON()\n```\n\nYou can store that in your database (or send it to an API) and restore the document initially:\n\n```js\nnew Editor({\n  content: {\n    \"type\": \"doc\",\n    \"content\": [\n      // …\n    ]\n  },\n})\n```\n\nOr if you need to wait for something, you can do it later through the editor instance:\n\n```js\neditor.commands.setContent({\n  \"type\": \"doc\",\n  \"content\": [\n    // …\n  ]\n})\n```\n\nHere is an interactive example where you can see that in action:\n\nhttps://embed.tiptap.dev/preview/GuideContent/ExportJSON?hideSource\n\n### Option 2: HTML\nHTML can be easily rendered in other places, for example in emails and it’s widely used, so it’s probably easier to switch the editor at some point. Anyway, every editor instance provides a method to get HTML from the current document:\n\n```js\nconst html = editor.getHTML()\n```\n\nThis can then be used to restore the document initially:\n\n```js\nnew Editor({\n  content: `<p>Example Text</p>`,\n})\n```\n\nOr if you want to restore the content later (e. g. after an API call has finished), you can do that too:\n```js\neditor.commands.setContent(`<p>Example Text</p>`)\n```\n\nUse this interactive example to fiddle around:\n\nhttps://embed.tiptap.dev/preview/GuideContent/ExportHTML?hideSource\n\n### Option 3: Y.js\nOur editor has top notch support for Y.js, which is amazing to add features like [realtime collaboration, offline editing, or syncing between devices](/guide/collaborative-editing).\n\nInternally, Y.js stores a history of all changes. That can be in the browser, on a server, synced with other connected clients, or on a USB stick. But, it’s important to know that Y.js needs those stored changes. A simple JSON document is not enough to merge changes.\n\nSure, you can import existing JSON documents to get started and get a JSON out of Y.js, but that’s more like an import/export format. It won’t be your single source. That’s important to consider when adding Y.js for one of the mentioned use cases.\n\nThat said, it’s amazing and we’re about to provide an amazing backend, that makes all that a breeze.\n\n### Not an option: Markdown\nUnfortunately, **Tiptap doesn’t support Markdown as an input or output format**. We considered to add support for it, but those are the reasons why we decided to not do it:\n\n* Both, HTML and JSON, can have deeply nested structures, Markdown is flat.\n* Markdown standards vary.\n* Tiptap’s strength is customization, that doesn’t work very well with Markdown.\n* There are enough packages to convert HTML to Markdown and vice-versa.\n\nYou should really consider to work with HTML or JSON to store your content, they are perfectly fine for most use cases.\n\nIf you still think you need Markdown, ProseMirror has an [example on how to deal with Markdown](https://prosemirror.net/examples/markdown/), [Nextcloud Text](https://github.com/nextcloud/text) uses Tiptap 1 to work with Markdown. Maybe you can learn from them. Or if you are looking for a really good Markdown editor, try [CodeMirror](https://codemirror.net/).\n\nThat said, Tiptap does support [Markdown shortcuts](/examples/markdown-shortcuts) to format your content. Also you’re free to let your content look like Markdown, for example add a `#` before an `<h1>` with CSS.\n\n## Listening for changes\nIf you want to continuously store the updated content while people write, you can [hook into events](/api/events). Here is an example how that could look like:\n\n```js\nconst editor = new Editor({\n  // intial content\n  content: `<p>Example Content</p>`,\n\n  // triggered on every change\n  onUpdate: ({ editor }) => {\n    const json = editor.getJSON()\n    // send the content to an API here\n  },\n})\n```\n\n## Rendering\n\n### Option 1: Read-only instance of Tiptap\nTo render the saved content, set the editor to read-only. That’s how you can achieve the exact same rendering as it’s in the editor, without duplicating your CSS and other code.\n\nhttps://embed.tiptap.dev/preview/GuideContent/ReadOnly\n\n### Option 2: Generate HTML from ProseMirror JSON\nIf you need to render the content on the server side, for example to generate the HTML for a blog post, which has been written in Tiptap, you’ll probably want to do just that without an actual editor instance.\n\nThat’s what the `generateHTML()` is for. It’s a helper function which renders HTML without an actual editor instance.\n\nhttps://embed.tiptap.dev/preview/GuideContent/GenerateHTML\n\nBy the way, the other way is possible, too. The below examples shows how to generate JSON from HTML.\n\nhttps://embed.tiptap.dev/preview/GuideContent/GenerateJSON\n\n## Migration\nIf you’re migrating existing content to Tiptap we would recommend to get your existing output to HTML. That’s probably the best format to get your initial content into Tiptap, because ProseMirror ensures there is nothing wrong with it. Even if there are some tags or attributes that aren’t allowed (based on your configuration), Tiptap just throws them away quietly.\n\nWe’re about to go through a few cases to help with that, for example we provide a PHP package to convert HTML to a compatible JSON structure: [ueberdosis/prosemirror-to-html](https://github.com/ueberdosis/html-to-prosemirror).\n\n[Share your experiences with us!](mailto:humans@tiptap.dev) We’d like to add more information here.\n\n## Security\nThere is no reason to use one or the other because of security concerns. If someone wants to send malicious content to your server, it doesn’t matter if it’s JSON or HTML. It doesn’t even matter if you’re using Tiptap or not. You should always validate user input.\n"
    },
    {
        "url": "./guide/accessibility.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Accessibility\n\n:::pro Fund the development ♥\nWe need your support to maintain, update, support and develop Tiptap. If you’re waiting for progress here, [become a sponsor and fund our work](/sponsor).\n:::\n\n## Introduction\nWe strive to make Tiptap accessible to everyone, but to be honest, there’s not much work done now. From our current understanding, that’s what needs to be done:\n\n## Interface\nAn interface needs to have well-defined contrasts, big enough click areas, semantic markup, must be keyboard accessible and well documented. Currently, we don’t even provide an interface, so for now that’s totally up to you.\n\nBut no worries, we’ll provide an interface soon and take accessibility into account early on.\n\n## Output\nThe editor needs to produce semantic markup, must be keyboard accessible and well documented. The Tiptap content is well structured so that’s a good foundation already. That said, we can add support and encourage the usage of additional attributes, for example the Alt-attribute for images.\n\n### Writing assistance (optional)\nAn optional writing assitance could help people writing content semanticly correct, for example pointing out an incorrect usage of heading levels. With that kind of assistance provided by the core developers, we could help to improve the content of a lot of applications.\n\n## Resources\n\n| Document | Section | Heading                                                                                |\n| -------- | ------- | -------------------------------------------------------------------------------------- |\n| WCAG 3.0 | 7.1     | [Text Alternatives](https://www.w3.org/TR/wcag-3.0/#text-alternatives)                 |\n| WCAG 2.1 | 1.1.1   | [Non-text Content](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content)       |\n| WCAG 2.1 | 2.1     | [Keyboard Accessible](https://www.w3.org/WAI/WCAG21/Understanding/keyboard-accessible) |\n| WCAG 2.1 | 2.1.1   | [Keyboard](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)                       |\n| WCAG 2.1 | 4.1.1   | [Parsing](https://www.w3.org/WAI/WCAG21/Understanding/parsing)                         |\n| WCAG 2.1 | 4.1.2   | [Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)       |\n| WCAG 2.1 | 2.1.2   | [No Keyboard Trap](https://www.w3.org/TR/WCAG21/#no-keyboard-trap)                     |\n\nTODO: Update resources to point to WCAG 3.0 https://www.w3.org/TR/wcag-3.0/\n\nAnything we should add here? [Please let us know](mailto:humans@tiptap.dev), so we can take it into account.\n"
    },
    {
        "url": "./guide/menus.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Create menus\n\n## Introduction\nTiptap comes very raw, but that’s a good thing. You have full control over the appearance of things.\n\nWhen we say full control, we mean it. You can (and have to) build a menu on your own, but Tiptap will help you wire everything up.\n\n## Menus\nThe editor provides a fluent API to trigger commands and add active states. You can use any markup you like. To make the positioning of menus easier, Tiptap provides a few utilities and components. Let’s go through the most typical use cases one by one.\n\n### Fixed menu\nA fixed menu is one that permanently sits in one location. For example, it's popular to place a fixed menu above the editor. Tiptap doesn't come prepackaged with a fixed menu, but you can build one by simply creating a `<div>` element and filling it with a few `<button>` elements. [See below](#buttons) to learn how those buttons can trigger [commands](/api/commands) in the editor, for example bolding or italicizing text.\n\n### Bubble menu\nA [bubble menu](/api/extensions/bubble-menu) is one that appears when selecting text. The markup and styling here is totally up to you.\n\nhttps://embed.tiptap.dev/preview/Extensions/BubbleMenu?hideSource\n\n### Floating menu\nA [floating menu](/api/extensions/floating-menu) appears in the editor when you place your cursor on an empty line. Again, the markup and styling here is totally up to you.\n\nhttps://embed.tiptap.dev/preview/Extensions/FloatingMenu?hideSource\n\n### Slash commands (work in progress)\nAlthough there isn't an official extension yet, there is [an experiment](/experiments/commands) that allows you to use \"slash commands.\" With slash commands, typing `/` at the beginning of a new line will reveal a popup menu.\n\n## Buttons\nOkay, you’ve got your menu. But how do you wire things up?\n\n### Commands\nYou’ve got the editor running already and want to add your first button. You need a `<button>` HTML tag with a click handler. Depending on your setup, that can look like the following example:\n\n```html\n<button onclick=\"editor.chain().focus().toggleBold().run()\">\n  Bold\n</button>\n```\n\nOh, that’s a long command, right? Actually, it’s a [chain of commands](/api/commands#chain-commands). Let’s go through this one by one:\n\n```js\neditor.chain().focus().toggleBold().run()\n```\n\n1. `editor` should be a Tiptap instance,\n2. `chain()` is used to tell the editor you want to execute multiple commands,\n3. `focus()` sets the focus back to the editor,\n4. `toggleBold()` marks the selected text bold, or removes the bold mark from the text selection if it’s already applied and\n5. `run()` will execute the chain.\n\nIn other words: This will be a typical **Bold** button for your text editor.\n\nWhich commands are available depends on what extensions you have registered with the editor. Most extensions come with a `set…()`, `unset…()` and `toggle…()` command. Read the extension documentation to see what’s actually available or just surf through your code editor’s autocomplete.\n\n### Keep the focus\nYou have already seen the `focus()` command in the above example. When you click on the button, the browser focuses that DOM element and the editor loses focus. It’s likely you want to add `focus()` to all your menu buttons, so the writing flow of your users isn’t interrupted.\n\n### The active state\nThe editor provides an `isActive()` method to check if something is applied to the selected text already. In Vue.js you can toggle a CSS class with help of that function:\n\n```html\n<button :class=\"{ 'is-active': editor.isActive('bold') }\" @click=\"editor.chain().focus().toggleBold().run()\">\n  Bold\n</button>\n```\n\nThis toggles the `.is-active` class accordingly and works for nodes and marks. You can even check for specific attributes. Here is an example with the [`Highlight`](/api/marks/highlight) mark, that ignores different attributes:\n\n```js\neditor.isActive('highlight')\n```\n\nAnd an example that compares the given attribute(s):\n\n```js\neditor.isActive('highlight', { color: '#ffa8a8' })\n```\n\nThere is even support for regular expressions:\n\n```js\neditor.isActive('textStyle', { color: /.*/ })\n```\n\nYou can even check nodes and marks, but check for the attributes only. Here is an example with the [`TextAlign`](/api/extensions/text-align) extension:\n\n```js\neditor.isActive({ textAlign: 'right' })\n```\n\nIf your selection spans multiple nodes or marks, or only part of the selection has a mark, `isActive()` will return `false` and indicate nothing is active. This is how it is supposed to be, because it allows people to apply a new node or mark to that selection right-away.\n\n## User experience\nWhen designing a great user experience you should consider a few things.\n\n### Accessibility\n* Make sure users can navigate the menu with their keyboard\n* Use proper [title attributes](https://developer.mozilla.org/de/docs/Web/HTML/Global_attributes/title)\n* Use proper [aria attributes](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics)\n* List available keyboard shortcuts\n\n:::warning Incomplete\nThis section needs some work. Do you know what else needs to be taken into account when building an editor menu? Let us know on [GitHub](https://github.com/ueberdosis/tiptap) or send us an email to [humans@tiptap.dev](mailto:humans@tiptap.dev)!\n:::\n\n### Icons\nMost editor menus use icons for their buttons. In some of our demos, we use the open source icon set [Remix Icon](https://remixicon.com/), which is free to use. But it’s totally up to you what you use. Here are a few icon sets you can consider:\n\n* [Remix Icon](https://remixicon.com/#editor)\n* [Font Awesome](https://fontawesome.com/icons?c=editors)\n* [UI icons](https://www.ibm.com/design/language/iconography/ui-icons/library/)\n"
    },
    {
        "url": "./guide/node-views.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Interactive node views\n\n## Introduction\nNode views are the best thing since sliced bread, at least if you are a fan of customization (and bread). With node views you can add interactive nodes to your editor. That can literally be everything. If you can write it in JavaScript, you can use it in your editor.\n\nNode views are amazing to improve the in-editor experience, but can also be used in a read-only instance of Tiptap. They are unrelated to the HTML output by design, so you have full control about the in-editor experience *and* the output.\n\n## Different types of node views\nDepending on what you would like to build, node views work a little bit different and can have their verify specific capabilities, but also pitfalls. The main question is: How should your custom node look like?\n\n### Editable text\nYes, node views can have editable text, just like a regular node. That’s simple. The cursor will exactly behave like you would expect it from a regular node. Existing commands work very well with those nodes.\n\n```html\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view>text</node-view>\n  <p>text</p>\n</div>\n```\n\nThat’s how the [`TaskItem`](/api/nodes/task-item) node works.\n\n### Non-editable text\nNodes can also have text, which is not editable. The cursor can’t jump into those, but you don’t want that anyway.\n\nTiptap adds a `contenteditable=\"false\"` to those by default.\n\n```html\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view contenteditable=\"false\">text</node-view>\n  <p>text</p>\n</div>\n```\n\nThat’s how you could render mentions, which shouldn’t be editable. Users can add or delete them, but not delete single characters.\n\nStatamic uses those for their Bard editor, which renders complex modules inside Tiptap, which can have their own text inputs.\n\n### Mixed content\nYou can even mix non-editable and editable text. That’s great to build complex things, and still use marks like bold and italic inside the editable content.\n\n**BUT**, if there are other elements with non-editable text in your node view, the cursor can jump there. You can improve that with manually adding `contenteditable=\"false\"` to the specific parts of your node view.\n\n```html\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view>\n    <div contenteditable=\"false\">\n      non-editable text\n    </div>\n    <div>\n      editable text\n    </div>\n  </node-view>\n  <p>text</p>\n</div>\n```\n\n## Markup\nBut what happens if you [access the editor content](/guide/output)? If you’re working with HTML, you’ll need to tell Tiptap how your node should be serialized.\n\nThe editor **does not** export the rendered JavaScript node, and for a lot of use cases you wouldn’t want that anyway.\n\nLet’s say you have a node view which lets users add a video player and configure the appearance (autoplay, controls, …). You want the interface to do that in the editor, not in the output of the editor. The output of the editor should probably only have the video player.\n\nI know, I know, it’s not that easy. Just keep in mind, that you‘re in full control of the rendering inside the editor and of the output.\n\n:::warning What if you store JSON?\nThat doesn’t apply to JSON. In JSON, everything is stored as an object. There is no need to configure the “translation” to and from JSON.\n:::\n\n### Render HTML\nOkay, you’ve set up your node with an interactive node view and now you want to control the output. Even if your node view is pretty complex, the rendered HTML can be simple:\n\n```js\nrenderHTML({ HTMLAttributes }) {\n  return ['my-custom-node', mergeAttributes(HTMLAttributes)]\n},\n\n// Output: <my-custom-node count=\"1\"></my-custom-node>\n```\n\nMake sure it’s something distinguishable, so it’s easier to restore the content from the HTML. If you just need something generic markup like a `<div>` consider to add a `data-type=\"my-custom-node\"`.\n\n### Parse HTML\nThe same applies to restoring the content. You can configure what markup you expect, that can be something completely unrelated to the node view markup. It just needs to contain all the information you want to restore.\n\nAttributes are automagically restored, if you registered them through [`addAttributes`](/guide/custom-extensions#attributes).\n\n```js\n// Input: <my-custom-node count=\"1\"></my-custom-node>\n\nparseHTML() {\n  return [{\n    tag: 'my-custom-node',\n  }]\n},\n```\n\n### Render JavaScript/Vue/React\nBut what if you want to render your actual JavaScript/Vue/React code? Consider using Tiptap to render your output. Just set the editor to `editable: false` and no one will notice you’re using an editor to render the content. :-)\n\n<!-- ## Reference\n\n### dom: ?⁠dom.Node\n> The outer DOM node that represents the document node. When not given, the default strategy is used to create a DOM node.\n\n### contentDOM: ?⁠dom.Node\n> The DOM node that should hold the node's content. Only meaningful if the node view also defines a dom property and if its node type is not a leaf node type. When this is present, ProseMirror will take care of rendering the node's children into it. When it is not present, the node view itself is responsible for rendering (or deciding not to render) its child nodes.\n\n### update: ?⁠fn(node: Node, decorations: [Decoration]) → bool\n> When given, this will be called when the view is updating itself. It will be given a node (possibly of a different type), and an array of active decorations (which are automatically drawn, and the node view may ignore if it isn't interested in them), and should return true if it was able to update to that node, and false otherwise. If the node view has a contentDOM property (or no dom property), updating its child nodes will be handled by ProseMirror.\n\n### selectNode: ?⁠fn()\n> Can be used to override the way the node's selected status (as a node selection) is displayed.\n\n### deselectNode: ?⁠fn()\n> When defining a selectNode method, you should also provide a deselectNode method to remove the effect again.\n\n### setSelection: ?⁠fn(anchor: number, head: number, root: dom.Document)\n> This will be called to handle setting the selection inside the node. The anchor and head positions are relative to the start of the node. By default, a DOM selection will be created between the DOM positions corresponding to those positions, but if you override it you can do something else.\n\n### stopEvent: ?⁠fn(event: dom.Event) → bool\n> Can be used to prevent the editor view from trying to handle some or all DOM events that bubble up from the node view. Events for which this returns true are not handled by the editor.\n\n### ignoreMutation: ?⁠fn(dom.MutationRecord) → bool\n> Called when a DOM mutation or a selection change happens within the view. When the change is a selection change, the record will have a type property of \"selection\" (which doesn't occur for native mutation records). Return false if the editor should re-read the selection or re-parse the range around the mutation, true if it can safely be ignored.\n\n### destroy: ?⁠fn()\n> Called when the node view is removed from the editor or the whole editor is destroyed. -->\n"
    },
    {
        "url": "./guide/extend-extensions.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Overwrite & extend\n\n"
    },
    {
        "url": "./guide/collaborative-editing.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Collaborative editing\n\n## Introduction\nReal-time collaboration, syncing between different devices and working offline used to be hard. We provide everything you need to keep everything in sync with the power of [Y.js](https://github.com/yjs/yjs). The following guide helps you get started with collaborative editing in Tiptap. Don’t worry, a production-grade setup doesn’t require much code.\n\n## Configure the editor\nThe underyling schema Tiptap uses is an excellent foundation to sync documents. With the [`Collaboration`](/api/extensions/collaboration) extension you can tell Tiptap to track changes to the document with [Y.js](https://github.com/yjs/yjs).\n\nY.js is a conflict-free replicated data types implementation, or in other words: It’s really good in merging changes. And to achieve that, changes don’t even have to come in order. It’s totally fine to change a document while being offline and merge it with other changes when the device is online again.\n\nSomehow, all clients need to interchange document modifications at some point. The most popular technologies to do that are [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) and [WebSockets](https://developer.mozilla.org/de/docs/Web/API/WebSocket), so let’s have a closer look at those:\n\n### WebRTC\nWebRTC uses a server only to connect clients with each other. The actual data is then flowing between the clients, without the server knowing anything about it and that’s great to take the first steps with collaborative editing.\n\nFirst, install the dependencies:\n\n```bash\nnpm install @tiptap/extension-collaboration yjs y-webrtc y-prosemirror\n```\n\nNow, create a new Y document, and register it with Tiptap:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\nimport { WebrtcProvider } from 'y-webrtc'\n\n// A new Y document\nconst ydoc = new Y.Doc()\n// Registered with a WebRTC provider\nconst provider = new WebrtcProvider('example-document', ydoc)\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    // Register the document with Tiptap\n    Collaboration.configure({\n      document: ydoc,\n    }),\n  ],\n})\n```\n\nThis should be enough to create a collaborative instance of Tiptap. Crazy, isn’t it? Try it out, and open the editor in two different browsers. Changes should be synced between different windows.\n\nSo how does this magic work? All clients need to connect with eachother, that’s the job of a *provider*. The [WebRTC provider](https://github.com/yjs/y-webrtc) is the easiest way to get started with, as it uses a public server to connect clients directly with each other, but not to sync the actual changes. This has two downsides, though.\n\n1. Browsers refuse to connect with too many clients. With Y.js it’s enough if all clients are connected indirectly, but even that isn’t possible at some point. Or in other words, it doesn’t scale well for more than 100+ concurrent clients in the same document.\n2. It’s likely you want to involve a server to persist changes anyway. But the WebRTC signaling server (which connects all clients with eachother) doesn’t receive the changes and therefore doesn’t know what’s in the document.\n\nAnyway, if you want to dive deeper, head over to [the Y WebRTC repository](https://github.com/yjs/y-webrtc) on GitHub.\n\n### WebSocket (Recommended)\nFor most uses cases, a WebSocket provider is the recommended choice. It’s very flexible and can scale very well. To make it even easier, we  released [Hocuspocus](https://hocuspocus.dev) as an official backend for Tiptap.\n\nFor the client, the example is nearly the same, only the provider is different. First, let’s install the dependencies:\n\n```bash\nnpm install @tiptap/extension-collaboration @hocuspocus/provider y-prosemirror\n```\n\nAnd then register the WebSocket provider with Tiptap:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\n// Set up the Hocuspocus WebSocket provider\nconst provider = new HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n})\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    // Register the document with Tiptap\n    Collaboration.configure({\n      document: provider.document,\n    }),\n  ],\n})\n```\n\nThis example doesn’t work out of the box. As you can see, it’s configured to talk to a WebSocket server which is available under `ws://127.0.0.1:1234` (WebSocket protocol `ws://`, your local IP `127.0.0.1` and the port `1234`). You need to set this up, too.\n\n#### The WebSocket backend\nTo make the server part as easy as possible, we provide [an opinionated server package, called Hocuspocus](http://hocuspocus.dev/). It’s a flexible Node.js package, that you can use to build your custom backend.\n\nFor the purpose of that guide, let’s just use the command-line interface which boots a minimal server literally in seconds:\n\n```bash\nnpx @hocuspocus/cli --port 1234 --sqlite\n```\n\nThis command downloads the Hocuspocus command-line interface, starts a server listening on port 1234 and stores changes in the memory (so it’s gone once you stop the command). The output should look like this:\n\n```\nHocuspocus v1.0.0 running at:\n\n> HTTP: http://127.0.0.1:1234\n> WebSocket: ws://127.0.0.1:1234\n\nReady.\n```\n\nTry opening http://127.0.0.1:1234 in your browser. You should see a plain text `OK` if everything works fine.\n\nGo back to your Tiptap editor and hit reload, it should now connect to the Hocuspocus WebSocket server and changes should sync with all other clients. Amazing, isn’t it?\n\n\n!!tiptap-collab-cta\n\n### Multiple network providers\nYou can even combine multiple providers. That’s not needed, but could keep clients connected, even if one connection - for example the WebSocket server - goes down for a while. Here is an example:\n\n```js\nnew WebrtcProvider('example-document', ydoc)\nnew HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n  document: ydoc,\n})\n```\n\nYes, that’s all.\n\nKeep in mind that WebRTC needs a signaling server to connect clients. This signaling server doesn’t receive the synced data, but helps to let clients find each other. You can [run your own signaling server](https://github.com/yjs/y-webrtc#signaling), if you like. Otherwise it’s using a default URL baked into the package.\n\n### Show other cursors\nTo enable users to see the cursor and text selections of each other, add the [`CollaborationCursor`](/api/extensions/collaboration-cursor) extension.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport CollaborationCursor from '@tiptap/extension-collaboration-cursor'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\n// Set up the Hocuspocus WebSocket provider\nconst provider = new HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n})\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    Collaboration.configure({\n      document: provider.document,\n    }),\n    // Register the collaboration cursor extension\n    CollaborationCursor.configure({\n      provider: provider,\n      user: {\n        name: 'Cyndi Lauper',\n        color: '#f783ac',\n      },\n    }),\n  ],\n})\n```\n\nAs you can see, you can pass a name and color for every user. Look at the [collaborative editing example](/examples/collaborative-editing), to see a more advanced example.\n\n### Offline support\nAdding offline support to your collaborative editor is basically a one-liner, thanks to the fantastic [Y IndexedDB adapter](https://github.com/yjs/y-indexeddb). Install it:\n\n```bash\nnpm install y-indexeddb\n```\n\nAnd connect it with a Y document:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\nimport { IndexeddbPersistence } from 'y-indexeddb'\n\nconst ydoc = new Y.Doc()\n\n// Store the Y document in the browser\nnew IndexeddbPersistence('example-document', ydoc)\n\nconst editor = new Editor({\n  extensions: [\n    // …\n    Collaboration.configure({\n      document: ydoc,\n    }),\n  ],\n})\n```\n\nAll changes will be stored in the browser then, even if you close the tab, go offline, or make changes while working offline. Next time you are online, the WebSocket provider will try to find a connection and eventually sync the changes.\n\nYes, it’s magic. As already mentioned, that is all based on the fantastic Y.js framework. And if you’re using it, or our integration, you should definitely [sponsor Kevin Jahns on GitHub](https://github.com/dmonad), he is the brain behind Y.js.\n\n## Our plug & play collaboration backend\nOur collaborative editing backend [Hocuspocus](https://hocuspocus.dev) handles the syncing, authorization, persistence and scaling. Let’s go through a few common use cases here!\n\n### The document name\nThe document name is `'example-document'` in all examples here, but it could be any string. In a real-world app you’d probably add the name of your entity and the ID of the entity. Here is how that could look like:\n\n```js\nconst documentName = 'page.140'\n```\n\nIn the backend, you can split the string to know the user is typing on a page with the ID 140 to manage authorization and such accordingly. New documents are created on the fly, no need to tell the backend about them, besides passing a string to the provider.\n\nAnd if you would like to sync multiple fields with one Y.js document, just pass different fragment names to the collaboration extension:\n\n```js\n// a Tiptap instance for the field\nCollaboration.configure({\n  document: ydoc,\n  field: 'title',\n})\n\n// and another instance for the summary, both in the same Y.js document\nCollaboration.configure({\n  document: ydoc,\n  field: 'summary',\n})\n```\n\nIf your setup is somehow more complex, for example with nested fragments, you can pass a raw Y.js fragment too. `document` and `field` will be ignored then.\n\n```js\n// a raw Y.js fragment\nCollaboration.configure({\n  fragment: ydoc.getXmlFragment('custom'),\n})\n```\n\n### Authentication & Authorization\nWith the `onAuthenticate` hook you can check if a client is authenticated and authorized to view the current document. In a real world application this would probably be a request to an API, a database query or something else.\n\nWhen throwing an error (or rejecting the returned Promise), the connection to the client will be terminated. If the client is authorized and authenticated you can also return contextual data which will be accessible in other hooks. But you don’t need to.\n\n```js\nimport { Server } from '@hocuspocus/server'\n\nconst server = Server.configure({\n  async onAuthenticate({ token }) {\n    // Example test if a user is authenticated\n    if (token !== 'super-secret-token') {\n      throw new Error('Not authorized!')\n    }\n\n    // You can set contextual data to use it in other hooks\n    return {\n      user: {\n        id: 1234,\n        name: 'John',\n      },\n    }\n  },\n})\n\nserver.listen()\n```\n\n## Tiptap Collab – our hosted solution\n\nIf you don’t want the struggle of self-hosting and scaling Hocuspocus, make sure to check out our managed solution Tiptap Collab.\n\nIt’s just a few clicks away, really.\n\n!!tiptap-collab-cta\n\n## Pitfalls\n\n### Schema updates\nTiptap is very strict with the [schema](/api/schema), that means, if you add something that’s not allowed according to the configured schema it’ll be thrown away. That can lead to a strange behaviour when multiple clients with different schemas share changes to a document.\n\nLet’s say you added an editor to your app and the first people use it already. They have all a loaded instance of Tiptap with all default extensions, and therefor a schema that only allows those. But you want to add task lists in the next update, so you add the extension and deploy again.\n\nA new user opens your app and has the updated schema (with task lists), while all others still have the old schema (without task lists). The new user checks out the newly added tasks lists and adds it to a document to show that feature to other users in that document. But then, it magically disappears right after she added it. What happened?\n\nWhen one user adds a new node (or mark), that change will be synced to all other connected clients. The other connected clients apply those changes to the editor, and Tiptap, strict as it is, removes the newly added node, because it’s not allowed according to their (old) schema. Those changes will be synced to other connected clients and oops, it’s removed everywhere. To avoid this you have a few options:\n\n1. Never change the schema (not cool).\n2. Force clients to update when you deploy a new schema (tough).\n3. Keep track of the schema version and disable the editor for clients with an outdated schema (depends on your setup).\n\nIt’s on our list to provide features to make that easier. If you’ve got an idea how to improve that, share it with us!\n"
    },
    {
        "url": "./guide/configuration.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Configuration\n\n## Introduction\nFor most cases it’s enough to say where Tiptap should be rendered (`element`), what functionalities you want to enable (`extensions`) and what the initial document should be (`content`).\n\nA few more things can be configured though. Let’s look at a fully configured editor example.\n\n## Configure the editor\nTo add your configuration, pass [an object with settings](/api/editor) to the `Editor` class, like shown here:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n  ],\n  content: '<p>Example Text</p>',\n  autofocus: true,\n  editable: true,\n  injectCSS: false,\n})\n```\n\nThis will do the following:\n\n1. bind Tiptap to `.element`,\n2. load the `Document`, `Paragraph` and `Text` extensions,\n3. set the initial content,\n4. place the cursor in the editor after initialization,\n5. make the text editable (but that’s the default anyway), and\n6. disable the loading of [the default CSS](https://github.com/ueberdosis/tiptap/tree/main/packages/core/src/style.ts) (which is not much anyway).\n\n## Nodes, marks and extensions\nMost editing features are bundled as [node](/api/nodes), [mark](/api/marks) or [extension](/api/extensions). Import what you need and pass them as an array to the editor.\n\nHere is the minimal setup with only three extensions:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n  ],\n})\n```\n\n### Configure extensions\nMost extensions can be configured. Add a `.configure()` and pass an object to it.\n\nThe following example will disable the default heading levels 4, 5 and 6 and just allow 1, 2 and 3:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Heading from '@tiptap/extension-heading'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    Heading.configure({\n      levels: [1, 2, 3],\n    }),\n  ],\n})\n```\n\nHave a look at the documentation of the extension you are using to learn more about their settings.\n\n### Default extensions\nWe have bundled a few of the most common extensions into a `StarterKit` extension. Here is how you to use that:\n\n```js\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit,\n  ],\n})\n```\n\nYou can even pass a configuration for all included extensions as an object. Just prefix the configuration with the extension name:\n\n```js\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: StarterKit.configure({\n    heading: {\n      levels: [1, 2, 3],\n    },\n  }),\n})\n```\n\nThe `StarterKit` extension loads the most common extensions, but not all available extensions. If you want to load additional extensions or add a custom extension, add them to the `extensions` array:\n\n```js\nimport StarterKit from '@tiptap/starter-kit'\nimport Strike from '@tiptap/extension-strike'\n\nnew Editor({\n  extensions: [\n    StarterKit,\n    Strike,\n  ],\n})\n```\n\nDon’t want to load a specific extension from the `StarterKit`? Just pass `false` to the config:\n\n```js\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit.configure({\n      history: false,\n    }),\n  ],\n})\n```\n\nYou will probably see something like that in collaborative editing examples. The [`Collaboration`](/api/extensions/collaboration) comes with its own history extension. You need to remove or disable the default [`History`](/api/extensions/history) extension to avoid conflicts.\n"
    },
    {
        "url": "./guide/styling.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Styling\n\n## Introduction\nTiptap is headless, that means there is no styling provided. That also means, you are in full control of how your editor looks. The following methods allow you to apply custom styles to the editor.\n\n## Option 1: Style the plain HTML\nThe whole editor is rendered inside of a container with the class `.tiptap`. You can use that to scope your styling to the editor content:\n\n```css\n/* Scoped to the editor */\n.tiptap p {\n  margin: 1em 0;\n}\n```\n\nIf you’re rendering the stored content somewhere, there won’t be a `.tiptap` container, so you can just globally add styling to the used HTML tags:\n\n```css\n/* Global styling */\np {\n  margin: 1em 0;\n}\n```\n\n\n## Option 2: Add custom classes\nYou can control the whole rendering, including adding classes to everything.\n\n### Extensions\nMost extensions allow you to add attributes to the rendered HTML through the `HTMLAttributes` option. You can use that to add a custom class (or any other attribute). That’s also very helpful, when you work with [Tailwind CSS](https://tailwindcss.com/).\n\n```js\nnew Editor({\n  extensions: [\n    Document,\n    Paragraph.configure({\n      HTMLAttributes: {\n        class: 'my-custom-paragraph',\n      },\n    }),\n    Heading.configure({\n      HTMLAttributes: {\n        class: 'my-custom-heading',\n      },\n    }),\n    Text,\n  ],\n})\n```\n\nThe rendered HTML will look like this:\n\n```html\n<h1 class=\"my-custom-heading\">Example Text</h1>\n<p class=\"my-custom-paragraph\">Wow, that’s really custom.</p>\n```\n\nIf there are already classes defined by the extensions, your classes will be added.\n\n### Editor\nYou can even pass classes to the element which contains the editor:\n\n```js\nnew Editor({\n  editorProps: {\n    attributes: {\n      class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none',\n    },\n  },\n})\n```\n\n### With Tailwind CSS\nThe editor works fine with Tailwind CSS, too. Find an example that’s styled with the `@tailwindcss/typography` plugin below.\n\nhttps://embed.tiptap.dev/preview/Experiments/Tailwind\n\n#### Intellisense\nIf you're using [TailwindCSS Intellisense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) add the following snippet to your `.vscode/setting.json` to add intellisense support inside TipTap objects:\n```json\n\"tailwindCSS.experimental.classRegex\": [\n  \"class:\\\\s*?[\\\"'`]([^\\\"'`]*).*?,\"\n]\n```\n\n## Option 3: Customize the HTML\nOr you can customize the markup for extensions. The following example will make a custom bold extension that doesn’t render a `<strong>` tag, but a `<b>` tag:\n\n```js\nimport Bold from '@tiptap/extension-bold'\n\nconst CustomBold = Bold.extend({\n  renderHTML({ HTMLAttributes }) {\n    // Original:\n    // return ['strong', HTMLAttributes, 0]\n    return ['b', HTMLAttributes, 0]\n  },\n})\n\nnew Editor({\n  extensions: [\n    // …\n    CustomBold,\n  ],\n})\n```\n\nYou should put your custom extensions in separate files, but I think you got the idea.\n"
    },
    {
        "url": "./guide/prosemirror.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Accessing ProseMirror internals\n\nTiptap is built on top of ProseMirror, which has a pretty powerful API. To access it, we provide the package `@tiptap/pm`. This package provides all important ProseMirror packages like `prosemirror-state`, `prosemirror-view` or `prosemirror-model`. Using the package for custom development makes sure that you always have the same version of ProseMirror which is used by Tiptap as well. This way, we can make sure that Tiptap and all extensions are compatible with each other and prevent version clashes. Another plus is that you don't need to install all ProseMirror packages manually, especially if you are not using npm or any other package manager that supports automatic peer dependency resolution.\n\nInstallation:\n\n```bash\nnpm i @tiptap/pm\n```\n\nAfter that you can access all internal ProseMirror packages like this:\n\n```js\n// this example loads the EditorState class from the ProseMirror state package\nimport { EditorState } from '@tiptap/pm/state'\n```\n\nThe following packages are available:\n\n- `@tiptap/pm/changeset`\n- `@tiptap/pm/collab`\n- `@tiptap/pm/commands`\n- `@tiptap/pm/dropcursor`\n- `@tiptap/pm/gapcursor`\n- `@tiptap/pm/history`\n- `@tiptap/pm/inputrules`\n- `@tiptap/pm/keymap`\n- `@tiptap/pm/markdown`\n- `@tiptap/pm/menu`\n- `@tiptap/pm/model`\n- `@tiptap/pm/schema-basic`\n- `@tiptap/pm/schema-list`\n- `@tiptap/pm/state`\n- `@tiptap/pm/tables`\n- `@tiptap/pm/trailing-node`\n- `@tiptap/pm/transform`\n- `@tiptap/pm/view`\n\nYou can find out more about those libraries in the [ProseMirror documentation](https://prosemirror.net/docs/ref).\n"
    },
    {
        "url": "./guide/typescript.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Working with TypeScript\n\n## Introduction\nThe whole Tiptap codebase is written in TypeScript. If you haven’t heard of it or never used it, no worries. You don’t have to.\n\nTypeScript extends JavaScript by adding types (hence the name). It adds new syntax, which doesn’t exist in Vanilla JavaScript. It’s actually removed before running in the browser, but this step – the compilation – is important to find bugs early. It checks if you pass the right types of data to functions. For a big and complex project, that’s very valuable. It means we’ll get notified of lots of bugs, before shipping code to you.\n\n**Anyway, if you don’t use TypeScript in your project, that’s fine.** You will still be able to use Tiptap and nevertheless get a nice autocomplete for the Tiptap API (if your editor supports it, but most do).\n\nIf you are using TypeScript in your project and want to extend Tiptap, there are two types that are good to know about.\n\n## Types\n\n### Options types\nTo extend or create default options for an extension, you’ll need to define a custom type, here is an example:\n\n```ts\nimport { Extension } from '@tiptap/core'\n\nexport interface CustomExtensionOptions {\n  awesomeness: number,\n}\n\nconst CustomExtension = Extension.create<CustomExtensionOptions>({\n  addOptions() {\n    return {\n      awesomeness: 100,\n    }\n  },\n})\n```\n\n### Storage types\nTo add types for your extension storage, you’ll have to pass that as a second type parameter.\n\n```ts\nimport { Extension } from '@tiptap/core'\n\nexport interface CustomExtensionStorage {\n  awesomeness: number,\n}\n\nconst CustomExtension = Extension.create<{}, CustomExtensionStorage>({\n  name: 'customExtension',\n\n  addStorage() {\n    return {\n      awesomeness: 100,\n    }\n  },\n})\n```\n\nWhen using storage outside of the extension you have to manually set the type.\n\n```ts\nimport { CustomExtensionStorage } from './custom-extension'\n\nconst customStorage = editor.storage.customExtension as CustomExtensionStorage\n```\n\n### Command type\nThe core package also exports a `Command` type, which needs to be added to all commands that you specify in your code. Here is an example:\n\n```ts\nimport { Extension } from '@tiptap/core'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    customExtension: {\n      /**\n       * Comments will be added to the autocomplete.\n       */\n      yourCommand: (someProp: any) => ReturnType,\n    }\n  }\n}\n\nconst CustomExtension = Extension.create({\n  addCommands() {\n    return {\n      yourCommand: someProp => ({ commands }) => {\n        // …\n      },\n    }\n  },\n})\n```\n\nThat’s basically it. We’re doing all the rest automatically.\n"
    },
    {
        "url": "./guide/node-views/examples.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Examples\n\n## Introduction\nNode views enable you to fully customize your nodes. We are collecting a few different examples here. Feel free to copy them and start building on them.\n\nKeep in mind that those are just examples to get you started, not officially supported extensions. We don’t have tests for them, and don’t plan to maintain them with the same attention as we do with official extensions.\n\n## Drag handles\nDrag handles aren’t that easy to add. We are still on the lookout what’s the best way to add them. Official support will come at some point, but there’s no timeline yet.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/DragHandle\n\n## Table of contents\nThis one loops through the editor content, gives all headings an ID and renders a Table of Contents with Vue.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/TableOfContents\n\n## Drawing in the editor\nThe drawing example shows a SVG that enables you to draw inside the editor.\n\nhttps://embed.tiptap.dev/preview/Examples/Drawing\n\nIt’s not working very well with the Collaboration extension. It’s sending all data on every change, which can get pretty huge with Y.js. If you plan to use those two in combination, you need to improve it or your WebSocket backend will melt.\n"
    },
    {
        "url": "./guide/node-views/vue.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Node views with Vue\n\n## Introduction\nUsing Vanilla JavaScript can feel complex if you are used to work in Vue. Good news: You can use regular Vue components in your node views, too. There is just a little bit you need to know, but let’s go through this one by one.\n\n## Render a Vue component\nHere is what you need to do to render Vue components inside your editor:\n\n1. [Create a node extension](/guide/custom-extensions)\n2. Create a Vue component\n3. Pass that component to the provided `VueNodeViewRenderer`\n4. Register it with `addNodeView()`\n5. [Configure Tiptap to use your new node extension](/guide/configuration)\n\nThis is how your node extension could look like:\n\n```js\nimport { Node } from '@tiptap/core'\nimport { VueNodeViewRenderer } from '@tiptap/vue-2'\nimport Component from './Component.vue'\n\nexport default Node.create({\n  // configuration …\n\n  addNodeView() {\n    return VueNodeViewRenderer(Component)\n  },\n})\n```\n\nThere is a little bit of magic required to make this work. But don’t worry, we provide a wrapper component you can use to get started easily. Don’t forget to add it to your custom Vue component, like shown below:\n\n```html\n<template>\n  <node-view-wrapper>\n    Vue Component\n  </node-view-wrapper>\n</template>\n```\n\nGot it? Let’s see it in action. Feel free to copy the below example to get started.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/VueComponent\n\nThat component doesn’t interact with the editor, though. Time to wire it up.\n\n## Access node attributes\nThe `VueNodeViewRenderer` which you use in your node extension, passes a few very helpful props to your custom Vue component. One of them is the `node` prop. Add this snippet to your Vue component to directly access the node:\n\n```js\nprops: {\n  node: {\n    type: Object,\n    required: true,\n  },\n},\n```\n\nThat enables you to access node attributes in your Vue component. Let’s say you have [added an attribute](/guide/custom-extensions#attributes) named `count` to your node extension (like we did in the above example) you could access it like this:\n\n```js\nthis.node.attrs.count\n```\n\n## Update node attributes\nYou can even update node attributes from your node, with the help of the `updateAttributes` prop passed to your component. Just add this snippet to your component:\n\n```js\nprops: {\n  updateAttributes: {\n    type: Function,\n    required: true,\n  },\n},\n```\n\nPass an object with updated attributes to the function:\n\n```js\nthis.updateAttributes({\n  count: this.node.attrs.count + 1,\n})\n```\n\nAnd yes, all of that is reactive, too. A pretty seamless communication, isn’t it?\n\n## Adding a content editable\nThere is another component called `NodeViewContent` which helps you adding editable content to your node view. Here is an example:\n\n```html\n<template>\n  <node-view-wrapper class=\"dom\">\n    <node-view-content class=\"content-dom\" />\n  </node-view-wrapper>\n</template>\n\n<script>\nimport { NodeViewWrapper, NodeViewContent } from '@tiptap/vue-2'\n\nexport default {\n  components: {\n    NodeViewWrapper,\n    NodeViewContent,\n  },\n}\n</script>\n```\n\nYou don’t need to add those `class` attributes, feel free to remove them or pass other class names. Try it out in the following example:\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/VueComponentContent\n\nKeep in mind that this content is rendered by Tiptap. That means you need to tell what kind of content is allowed, for example with `content: 'inline*'` in your node extension (that’s what we use in the above example).\n\nThe `NodeViewWrapper` and `NodeViewContent` components render a `<div>` HTML tag (`<span>` for inline nodes), but you can change that. For example `<node-view-content as=\"p\">` should render a paragraph. One limitation though: That tag must not change during runtime.\n\n## All available props\nFor advanced use cases, we pass a few more props to the component.\n\n### editor\nThe editor instance.\n\n### node\nAccess the current node.\n\n### decorations\nAn array of decorations.\n\n### selected\n`true` when there is a `NodeSelection` at the current node view.\n\n### extension\nAccess to the node extension, for example to get options.\n\n### getPos()\nGet the document position of the current node.\n\n### updateAttributes()\nUpdate attributes of the current node.\n\n### deleteNode()\nDelete the current node.\n\nHere is the full list of what props you can expect:\n\n```html\n<template>\n  <node-view-wrapper />\n</template>\n\n<script>\nimport { NodeViewWrapper } from '@tiptap/vue-2'\n\nexport default {\n  components: {\n    NodeViewWrapper,\n  },\n\n  props: {\n    // the editor instance\n    editor: {\n      type: Object,\n    },\n\n    // the current node\n    node: {\n      type: Object,\n    },\n\n    // an array of decorations\n    decorations: {\n      type: Array,\n    },\n\n    // `true` when there is a `NodeSelection` at the current node view\n    selected: {\n      type: Boolean,\n    },\n\n    // access to the node extension, for example to get options\n    extension: {\n      type: Object,\n    },\n\n    // get the document position of the current node\n    getPos: {\n      type: Function,\n    },\n\n    // update attributes of the current node\n    updateAttributes: {\n      type: Function,\n    },\n\n    // delete the current node\n    deleteNode: {\n      type: Function,\n    },\n  },\n}\n</script>\n```\n\nIf you just want to have all (and TypeScript support) you can import all props:\n\n```js\n// Vue 3\nimport { defineComponent } from 'vue'\nimport { nodeViewProps } from '@tiptap/vue-3'\nexport default defineComponent({\n  props: nodeViewProps,\n})\n\n// Vue 2\nimport Vue from 'vue'\nimport { nodeViewProps } from '@tiptap/vue-2'\nexport default Vue.extend({\n  props: nodeViewProps,\n})\n```\n\n## Dragging\nTo make your node views draggable, set `draggable: true` in the extension and add `data-drag-handle` to the DOM element that should function as the drag handle.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/DragHandle\n"
    },
    {
        "url": "./guide/node-views/react.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Node views with React\n\n## Introduction\nUsing Vanilla JavaScript can feel complex if you are used to work in React. Good news: You can use regular React components in your node views, too. There is just a little bit you need to know, but let’s go through this one by one.\n\n## Render a React component\nHere is what you need to do to render React components inside your editor:\n\n1. [Create a node extension](/guide/custom-extensions)\n2. Create a React component\n3. Pass that component to the provided `ReactNodeViewRenderer`\n4. Register it with `addNodeView()`\n5. [Configure Tiptap to use your new node extension](/guide/configuration)\n\nThis is how your node extension could look like:\n\n```js\nimport { Node } from '@tiptap/core'\nimport { ReactNodeViewRenderer } from '@tiptap/react'\nimport Component from './Component.jsx'\n\nexport default Node.create({\n  // configuration …\n\n  addNodeView() {\n    return ReactNodeViewRenderer(Component)\n  },\n})\n```\n\nThere is a little bit of magic required to make this work. But don’t worry, we provide a wrapper component you can use to get started easily. Don’t forget to add it to your custom React component, like shown below:\n\n```html\n<NodeViewWrapper className=\"react-component\">\n  React Component\n</NodeViewWrapper>\n```\n\nGot it? Let’s see it in action. Feel free to copy the below example to get started.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/ReactComponent\n\nThat component doesn’t interact with the editor, though. Time to wire it up.\n\n## Access node attributes\n\nThe `ReactNodeViewRenderer` which you use in your node extension, passes a few very helpful props to your custom React component. One of them is the `node` prop. Let’s say you have [added an attribute](/guide/custom-extensions#attributes) named `count` to your node extension (like we did in the above example) you could access it like this:\n\n```js\nprops.node.attrs.count\n```\n\n## Update node attributes\nYou can even update node attributes from your node, with the help of the `updateAttributes` prop passed to your component. Pass an object with updated attributes to the `updateAttributes` prop:\n\n```js\nexport default props => {\n  const increase = () => {\n    props.updateAttributes({\n      count: props.node.attrs.count + 1,\n    })\n  }\n\n  // …\n}\n```\n\nAnd yes, all of that is reactive, too. A pretty seamless communication, isn’t it?\n\n## Adding a content editable\nThere is another component called `NodeViewContent` which helps you adding editable content to your node view. Here is an example:\n\n```jsx\nimport React from 'react'\nimport { NodeViewWrapper, NodeViewContent } from '@tiptap/react'\n\nexport default () => {\n  return (\n    <NodeViewWrapper className=\"react-component-with-content\">\n      <span className=\"label\" contentEditable={false}>React Component</span>\n\n      <NodeViewContent className=\"content\" />\n    </NodeViewWrapper>\n  )\n}\n```\n\nYou don’t need to add those `className` attributes, feel free to remove them or pass other class names. Try it out in the following example:\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/ReactComponentContent\n\nKeep in mind that this content is rendered by Tiptap. That means you need to tell what kind of content is allowed, for example with `content: 'inline*'` in your node extension (that’s what we use in the above example).\n\nThe `NodeViewWrapper` and `NodeViewContent` components render a `<div>` HTML tag (`<span>` for inline nodes), but you can change that. For example `<NodeViewContent as=\"p\">` should render a paragraph. One limitation though: That tag must not change during runtime.\n\n## Changing the default content tag for a node view\n\nBy default a node view rendered by `ReactNodeViewRenderer` will always have a wrapping `div` inside. If you want to change the type of this node, you can the `contentDOMElementTag` to the `ReactNodeViewRenderer` options:\n\n```js\n// this will turn the div into a header tag\nreturn ReactNodeViewRenderer(Component, { contentDOMElementTag: 'header' })\n```\n\n## Changing the wrapping DOM element\n\nTo change the wrapping DOM elements tag, you can use the `contentDOMElementTag` option on the `ReactNodeViewRenderer` function to change the default tag name.\n\n```js\nimport { Node } from '@tiptap/core'\nimport { ReactNodeViewRenderer } from '@tiptap/react'\nimport Component from './Component.jsx'\n\nexport default Node.create({\n  // configuration …\n\n  addNodeView() {\n    return ReactNodeViewRenderer(Component, { contentDOMElementTag: 'main' })\n  },\n})\n```\n\n## All available props\nHere is the full list of what props you can expect:\n\n### editor\nThe editor instance\n\n### node\nThe current node\n\n### decorations\nAn array of decorations\n\n### selected\n`true` when there is a `NodeSelection` at the current node view\n\n### extension\nAccess to the node extension, for example to get options\n\n### getPos()\nGet the document position of the current node\n\n### updateAttributes()\nUpdate attributes of the current node\n\n### deleteNode()\nDelete the current node\n\n## Dragging\nTo make your node views draggable, set `draggable: true` in the extension and add `data-drag-handle` to the DOM element that should function as the drag handle.\n\n<!-- https://embed.tiptap.dev/preview/GuideNodeViews/DragHandle -->\n"
    },
    {
        "url": "./guide/node-views/js.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Node views with JavaScript\n\n## Introduction\nUsing frameworks like Vue or React can feel too complex, if you’re used to work without those two. Good news: You can use Vanilla JavaScript in your node views. There is just a little bit you need to know, but let’s go through this one by one.\n\n## Render a node view with JavaScript\nHere is what you need to do to render a node view inside your editor:\n\n1. [Create a node extension](/guide/custom-extensions)\n2. Register a new node view with `addNodeView()`\n3. Write your render function\n4. [Configure Tiptap to use your new node extension](/guide/configuration)\n\nThis is how your node extension could look like:\n\n```js\nimport { Node } from '@tiptap/core'\n\nexport default Node.create({\n  // configuration …\n\n  addNodeView() {\n    return ({ editor, node, getPos, HTMLAttributes, decorations, extension }) => {\n      const dom = document.createElement('div')\n\n      dom.innerHTML = 'Hello, I’m a node view!'\n\n      return {\n        dom,\n      }\n    }\n  },\n})\n```\n\nGot it? Let’s see it in action. Feel free to copy the below example to get started.\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/JavaScript\n\nThat node view even interacts with the editor. Time to see how that is wired up.\n\n## Access node attributes\nThe editor passes a few helpful things to your render function. One of them is the `node` prop. This one enables you to access node attributes in your node view. Let’s say you have [added an attribute](/guide/custom-extensions#attributes) named `count` to your node extension. You could access the attribute like this:\n\n```js\naddNodeView() {\n  return ({ node }) => {\n    console.log(node.attrs.count)\n\n    // …\n  }\n}\n```\n\n\n## Update node attributes\nYou can even update node attributes from your node view, with the help of the `getPos` prop passed to your render function. Dispatch a new transaction with an object of the updated attributes:\n\n```js\naddNodeView() {\n  return ({ editor, node, getPos }) => {\n    const { view } = editor\n\n    // Create a button …\n    const button = document.createElement('button')\n    button.innerHTML = `This button has been clicked ${node.attrs.count} times.`\n\n    // … and when it’s clicked …\n    button.addEventListener('click', () => {\n      if (typeof getPos === 'function') {\n        // … dispatch a transaction, for the current position in the document …\n        view.dispatch(view.state.tr.setNodeMarkup(getPos(), undefined, {\n          count: node.attrs.count + 1,\n        }))\n\n        // … and set the focus back to the editor.\n        editor.commands.focus()\n      }\n    })\n\n    // …\n  }\n}\n```\n\nDoes seem a little bit too complex? Consider using [React](/guide/node-views/react) or [Vue](/guide/node-views/vue), if you have one of those in your project anyway. It get’s a little bit easier with those two.\n\n## Adding a content editable\nTo add editable content to your node view, you need to pass a `contentDOM`, a container element for the content. Here is a simplified version of a node view with non-editable and editable text content:\n\n```js\n// Create a container for the node view\nconst dom = document.createElement('div')\n\n// Give other elements containing text `contentEditable = false`\nconst label = document.createElement('span')\nlabel.innerHTML = 'Node view'\nlabel.contentEditable = false\n\n// Create a container for the content\nconst content = document.createElement('div')\n\n// Append all elements to the node view container\ndom.append(label, content)\n\nreturn {\n  // Pass the node view container …\n  dom,\n  // … and the content container:\n  contentDOM: content,\n}\n```\n\nGot it? You’re free to do anything you like, as long as you return a container for the node view and another one for the content. Here is the above example in action:\n\nhttps://embed.tiptap.dev/preview/GuideNodeViews/JavaScriptContent\n\nKeep in mind that this content is rendered by Tiptap. That means you need to tell what kind of content is allowed, for example with `content: 'inline*'` in your node extension (that’s what we use in the above example).\n"
    },
    {
        "url": "./experiments/details.md",
        "date": "2024-01-17",
        "contents": "# Details\n\n⚠️ Experiment\n\n## Issues\n* Nested lists cause trouble\n\nhttps://embed.tiptap.dev/preview/Experiments/Details\n"
    },
    {
        "url": "./experiments/commands.md",
        "date": "2024-01-17",
        "contents": "# Commands\n\n⚠️ Experiment\n\n## Issues\n* It’s fine to use, just don’t send bug reports, PRs or anything else. We’ll just need some time to publish that as an official extension.\n\nhttps://embed.tiptap.dev/preview/Experiments/Commands\n"
    },
    {
        "url": "./experiments/linter.md",
        "date": "2024-01-17",
        "contents": "# Linter\n\n⚠️ Experiment, currently not supported or maintained\n\nLinter can be used to check the content as per your wish and highlight it to the user. Linter extension can have multiple plugins for each task you want to achieve.\n\n## Issues\n* There is no decoration API in Tiptap, that’s why this is a lot of ProseMirror work. Before we’ll publish that example, we’d need to find a few ways to make it more Tiptap-like. For example, it would be great to use Vue/React components for the widget.\n\nhttps://embed.tiptap.dev/preview/Experiments/Linter\n"
    },
    {
        "url": "./experiments/embeds.md",
        "date": "2024-01-17",
        "contents": "# Embeds\n\n⚠️ Experiment\n\n## Issues\n* Oh man, building a really good iframe/embed extension will take some time. The best thing to speed up the development is to [sponsor our work](/sponsor) on GitHub.\n\nhttps://embed.tiptap.dev/preview/Experiments/Embeds\n"
    },
    {
        "url": "./experiments/trailing-node.md",
        "date": "2024-01-17",
        "contents": "# Trailing node\n\n⚠️ Experiment\n\n## Issues\n* This implementation adds an actual node. It’d be great to use a decoration for that use case, so the document isn’t modified.\n\nhttps://embed.tiptap.dev/preview/Experiments/TrailingNode\n"
    },
    {
        "url": "./experiments/figure.md",
        "date": "2024-01-17",
        "contents": "# Figure\n\n⚠️ Experiment\n\n## Related links\n* https://github.com/ueberdosis/tiptap/issues/573#issuecomment-730122427\n* https://discuss.prosemirror.net/t/figure-and-editable-caption/462/5\n\n## Issues\n* The current implementation works with images only.\n\nhttps://embed.tiptap.dev/preview/Experiments/Figure\n"
    },
    {
        "url": "./experiments/generic-figure.md",
        "date": "2024-01-17",
        "contents": "# GenericFigure\n\n⚠️ Experiment\n\nhttps://embed.tiptap.dev/preview/Experiments/GenericFigure\n"
    },
    {
        "url": "./experiments/multiple-editors.md",
        "date": "2024-01-17",
        "contents": "# Multiple editors\n\nThe following example has three different instances of Tiptap. The first is configured to have a single paragraph of text, the second to have a task list and the third to have text. All of them are stored in a single Y.js document, which can be synced in real-time with other users.\n\nhttps://embed.tiptap.dev/preview/Experiments/MultipleEditors\n"
    },
    {
        "url": "./installation/cdn.md",
        "date": "2024-01-17",
        "contents": "# CDN\n\nFor testing purposes or demos, use our [esm.sh](https://esm.sh/) CDN builds. Here are the few lines of code you need to get started:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n</head>\n<body>\n  <div class=\"element\"></div>\n  <script type=\"module\">\n    import { Editor } from 'https://esm.sh/@tiptap/core'\n    import StarterKit from 'https://esm.sh/@tiptap/starter-kit'\n    const editor = new Editor({\n      element: document.querySelector('.element'),\n      extensions: [\n        StarterKit,\n      ],\n      content: '<p>Hello World!</p>',\n    })\n  </script>\n</body>\n</html>\n```\n\n\n---\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n\n"
    },
    {
        "url": "./installation/svelte.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Svelte WYSIWYG\ntableOfContents: true\n---\n\n# Svelte\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [SvelteKit](https://kit.svelte.dev/) project.\n\n## Take a shortcut: Svelte REPL with Tiptap\nIf you just want to jump into it right-away, here is a [Svelte REPL with Tiptap](https://svelte.dev/repl/798f1b81b9184780aca18d9a005487d2?version=3.31.2) installed.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* Experience with [Svelte](https://svelte.dev/docs#getting-started)\n\n## 1. Create a project (optional)\nIf you already have an existing SvelteKit project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a fresh SvelteKit project called `my-tiptap-project`. The following commands set up everything we need. It asks a lot of questions, but just use what floats your boat or use the defaults.\n\n```bash\nnpm create svelte@latest my-tiptap-project\ncd my-tiptap-project\nnpm install\nnpm run dev\n```\n\n## 2. Install the dependencies\nOkay, enough of the boring boilerplate work. Let’s finally install Tiptap! For the following example you’ll need the `@tiptap/core` package, with a few components, `@tiptap/pm` and `@tiptap/starter-kit`, which includes the most common extensions to get started quickly.\n\n```bash\nnpm install @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run dev`, and open [http://localhost:3000/](http://localhost:3000/) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Create a new component\nTo actually start using Tiptap, you’ll need to add a new component to your app. Let’s call it `Tiptap` and put the following example code in `src/lib/Tiptap.svelte`.\n\nThis is the fastest way to get Tiptap up and running with SvelteKit. It will give you a very basic version of Tiptap, without any buttons. No worries, you will be able to add more functionality soon.\n\n```html\n<script>\n  import { onMount, onDestroy } from 'svelte'\n  import { Editor } from '@tiptap/core'\n  import StarterKit from '@tiptap/starter-kit'\n\n  let element\n  let editor\n\n  onMount(() => {\n    editor = new Editor({\n      element: element,\n      extensions: [\n        StarterKit,\n      ],\n      content: '<p>Hello World! 🌍️ </p>',\n      onTransaction: () => {\n        // force re-render so `editor.isActive` works as expected\n        editor = editor\n      },\n    })\n  })\n\n  onDestroy(() => {\n    if (editor) {\n      editor.destroy()\n    }\n  })\n</script>\n\n{#if editor}\n  <button\n    on:click={() => editor.chain().focus().toggleHeading({ level: 1}).run()}\n    class:active={editor.isActive('heading', { level: 1 })}\n  >\n    H1\n  </button>\n  <button\n    on:click={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n    class:active={editor.isActive('heading', { level: 2 })}\n  >\n    H2\n  </button>\n  <button on:click={() => editor.chain().focus().setParagraph().run()} class:active={editor.isActive('paragraph')}>\n    P\n  </button>\n{/if}\n\n<div bind:this={element} />\n\n<style>\n  button.active {\n    background: black;\n    color: white;\n  }\n</style>\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of `src/routes/+page.svelte` with the following example code to use our new `Tiptap` component in our app.\n\n```html\n<script>\n  import Tiptap from '$lib/Tiptap.svelte'\n</script>\n\n<main>\n  <Tiptap />\n</main>\n```\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n"
    },
    {
        "url": "./installation/vanilla-javascript.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Vanilla JavaScript WYSIWYG\ntableOfContents: true\n---\n\n# Vanilla JavaScript\n\n**Note**<br />\nIf you don't use a bundler like Webpack or Rollup, please read the [CDN](/installation/cdn) guide instead. Since Tiptap is built in a modular way you will be required to use `<script type=\"module\">` in your HTML to get our CDN imports working.\n\n## Introduction\nYou are using plain JavaScript or a framework that is not listed here? No worries, we provide everything you need.\n\n## 1. Install the dependencies\nFor the following example you will need `@tiptap/core` (the actual editor), `@tiptap/pm` (the ProseMirror library) and `@tiptap/starter-kit`. The StarterKit doesn’t include all, but the most common extensions.\n\n```bash\nnpm install @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\n## 2. Add some markup\nAdd the following HTML where you want the editor to be mounted:\n\n```html\n<div class=\"element\"></div>\n```\n\n## 3. Initialize the editor\nEverything is in place now, so let’s set up the actual editor now. Add the following code to your JavaScript:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    StarterKit,\n  ],\n  content: '<p>Hello World!</p>',\n})\n```\n\nOpen your project in the browser to see Tiptap in action. Good work!\n"
    },
    {
        "url": "./installation/alpine.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Alpine WYSIWYG\ntableOfContents: true\n---\n\n# Alpine.js\n\n## Introduction\nThe following guide describes how to integrate Tiptap with version 3 of [Alpine.js](https://github.com/alpinejs/alpine).\n\nFor the sake of this guide we’ll use [Vite](https://vitejs.dev/) to quickly set up a project, but you can use whatever you’re used to. Vite is just really fast and we love it.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* Experience with [Alpine.js](https://github.com/alpinejs/alpine)\n\n## 1. Create a project (optional)\nIf you already have an existing Alpine.js project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a fresh [Vite](https://vitejs.dev/) project called `my-tiptap-project`. Vite sets up everything we need, just select the Vanilla JavaScript template.\n\n```bash\nnpm init vite@latest my-tiptap-project -- --template vanilla\ncd my-tiptap-project\nnpm install\nnpm run dev\n```\n\n## 2. Install the dependencies\n\nOkay, enough of the boring boilerplate work. Let’s finally install Tiptap! For the following example you’ll need `alpinejs`, the `@tiptap/core` package, the `@tiptap/pm` package and the `@tiptap/starter-kit`, which includes the most common extensions to get started quickly.\n\n```bash\nnpm install alpinejs @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1, you can now start your project with `npm run dev`, and open [http://localhost:5173](http://localhost:5173) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Initialize the editor\nTo actually start using Tiptap, you’ll need to write a little bit of JavaScript. Let’s put the following example code in a file called `main.js`.\n\nThis is the fastest way to get Tiptap up and running with Alpine.js. It will give you a very basic version of Tiptap. No worries, you will be able to add more functionality soon.\n\n```js\nimport Alpine from 'alpinejs'\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\ndocument.addEventListener('alpine:init', () => {\n  Alpine.data('editor', (content) => {\n    let editor // Alpine's reactive engine automatically wraps component properties in proxy objects. Attempting to use a proxied editor instance to apply a transaction will cause a \"Range Error: Applying a mismatched transaction\", so be sure to unwrap it using Alpine.raw(), or simply avoid storing your editor as a component property, as shown in this example.\n\n    return {\n      updatedAt: Date.now(), // force Alpine to rerender on selection change\n      init() {\n        const _this = this\n\n        editor = new Editor({\n          element: this.$refs.element,\n          extensions: [\n            StarterKit\n          ],\n          content: content,\n          onCreate({ editor }) {\n            _this.updatedAt = Date.now()\n          },\n          onUpdate({ editor }) {\n            _this.updatedAt = Date.now()\n          },\n          onSelectionUpdate({ editor }) {\n            _this.updatedAt = Date.now()\n          }\n        })\n      },\n      isLoaded() {\n        return editor\n      },\n      isActive(type, opts = {}) {\n        return editor.isActive(type, opts)\n      },\n      toggleHeading(opts) {\n        editor.chain().toggleHeading(opts).focus().run()\n      },\n      toggleBold() {\n        editor.chain().toggleBold().focus().run()\n      },\n      toggleItalic() {\n        editor.chain().toggleItalic().focus().run()\n      },\n    }\n  })\n})\n\nwindow.Alpine = Alpine\nAlpine.start()\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of the `index.html` with the following example code to use the editor in our app.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n</head>\n<body>\n  <div x-data=\"editor('<p>Hello world! :-)</p>')\">\n\n    <template x-if=\"isLoaded()\">\n      <div class=\"menu\">\n        <button\n          @click=\"toggleHeading({ level: 1 })\"\n          :class=\"{ 'is-active': isActive('heading', { level: 1 }, updatedAt) }\"\n        >\n          H1\n        </button>\n        <button\n          @click=\"toggleBold()\"\n          :class=\"{ 'is-active' : isActive('bold', updatedAt) }\"\n        >\n          Bold\n        </button>\n        <button\n          @click=\"toggleItalic()\"\n          :class=\"{ 'is-active' : isActive('italic', updatedAt) }\"\n        >\n          Italic\n        </button>\n      </div>\n    </template>\n\n    <div x-ref=\"element\"></div>\n  </div>\n\n  <script type=\"module\" src=\"/main.js\"></script>\n\n  <style>\n    body { margin: 2rem; font-family: sans-serif; }\n    button.is-active { background: black; color: white; }\n    .tiptap { padding: 0.5rem 1rem; margin: 1rem 0; border: 1px solid #ccc; }\n  </style>\n</body>\n</html>\n```\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n"
    },
    {
        "url": "./installation/nextjs.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Next.js WYSIWYG\ntableOfContents: true\n---\n\n# Next.js\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [Next.js](https://nextjs.org/) project.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* Experience with [React](https://reactjs.org/)\n\n## 1. Create a project (optional)\nIf you already have an existing Next.js project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a new Next.js project called `my-tiptap-project`. The following command sets up everything we need to get started.\n```bash\n# create a project\nnpx create-next-app my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n## 2. Install the dependencies\nNow that we have a standard boilerplate set up we can get started on getting Tiptap up and running! For this we will need to install three packages: `@tiptap/react`, `@tiptap/pm` and `@tiptap/starter-kit` which includes all the extensions you need to get started quickly.\n\n```bash\nnpm install @tiptap/react @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run dev`, and open [http://localhost:3000/](http://localhost:3000/) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Create a new component\nTo actually start using Tiptap, you’ll need to add a new component to your app. To do this, first create a directory called `components/`. Now it's time to create our component which we'll call `Tiptap`. To do this put the following example code in `components/Tiptap.js`.\n\n```jsx\n'use client'\n\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst Tiptap = () => {\n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n    ],\n    content: '<p>Hello World! 🌎️</p>',\n  })\n\n  return (\n    <EditorContent editor={editor} />\n  )\n}\n\nexport default Tiptap\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of `pages/index.js` with the following example code to use our new `Tiptap` component in our app.\n\n```jsx\nimport Tiptap from '../components/Tiptap'\n\nexport default function Home() {\n    return (\n         <Tiptap />\n    )\n}\n```\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n"
    },
    {
        "url": "./installation/php.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: PHP WYSIWYG\ntableOfContents: true\n---\n# PHP\n\n## Introduction\nYou can use Tiptap with Laravel, Livewire, Inertia.js, [Alpine.js](/installation/alpine), [Tailwind CSS](/guide/styling#with-tailwind-css), and even - yes you read that right - inside PHP.\n\n## Tiptap for PHP\nWe provide [an official PHP package to work with Tiptap content](/api/utilities/tiptap-php). You can transform Tiptap-compatible JSON to HTML, and the other way around, sanitize your content, or just modify it.\n\n## Laravel Livewire\n\n### my-livewire-component.blade.php\n```html\n<!--\n  In your livewire component you could add an\n  autosave method to handle saving the content\n  from the editor every 10 seconds if you wanted\n-->\n<x-editor\n  wire:model=\"foo\"\n  wire:poll.10000ms=\"autosave\"\n></x-editor>\n```\n\n### editor.blade.php\n```html\n<div\n  x-data=\"setupEditor(\n    $wire.entangle('{{ $attributes->wire('model')->value() }}').defer\n  )\"\n  x-init=\"() => init($refs.editor)\"\n  wire:ignore\n  {{ $attributes->whereDoesntStartWith('wire:model') }}\n>\n  <div x-ref=\"editor\"></div>\n</div>\n```\n\n### index.js\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nwindow.setupEditor = function (content) {\n  let editor\n\n  return {\n    content: content,\n\n    init(element) {\n      editor = new Editor({\n        element: element,\n        extensions: [\n          StarterKit,\n        ],\n        content: this.content,\n        onUpdate: ({ editor }) => {\n          this.content = editor.getHTML()\n        }\n      })\n\n      this.$watch('content', (content) => {\n        // If the new content matches TipTap's then we just skip.\n        if (content === editor.getHTML()) return\n\n        /*\n          Otherwise, it means that a force external to TipTap\n          is modifying the data on this Alpine component,\n          which could be Livewire itself.\n          In this case, we just need to update TipTap's\n          content and we're good to do.\n          For more information on the `setContent()` method, see:\n            https://www.tiptap.dev/api/commands/set-content\n        */\n        editor.commands.setContent(content, false)\n      })\n    }\n  }\n}\n```\n"
    },
    {
        "url": "./installation/codesandbox.md",
        "date": "2024-01-17",
        "contents": "# CodeSandbox\nCodeSandbox is an online coding environment. It’s great to fiddle around without setting up a local project. You can also use it to share your code and collaborate with others.\n\n<iframe\n  src=\"https://codesandbox.io/embed/tiptap-vue-3-issue-template-9bqq0z?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"tiptap-issue-template\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n## Issue template\nIt’s also amazing for bug reports. Try to recreate a bug there and share it with us before you [file an issue on GitHub](https://github.com/ueberdosis/tiptap/issues/new/choose).\n\nThat helps us to reproduce the bug easily, and release a fix faster.\n"
    },
    {
        "url": "./installation/react.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: React WYSIWYG\ntableOfContents: true\n---\n\n# React\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [React](https://reactjs.org/) project. We’re using [Create React App](https://reactjs.org/docs/getting-started.html) here, but the workflow should be similar with other setups.\n\n## Create React App\n\n### Quickstart\nIf you just want to get up and running with Tiptap you can use the [Tiptap Create React App template by @alb](https://github.com/alb/cra-template-tiptap) to create a new project with all the steps listed below completed already.\n\n```bash\nnpx create-react-app my-tiptap-project --template tiptap\n```\n\n#### 1. Create a project (optional)\nLet’s start with a fresh React project called `my-tiptap-project`. [Create React App](https://reactjs.org/docs/getting-started.html) will set up everything we need.\n\n```bash\n# create a project with npm\nnpx create-react-app my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n#### 2. Install the dependencies\nTime to install the `@tiptap/react` package, `@tiptap/pm` (the ProseMirror library) and `@tiptap/starter-kit`, which includes the most popular extensions to get started quickly.\n\n```bash\nnpm install @tiptap/react @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run start`, and open [http://localhost:3000](http://localhost:3000) in your browser.\n\n#### 3. Create a new component\nTo actually start using Tiptap we need to create a new component. Let’s call it `Tiptap` and put the following example code in `src/Tiptap.jsx`.\n\n```jsx\n// src/Tiptap.jsx\nimport { EditorProvider, FloatingMenu, BubbleMenu } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\n// define your extension array\nconst extensions = [\n  StarterKit,\n]\n\nconst content = '<p>Hello World!</p>'\n\nconst Tiptap = () => {\n  return (\n    <EditorProvider extensions={extensions} content={content}>\n      <FloatingMenu>This is the floating menu</FloatingMenu>\n      <BubbleMenu>This is the bubble menu</BubbleMenu>\n    </EditorProvider>\n  )\n}\n\nexport default Tiptap\n```\n\n**Important Note**: You can always use the `useEditor` hook if you want to avoid using the Editor context.\n\n```jsx\n// src/Tiptap.jsx\nimport { useEditor, EditorContent, FloatingMenu, BubbleMenu } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\n// define your extension array\nconst extensions = [\n  StarterKit,\n]\n\nconst content = '<p>Hello World!</p>'\n\nconst Tiptap = () => {\n  const editor = useEditor({\n    extensions,\n    content,\n  })\n\n  return (\n    <>\n      <EditorContent editor={editor} />\n      <FloatingMenu editor={editor}>This is the floating menu</FloatingMenu>\n      <BubbleMenu editor={editor}>This is the bubble menu</BubbleMenu>\n    </>\n  )\n}\n\nexport default Tiptap\n```\n\n#### 4. Add it to your app\nFinally, replace the content of `src/App.js` with our new `Tiptap` component.\n\n```jsx\nimport Tiptap from './Tiptap.jsx'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tiptap />\n    </div>\n  )\n}\n\nexport default App\n```\n\n#### 5. Consume the Editor context in child components\n\nIf you use the `EditorProvider` to setup your Tiptap editor, you can now easily access your editor instance from any child component using the `useCurrentEditor` hook.\n\n```jsx\nimport { useCurrentEditor } from '@tiptap/react'\n\nconst EditorJSONPreview = () => {\n  const { editor } = useCurrentEditor()\n\n  return (\n    <pre>\n      {JSON.stringify(editor.getJSON(), null, 2)}\n    </pre>\n  )\n}\n```\n\n**Important**: This won't work if you use the `useEditor` hook to setup your editor.\n\nYou should now see a pretty barebones example of Tiptap in your browser.\n\n#### 6. Add before or after slots\nSince the EditorContent component is rendered by the `EditorProvider` component, we now can't directly define where to render before or after content of our editor. For that we can use the `slotBefore` & `slotAfter` props on the `EditorProvider` component.\n\n```jsx\n<EditorProvider\n  extensions={extensions}\n  content={content}\n  slotBefore={<MyEditorToolbar />}\n  slotAfter={<MyEditorFooter />}\n/>\n```\n\n#### 7. The complete setup (optional)\nReady to add more? Below is a demo that shows how you could set up a basic toolbar. Feel free to take it and start customizing it to your needs:\n\nhttps://embed.tiptap.dev/preview/Examples/Default\n"
    },
    {
        "url": "./installation/vue2.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Vue.js 2 WYSIWYG\ntableOfContents: true\n---\n\n# Vue.js 2\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [Vue](https://vuejs.org/) CLI project.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* [Vue CLI](https://cli.vuejs.org/) installed on your machine\n* Experience with [Vue](https://vuejs.org/v2/guide/#Getting-Started)\n\n## 1. Create a project (optional)\nIf you already have an existing Vue project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a fresh Vue project called `my-tiptap-project`. The Vue CLI sets up everything we need, just select the default Vue 2 template.\n\n```bash\n# create a project\nvue create my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n## 2. Install the dependencies\nOkay, enough of the boring boilerplate work. Let’s finally install Tiptap! For the following example you’ll need the `@tiptap/vue-2` package, `@tiptap/pm` (the ProseMirror library) and `@tiptap/starter-kit`, which includes the most common extensions to get started quickly.\n\n```bash\nnpm install @tiptap/vue-2 @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run dev`, and open [http://localhost:8080](http://localhost:8080) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Create a new component\nTo actually start using Tiptap, you’ll need to add a new component to your app. Let’s call it `Tiptap` and put the following example code in `components/Tiptap.vue`.\n\nThis is the fastest way to get Tiptap up and running with Vue. It will give you a very basic version of Tiptap, without any buttons. No worries, you will be able to add more functionality soon.\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  data() {\n    return {\n      editor: null,\n    }\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      content: '<p>I’m running Tiptap with Vue.js. 🎉</p>',\n      extensions: [\n        StarterKit,\n      ],\n    })\n  },\n\n  beforeDestroy() {\n    this.editor.destroy()\n  },\n}\n</script>\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of `src/App.vue` with the following example code to use our new `Tiptap` component in our app.\n\n```html\n<template>\n  <div id=\"app\">\n    <tiptap />\n  </div>\n</template>\n\n<script>\nimport Tiptap from './components/Tiptap.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Tiptap\n  }\n}\n</script>\n```\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n\n## 5. Use v-model (optional)\nYou’re probably used to bind your data with `v-model` in forms, that’s also possible with Tiptap. Here is a working example component, that you can integrate in your project:\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  props: {\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n\n  data() {\n    return {\n      editor: null,\n    }\n  },\n\n  watch: {\n    value(value) {\n      // HTML\n      const isSame = this.editor.getHTML() === value\n\n      // JSON\n      // const isSame = JSON.stringify(this.editor.getJSON()) === JSON.stringify(value)\n\n      if (isSame) {\n        return\n      }\n\n      this.editor.commands.setContent(value, false)\n    },\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      content: this.value,\n      extensions: [\n        StarterKit,\n      ],\n      onUpdate: () => {\n        // HTML\n        this.$emit('input', this.editor.getHTML())\n\n        // JSON\n        // this.$emit('input', this.editor.getJSON())\n      },\n    })\n  },\n\n  beforeDestroy() {\n    this.editor.destroy()\n  },\n}\n</script>\n```\n"
    },
    {
        "url": "./installation/vue3.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Vue.js 3 WYSIWYG\ntableOfContents: true\n---\n\n# Vue.js 3\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [Vue](https://vuejs.org/) CLI project.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* [Vue CLI](https://cli.vuejs.org/) installed on your machine\n* Experience with [Vue](https://v3.vuejs.org/guide/introduction.html)\n\n## 1. Create a project (optional)\nIf you already have an existing Vue project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a fresh Vue project called `my-tiptap-project`. The Vue CLI sets up everything we need, just select the Vue 3 template.\n\n```bash\n# create a project\nvue create my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n## 2. Install the dependencies\nOkay, enough of the boring boilerplate work. Let’s finally install Tiptap! For the following example you’ll need the `@tiptap/vue-3` package, `@tiptap/pm` (the ProseMirror library) and `@tiptap/starter-kit`, which includes the most common extensions to get started quickly.\n\n```bash\nnpm install @tiptap/vue-3 @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run dev`, and open [http://localhost:8080](http://localhost:8080) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Create a new component\nTo actually start using Tiptap, you’ll need to add a new component to your app. Let’s call it `Tiptap` and put the following example code in `components/Tiptap.vue`.\n\nThis is the fastest way to get Tiptap up and running with Vue. It will give you a very basic version of Tiptap, without any buttons. No worries, you will be able to add more functionality soon.\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-3'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  data() {\n    return {\n      editor: null,\n    }\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      content: '<p>I’m running Tiptap with Vue.js. 🎉</p>',\n      extensions: [\n        StarterKit,\n      ],\n    })\n  },\n\n  beforeUnmount() {\n    this.editor.destroy()\n  },\n}\n</script>\n```\n\nAlternatively, you can use the Composition API with the `useEditor` method.\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { useEditor, EditorContent } from '@tiptap/vue-3'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  setup() {\n    const editor = useEditor({\n      content: '<p>I’m running Tiptap with Vue.js. 🎉</p>',\n      extensions: [\n        StarterKit,\n      ],\n    })\n\n    return { editor }\n  },\n}\n</script>\n```\n\nOr feel free to use the new [`<script setup>` syntax](https://v3.vuejs.org/api/sfc-script-setup.html).\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script setup>\nimport { useEditor, EditorContent } from '@tiptap/vue-3'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst editor = useEditor({\n  content: '<p>I’m running Tiptap with Vue.js. 🎉</p>',\n  extensions: [\n    StarterKit,\n  ],\n})\n</script>\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of `src/App.vue` with the following example code to use our new `Tiptap` component in our app.\n\n```html\n<template>\n  <div id=\"app\">\n    <tiptap />\n  </div>\n</template>\n\n<script>\nimport Tiptap from './components/Tiptap.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Tiptap\n  }\n}\n</script>\n```\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n\n## 5. Use v-model (optional)\nYou’re probably used to binding your data with `v-model` in forms, that’s also possible with Tiptap. Here is how that would work with Tiptap:\n\nhttps://embed.tiptap.dev/preview/GuideGettingStarted/VModel\n"
    },
    {
        "url": "./installation/nuxt.md",
        "date": "2024-01-17",
        "contents": "---\ntitle: Nuxt.js WYSIWYG\ntableOfContents: true\n---\n\n# Nuxt.js\n\n## Introduction\nThe following guide describes how to integrate Tiptap with your [Nuxt.js](https://nuxtjs.org/) project.\n\n## Requirements\n* [Node](https://nodejs.org/en/download/) installed on your machine\n* Experience with [Vue](https://vuejs.org/v2/guide/#Getting-Started)\n\n## 1. Create a project (optional)\nIf you already have an existing Vue project, that’s fine too. Just skip this step and proceed with the next step.\n\nFor the sake of this guide, let’s start with a fresh Nuxt.js project called `my-tiptap-project`. The following command sets up everything we need. It asks a lot of questions, but just use what floats your boat or use the defaults.\n\n```bash\n# create a project\nnpm init nuxt-app my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n## 2. Install the dependencies\nOkay, enough of the boring boilerplate work. Let’s finally install Tiptap! For the following example you’ll need the `@tiptap/vue-2` package with a few components, the `@tiptap/pm` package, and `@tiptap/starter-kit` which has the most common extensions to get started quickly.\n\n```bash\nnpm install @tiptap/vue-2 @tiptap/pm @tiptap/starter-kit\n```\n\nIf you followed step 1 and 2, you can now start your project with `npm run dev`, and open [http://localhost:8080/](http://localhost:8080/) in your favorite browser. This might be different, if you’re working with an existing project.\n\n## 3. Create a new component\nTo actually start using Tiptap, you’ll need to add a new component to your app. Let’s call it `TiptapEditor` and put the following example code in `components/TiptapEditor.vue`.\n\nThis is the fastest way to get Tiptap up and running with Vue. It will give you a very basic version of Tiptap, without any buttons. No worries, you will be able to add more functionality soon.\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  data() {\n    return {\n      editor: null,\n    }\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      content: '<p>I’m running Tiptap with Vue.js. 🎉</p>',\n      extensions: [\n        StarterKit,\n      ],\n    })\n  },\n\n  beforeDestroy() {\n    this.editor.destroy()\n  },\n}\n</script>\n```\n\n## 4. Add it to your app\nNow, let’s replace the content of `pages/index.vue` with the following example code to use our new `TiptapEditor` component in our app.\n\n```html\n<template>\n  <div>\n    <client-only>\n      <tiptap-editor />\n    </client-only>\n  </div>\n</template>\n<script>\nimport TiptapEditor from '~/components/TiptapEditor.vue'\nexport default {\n  components: {\n    TiptapEditor\n  }\n}\n</script>\n```\n\nNote that Tiptap needs to run in the client, not on the server. It’s required to wrap the editor in a `<client-only>` tag. [Read more about client-only components.](https://nuxtjs.org/api/components-client-only)\n\nYou should now see Tiptap in your browser. Time to give yourself a pat on the back! :)\n\n## 5. Use v-model (optional)\nYou’re probably used to bind your data with `v-model` in forms, that’s also possible with Tiptap. Here is a working example component, that you can integrate in your project:\n\nhttps://embed.tiptap.dev/preview/GuideGettingStarted/VModel\n\n```html\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport StarterKit from '@tiptap/starter-kit'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  props: {\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n\n  data() {\n    return {\n      editor: null,\n    }\n  },\n\n  watch: {\n    value(value) {\n      // HTML\n      const isSame = this.editor.getHTML() === value\n\n      // JSON\n      // const isSame = JSON.stringify(this.editor.getJSON()) === JSON.stringify(value)\n\n      if (isSame) {\n        return\n      }\n\n      this.editor.commands.setContent(value, false)\n    },\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      content: this.value,\n      extensions: [\n        StarterKit,\n      ],\n      onUpdate: () => {\n        // HTML\n        this.$emit('input', this.editor.getHTML())\n\n        // JSON\n        // this.$emit('input', this.editor.getJSON())\n      },\n    })\n  },\n\n  beforeDestroy() {\n    this.editor.destroy()\n  },\n}\n</script>\n```\n"
    },
    {
        "url": "./examples/images.md",
        "date": "2024-01-17",
        "contents": "# Images\n\n:::pro What about …\nWe’d love to build more features related to images: Resizeable images, images with a caption, floating images … But that takes time.\n\nThough thousands of developers use Tiptap every day, it’s still not our full-time job. We’d like to change that. Are you able to help us reach our goal?\n\n[Become a sponsor on GitHub →](https://github.com/sponsors/ueberdosis)\n:::\n\nhttps://embed.tiptap.dev/preview/Examples/Images\n"
    },
    {
        "url": "./examples/tables.md",
        "date": "2024-01-17",
        "contents": "# Tables\n\nhttps://embed.tiptap.dev/preview/Examples/Tables\n"
    },
    {
        "url": "./examples/book.md",
        "date": "2024-01-17",
        "contents": "# Long texts\n\nThis demo has more than 200,000 words, check the performance yourself.\n\nhttps://embed.tiptap.dev/preview/Examples/Book\n"
    },
    {
        "url": "./examples/minimal.md",
        "date": "2024-01-17",
        "contents": "# Minimal setup\n\nhttps://embed.tiptap.dev/preview/Examples/Minimal\n\n"
    },
    {
        "url": "./examples/default.md",
        "date": "2024-01-17",
        "contents": "# Default text editor\nDid we mention that you have full control over the rendering of the editor? Here is a barebones example without any styling, but packed with a whole set of common extensions.\n\nhttps://embed.tiptap.dev/preview/Examples/Default\n"
    },
    {
        "url": "./examples/menus.md",
        "date": "2024-01-17",
        "contents": "# Menus\n\nhttps://embed.tiptap.dev/preview/Examples/Menus\n"
    },
    {
        "url": "./examples/custom-document.md",
        "date": "2024-01-17",
        "contents": "# Custom Document\n\nhttps://embed.tiptap.dev/preview/Examples/CustomDocument\n"
    },
    {
        "url": "./examples/interactivity.md",
        "date": "2024-01-17",
        "contents": "# Interactivity\n\nThanks to [node views](/guide/node-views) you can add interactivity to your nodes. If you can write it in JavaScript, you can add it to the editor.\n\nhttps://embed.tiptap.dev/preview/Examples/InteractivityComponent\n\nhttps://embed.tiptap.dev/preview/Examples/InteractivityComponentContent\n"
    },
    {
        "url": "./examples/savvy.md",
        "date": "2024-01-17",
        "contents": "# A clever editor\n\nhttps://embed.tiptap.dev/preview/Examples/Savvy\n"
    },
    {
        "url": "./examples/tasks.md",
        "date": "2024-01-17",
        "contents": "# Tasks\n\nhttps://embed.tiptap.dev/preview/Examples/Tasks\n"
    },
    {
        "url": "./examples/collaborative-editing.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Collaborative editing\n\n## Introduction\nThis example shows how you can use Tiptap to let multiple users collaborate in the same document in real-time.\n\nIt connects all clients to a WebSocket server and merges changes to the document with the power of [Y.js](https://github.com/yjs/yjs). If you want to learn more about collaborative text editing, check out [our guide on collaborative editing](/guide/collaborative-editing).\n\n## Example\n:::warning Shared Document\nBe nice! The content of this editor is shared with other users from the Internet.\n:::\n\nhttps://embed.tiptap.dev/preview/Examples/CollaborativeEditing\n\n## Backend\nIn case you’re wondering what kind of sorcery you need on the server to achieve this, here is the whole backend code for the demo:\n\n```js\nimport { Server } from '@hocuspocus/server'\n\nconst server = Server.configure({\n  port: 80,\n})\n\nserver.listen()\n```\n"
    },
    {
        "url": "./examples/suggestions.md",
        "date": "2024-01-17",
        "contents": "# Mentions\n\nhttps://embed.tiptap.dev/preview/Examples/Community\n"
    },
    {
        "url": "./examples/markdown-shortcuts.md",
        "date": "2024-01-17",
        "contents": "# Markdown shortcuts\n\nhttps://embed.tiptap.dev/preview/Examples/MarkdownShortcuts\n"
    },
    {
        "url": "./examples/formatting.md",
        "date": "2024-01-17",
        "contents": "# Formatting\n\nhttps://embed.tiptap.dev/preview/Examples/Formatting\n"
    },
    {
        "url": "./examples/drawing.md",
        "date": "2024-01-17",
        "contents": "# Drawing\nDid you ever want to draw in a text editor? Me neither. Anyway, here is an example how that could work with Tiptap. If you want to build something like that, [learn more about node views](/guide/node-views).\n\nhttps://embed.tiptap.dev/preview/Examples/Drawing\n"
    },
    {
        "url": "./examples/syntax-highlighting.md",
        "date": "2024-01-17",
        "contents": "# Syntax highlighting\n\nhttps://embed.tiptap.dev/preview/Examples/CodeBlockLanguage\n"
    },
    {
        "url": "./api/marks.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Marks\n\n## Introduction\nOne or multiple marks can be applied to [nodes](/api/nodes), for example to add inline formatting like bold and italic, or other additional information.\n\n## List of supported marks\n| Title                                 | StarterKit ([view](/api/extensions/starter-kit)) | Source Code                                                                              |\n| ------------------------------------- | ------------------------------------------------ | ---------------------------------------------------------------------------------------- |\n| [Bold](/api/marks/bold)               | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bold/)        |\n| [Code](/api/marks/code)               | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-code/)        |\n| [Highlight](/api/marks/highlight)     | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-highlight/)   |\n| [Italic](/api/marks/italic)           | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-italic/)      |\n| [Link](/api/marks/link)               | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-link/)        |\n| [Strike](/api/marks/strike)           | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-strike/)      |\n| [Subscript](/api/marks/subscript)     | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-subscript/)   |\n| [Superscript](/api/marks/superscript) | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-superscript/) |\n| [TextStyle](/api/marks/text-style)    | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text-style/)  |\n| [Underline](/api/marks/underline)     | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-underline/)   |\n"
    },
    {
        "url": "./api/extensions.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Extensions\n\n## Introduction\nExtensions add new capabilities to Tiptap and you’ll read the word extension here very often. Actually, there are literal Extensions. Those can’t add to the schema, but can add functionality or change the behaviour of the editor.\n\nThere are also some extensions with more capabilities. We call them [nodes](/api/nodes) and [marks](/api/marks) which can render content in the editor.\n\n## List of provided extensions\n| Title                                                       | StarterKit ([view](/api/extensions/starter-kit)) | Source Code                                                                                       |\n| ----------------------------------------------------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------- |\n| [BubbleMenu](/api/extensions/bubble-menu)                   | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bubble-menu/)          |\n| [CharacterCount](/api/extensions/character-count)           | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-character-count/)      |\n| [Collaboration](/api/extensions/collaboration)              | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration/)        |\n| [CollaborationCursor](/api/extensions/collaboration-cursor) | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration-cursor/) |\n| [Color](/api/extensions/color)                              | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-color/)                |\n| [Dropcursor](/api/extensions/dropcursor)                    | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-dropcursor/)           |\n| [FloatingMenu](/api/extensions/floating-menu)               | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-floating-menu/)        |\n| [Focus](/api/extensions/focus)                              | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-focus/)                |\n| [FontFamily](/api/extensions/font-family)                   | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-font-family/)          |\n| [Gapcursor](/api/extensions/gapcursor)                      | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-gapcursor/)            |\n| [History](/api/extensions/history)                          | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-history/)              |\n| [InvisibleCharacters](/api/extensions/invisible-characters) | –                                                | Requires a Tiptap Pro subscription                                                                |\n| [Mathematics](/api/extensions/mathematics)                  | –                                                | Requires a Tiptap Pro subscription                                                                |\n| [Placeholder](/api/extensions/placeholder)                  | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-placeholder/)          |\n| [StarterKit](/api/extensions/starter-kit)                   | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/starter-kit/)                    |\n| [TextAlign](/api/extensions/text-align)                     | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text-align/)           |\n| [Typography](/api/extensions/typography)                    | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-typography/)           |\n| [UniqueID](/api/extensions/unique-id)                       | –                                                | Requires a Tiptap Pro subscription                                                                |\n\nYou don’t have to use it, but we prepared a `@tiptap/starter-kit` which includes the most common extensions. Read more about [`StarterKit`](/guide/configuration#default-extensions).\n\nAlso a list of community extensions can be found in the [Awesome Tiptap Repository](https://github.com/ueberdosis/awesome-tiptap#community-extensions). There is also a [Discussion Thread](https://github.com/ueberdosis/tiptap/discussions/2973) about community extensions.\n\n## How extensions work\nAlthough Tiptap tries to hide most of the complexity of ProseMirror, it’s built on top of its APIs and we recommend you to read through the [ProseMirror Guide](https://ProseMirror.net/docs/guide/) for advanced usage. You’ll have a better understanding of how everything works under the hood and get more familiar with many terms and jargon used by Tiptap.\n\nExisting [nodes](/api/nodes), [marks](/api/marks) and [extensions](/api/extensions) can give you a good impression on how to approach your own extensions. To make it easier to switch between the documentation and the source code, we linked to the file on GitHub from every single extension documentation page.\n\nWe recommend to start with customizing existing extensions first, and create your own extensions with the gained knowledge later. That’s why all the examples below extend existing extensions, but all examples will work on newly created extensions aswell.\n\n## Create a new extension\nYou’re free to create your own extensions for Tiptap. Here is the boilerplate code that’s needed to create and register your own extension:\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  // Your code here\n})\n\nconst editor = new Editor({\n  extensions: [\n    // Register your custom extension with the editor.\n    CustomExtension,\n    // … and don’t forget all other extensions.\n    Document,\n    Paragraph,\n    Text,\n    // …\n  ],\n})\n```\n\nYou can easily bootstrap a new extension via our CLI.\n\n```bash\nnpm init tiptap-extension\n```\n\nLearn [more about custom extensions in our guide](/guide/custom-extensions).\n"
    },
    {
        "url": "./api/nodepos.md",
        "date": "2024-01-17",
        "contents": "# Node Positions\n\n- [Introduction](#introduction)\n- [Usage](#usage)\n- [API](#api)\n  - [NodePos](#nodepos)\n    - [Methods](#methods)\n      - [constructor](#constructor)\n      - [closest](#closest)\n      - [querySelector](#queryselector)\n      - [querySelectorAll](#queryselectorall)\n      - [setAttributes](#setattributes)\n    - [Properties](#properties)\n      - [node](#node)\n      - [element](#element)\n      - [content](#content)\n      - [attributes](#attributes)\n      - [textContent](#textcontent)\n      - [depth](#depth)\n      - [pos](#pos)\n      - [size](#size)\n      - [from](#from)\n      - [to](#to)\n      - [range](#range)\n      - [parent](#parent)\n      - [before](#before)\n      - [after](#after)\n      - [children](#children)\n      - [firstChild](#firstchild)\n      - [lastChild](#lastchild)\n\n\n## Introduction\n\nNode Positions (short `NodePos`) are a new concept introduced with Tiptap 3.0.0. They are used to describe a specific position of a node, it's children, it's parent and easy ways to navigate between them. They are heavily inspired by the DOM and are based on Prosemirror's [ResolvedPos](https://prosemirror.net/docs/ref/#model.ResolvedPos) implementation.\n\n## Usage\n\nThe easiest way to create a new **Node Position** is to use the helper functions added to the Editor instance. This way you always use the correct editor instance and have direct access to the API.\n\n```js\n// set up your editor somewhere up here\n\n// The NodePosition for the outermost document node\nconst $doc = editor.$doc\n\n// This will get all nodes with the type 'heading' currently found in the document\nconst $headings = editor.$nodes('heading')\n\n// You can also combine this to filter by attributes\nconst $h1 = editor.$nodes('heading', { level: 1 })\n\n// You can also pick nodes directly:\nconst $firstHeading = editor.$node('heading', { level: 1 })\n\n// If you don't know the type but the position you want to work with, you can create a new NodePos via the $pos method\nconst $myCustomPos = editor.$pos(30)\n```\n\nYou can also create your own NodePos instances:\n\n```js\n// You need to have an editor instance\n// and a position you want to map to\nconst myNodePos = new NodePos(100, editor)\n```\n\n## What can I do with a NodePos?\n\nNodePos can be used to traverse the document similar to the document DOM of your browser. You can access the parent node, child nodes and the sibling nodes. Here are an example of what you can do with a `codeBlock` node:\n\n```js\n// get the first codeBlock from your document\nconst $codeBlock = editor.$node('codeBlock')\n\n// get the previous NodePos of your codeBlock node\nconst $previousItem = $codeBlock.before\n\n// easily update the content\n$previousItem.content = '<p>Updated content</p>'\n```\n\nIf you are familiar with the DOM the following example should look familiar to you:\n\n```js\n// get a bullet list from your doc\nconst $bulletList = editor.$node('bulletList')\n\n// get all listItems from your bulletList\nconst $listItems = $bulletList.querySelectorAll('listItem')\n\n// get the last listItem\nconst $lastListItem = $listItems[0]\n\n// insert a new listItem after the last one\neditor.commands.insertContentAt($lastListItem.after, '<li>New item</li>')\n```\n\n## API\n\n### NodePos\n\nThe NodePos class is the main class you will work with. It is used to describe a specific position of a node, it's children, it's parent and easy ways to navigate between them. They are heavily inspired by the DOM and are based on Prosemirror's [ResolvedPos](https://prosemirror.net/docs/ref/#model.ResolvedPos) implementation.\n\n#### Methods\n\n##### constructor\n\n**Arguments**\n- `pos` – The position you want to map to\n- `editor` – The editor instance you want to use\n\n**Returns** `NodePos`\n\n```js\nconst myNodePos = new NodePos(100, editor)\n```\n\n##### closest\n\nThe closest NodePos instance of your NodePosition going up the depth. If there is no matching NodePos, it will return `null`.\n\n**Returns** `NodePos | null`\n\n```js\nconst closest = myNodePos.closest('bulletList')\n```\n\n##### querySelector\n\nThe first matching NodePos instance of your NodePosition going down the depth. If there is no matching NodePos, it will return `null`.\n\nYou can also filter by attributes via the second attribute.\n\n**Returns** `NodePos | null`\n\n```js\nconst firstHeading = myNodePos.querySelector('heading')\nconst firstH1 = myNodePos.querySelector('heading', { level: 1 })\n```\n\n##### querySelectorAll\n\nAll matching NodePos instances of your NodePosition going down the depth. If there is no matching NodePos, it will return an empty array.\n\nYou can also filter by attributes via the second attribute.\n\n**Returns** `Array<NodePos>`\n\n```js\nconst headings = myNodePos.querySelectorAll('heading')\nconst h1s = myNodePos.querySelectorAll('heading', { level: 1 })\n```\n\n##### setAttributes\n\nSet attributes on the current NodePos.\n\n**Returns** `NodePos`\n\n```js\nmyNodePos.setAttributes({ level: 1 })\n```\n\n#### Properties\n\n##### node\n\nThe Prosemirror Node at the current Node Position.\n\n**Returns** `Node`\n\n```js\nconst node = myNodePos.node\nnode.type.name // 'paragraph'\n```\n\n##### element\n\nThe DOM element at the current Node Position.\n\n**Returns** `Element`\n\n```js\nconst element = myNodePos.element\nelement.tagName // 'P'\n```\n\n##### content\n\nThe content of your NodePosition. This can be set to a new value to update the content of the node.\n\n**Returns** `string`\n\n```js\nconst content = myNodePos.content\nmyNodePos.content = '<p>Updated content</p>'\n```\n\n##### attributes\n\nThe attributes of your NodePosition.\n\n**Returns** `Object`\n\n```js\nconst attributes = myNodePos.attributes\nattributes.level // 1\n```\n\n##### textContent\n\nThe text content of your NodePosition.\n\n**Returns** `string`\n\n```js\nconst textContent = myNodePos.textContent\n```\n\n##### depth\n\nThe depth of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst depth = myNodePos.depth\n```\n\n##### pos\n\nThe position of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst pos = myNodePos.pos\n```\n\n##### size\n\nThe size of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst size = myNodePos.size\n```\n\n##### from\n\nThe from position of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst from = myNodePos.from\n```\n\n##### to\n\nThe to position of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst to = myNodePos.to\n```\n\n##### range\n\nThe range of your NodePosition.\n\n**Returns** `number`\n\n```js\nconst range = myNodePos.range\n```\n\n##### parent\n\nThe parent NodePos of your NodePosition.\n\n**Returns** `NodePos`\n\n```js\nconst parent = myNodePos.parent\n```\n\n##### before\n\nThe NodePos before your NodePosition. If there is no NodePos before, it will return `null`.\n\n**Returns** `NodePos | null`\n\n```js\nconst before = myNodePos.before\n```\n\n##### after\n\nThe NodePos after your NodePosition. If there is no NodePos after, it will return `null`.\n\n**Returns** `NodePos | null`\n\n```js\nconst after = myNodePos.after\n```\n\n##### children\n\nThe child NodePos instances of your NodePosition.\n\n**Returns** `Array<NodePos>`\n\n```js\nconst children = myNodePos.children\n```\n\n##### firstChild\n\nThe first child NodePos instance of your NodePosition. If there is no child, it will return `null`.\n\n**Returns** `NodePos | null`\n\n```js\nconst firstChild = myNodePos.firstChild\n```\n\n##### lastChild\n\nThe last child NodePos instance of your NodePosition. If there is no child, it will return `null`.\n\n**Returns** `NodePos | null`\n\n```js\nconst lastChild = myNodePos.lastChild\n```\n"
    },
    {
        "url": "./api/keyboard-shortcuts.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Keyboard Shortcuts\n\n## Introduction\nTiptap comes with sensible keyboard shortcut defaults. Depending on what you want to use it for, you’ll probably want to change those keyboard shortcuts to your liking. Let’s have a look at what we defined for you, and show you how to change it then!\n\n## Predefined keyboard shortcuts\nMost of the core extensions register their own keyboard shortcuts. Depending on what set of extension you use, not all of the below listed keyboard shortcuts work for your editor.\n\n### Essentials\n| Command                  | Windows/Linux                   | macOS                       |\n| ------------------------ | ------------------------------- | --------------------------- |\n| Copy                     | `Control`&nbsp;`C`              | `Cmd`&nbsp;`C`              |\n| Cut                      | `Control`&nbsp;`X`              | `Cmd`&nbsp;`X`              |\n| Paste                    | `Control`&nbsp;`V`              | `Cmd`&nbsp;`V`              |\n| Paste without formatting | `Control`&nbsp;`Shift`&nbsp;`V` | `Cmd`&nbsp;`Shift`&nbsp;`V` |\n| Undo                     | `Control`&nbsp;`Z`              | `Cmd`&nbsp;`Z`              |\n| Redo                     | `Control`&nbsp;`Shift`&nbsp;`Z` | `Cmd`&nbsp;`Shift`&nbsp;`Z` |\n| Add a line break         | `Shift`&nbsp;`Enter`<br>`Control`&nbsp;`Enter` | `Shift`&nbsp;`Enter`&nbsp;<br>`Cmd`&nbsp;`Enter` |\n\n### Text Formatting\n| Command       | Windows/Linux                   | macOS                       |\n| ------------- | ------------------------------- | --------------------------- |\n| Bold          | `Control`&nbsp;`B`              | `Cmd`&nbsp;`B`              |\n| Italicize     | `Control`&nbsp;`I`              | `Cmd`&nbsp;`I`              |\n| Underline     | `Control`&nbsp;`U`              | `Cmd`&nbsp;`U`              |\n| Strikethrough | `Control`&nbsp;`Shift`&nbsp;`X` | `Cmd`&nbsp;`Shift`&nbsp;`X` |\n| Highlight     | `Control`&nbsp;`Shift`&nbsp;`H` | `Cmd`&nbsp;`Shift`&nbsp;`H` |\n| Code          | `Control`&nbsp;`E`              | `Cmd`&nbsp;`E`              |\n\n### Paragraph Formatting\n| Command                 | Windows/Linux                   | macOS                       |\n| ----------------------- | ------------------------------- | --------------------------- |\n| Apply normal text style | `Control`&nbsp;`Alt`&nbsp;`0`   | `Cmd`&nbsp;`Alt`&nbsp;`0`   |\n| Apply heading style 1   | `Control`&nbsp;`Alt`&nbsp;`1`   | `Cmd`&nbsp;`Alt`&nbsp;`1`   |\n| Apply heading style 2   | `Control`&nbsp;`Alt`&nbsp;`2`   | `Cmd`&nbsp;`Alt`&nbsp;`2`   |\n| Apply heading style 3   | `Control`&nbsp;`Alt`&nbsp;`3`   | `Cmd`&nbsp;`Alt`&nbsp;`3`   |\n| Apply heading style 4   | `Control`&nbsp;`Alt`&nbsp;`4`   | `Cmd`&nbsp;`Alt`&nbsp;`4`   |\n| Apply heading style 5   | `Control`&nbsp;`Alt`&nbsp;`5`   | `Cmd`&nbsp;`Alt`&nbsp;`5`   |\n| Apply heading style 6   | `Control`&nbsp;`Alt`&nbsp;`6`   | `Cmd`&nbsp;`Alt`&nbsp;`6`   |\n| Ordered list            | `Control`&nbsp;`Shift`&nbsp;`7` | `Cmd`&nbsp;`Shift`&nbsp;`7` |\n| Bullet list             | `Control`&nbsp;`Shift`&nbsp;`8` | `Cmd`&nbsp;`Shift`&nbsp;`8` |\n| Task list               | `Control`&nbsp;`Shift`&nbsp;`9` | `Cmd`&nbsp;`Shift`&nbsp;`9` |\n| Blockquote              | `Control`&nbsp;`Shift`&nbsp;`B` | `Cmd`&nbsp;`Shift`&nbsp;`B` |\n| Left align              | `Control`&nbsp;`Shift`&nbsp;`L` | `Cmd`&nbsp;`Shift`&nbsp;`L` |\n| Center align            | `Control`&nbsp;`Shift`&nbsp;`E` | `Cmd`&nbsp;`Shift`&nbsp;`E` |\n| Right align             | `Control`&nbsp;`Shift`&nbsp;`R` | `Cmd`&nbsp;`Shift`&nbsp;`R` |\n| Justify                 | `Control`&nbsp;`Shift`&nbsp;`J` | `Cmd`&nbsp;`Shift`&nbsp;`J` |\n| Code block              | `Control`&nbsp;`Alt`&nbsp;`C`   | `Cmd`&nbsp;`Alt`&nbsp;`C`   |\n| Subscript               | `Control`&nbsp;`,`              | `Cmd`&nbsp;`,`              |\n| Superscript             | `Control`&nbsp;`.`              | `Cmd`&nbsp;`.`              |\n\n<!--| Toggle task| `Control`&nbsp;`Enter` | `Cmd`&nbsp;`Enter` | -->\n\n### Text Selection\n| Command                                           | Windows/Linux                   | macOS                       |\n| ------------------------------------------------- | ------------------------------- | --------------------------- |\n| Select all                                        | `Control`&nbsp;`A`              | `Cmd`&nbsp;`A`              |\n| Extend selection one character to left            | `Shift`&nbsp;`←`                | `Shift`&nbsp;`←`            |\n| Extend selection one character to right           | `Shift`&nbsp;`→`                | `Shift`&nbsp;`→`            |\n| Extend selection one line up                      | `Shift`&nbsp;`↑`                | `Shift`&nbsp;`↑`            |\n| Extend selection one line down                    | `Shift`&nbsp;`↓`                | `Shift`&nbsp;`↓`            |\n| Extend selection to the beginning of the document | `Control`&nbsp;`Shift`&nbsp;`↑` | `Cmd`&nbsp;`Shift`&nbsp;`↑` |\n| Extend selection to the end of the document       | `Control`&nbsp;`Shift`&nbsp;`↓` | `Cmd`&nbsp;`Shift`&nbsp;`↓` |\n\n## Overwrite keyboard shortcuts\nKeyboard shortcuts may be strings like `'Shift-Control-Enter'`. Keys are based on the strings that can appear in `event.key`, concatenated with a `-`. There is a little tool called [keycode.info](https://keycode.info/), which shows the `event.key` interactively.\n\nUse lowercase letters to refer to letter keys (or uppercase letters if you want shift to be held). You may use `Space` as an alias for the <code>&nbsp;</code>.\n\nModifiers can be given in any order. `Shift`, `Alt`, `Control` and `Cmd` are recognized. For characters that are created by holding shift, the `Shift` prefix is implied, and should not be added explicitly.\n\nYou can use `Mod` as a shorthand for `Cmd` on Mac and `Control` on other platforms.\n\nHere is an example how you can overwrite the keyboard shortcuts for an existing extension:\n\n```js\n// 1. Import the extension\nimport BulletList from '@tiptap/extension-bullet-list'\n\n// 2. Overwrite the keyboard shortcuts\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      // ↓ your new keyboard shortcut\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n\n// 3. Add the custom extension to your editor\nnew Editor({\n  extensions: [\n    CustomBulletList(),\n    // …\n  ],\n})\n```\n"
    },
    {
        "url": "./api/commands.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Commands\n\n## Introduction\nThe editor provides a ton of commands to programmatically add or change content or alter the selection. If you want to build your own editor you definitely want to learn more about them.\n\n## Execute a command\nAll available commands are accessible through an editor instance. Let’s say you want to make text bold when a user clicks on a button. That’s how that would look like:\n\n```js\neditor.commands.setBold()\n```\n\nWhile that’s perfectly fine and does make the selected bold, you’d likely want to chain multiple commands in one run. Let’s have a look at how that works.\n\n### Chain commands\nMost commands can be combined to one call. That’s shorter than separate function calls in most cases. Here is an example to make the selected text bold:\n\n```js\neditor\n  .chain()\n  .focus()\n  .toggleBold()\n  .run()\n```\n\nThe `.chain()` is required to start a new chain and the `.run()` is needed to actually execute all the commands in between.\n\nIn the example above two different commands are executed at once. When a user clicks on a button outside of the content, the editor isn’t in focus anymore. That’s why you probably want to add a `.focus()` call to most of your commands. It brings back the focus to the editor, so the user can continue to type.\n\nAll chained commands are kind of queued up. They are combined to one single transaction. That means, the content is only updated once, also the `update` event is only triggered once.\n\n:::warning Important\nBy default Prosemirror **does not support chaining** which means that you need to update the positions between chained commands via [**Transaction mapping**](https://prosemirror.net/docs/ref/#transform.Mapping).\n:::\n\nFor example you want to chain a **delete** and **insert** command in one chain, you need to keep track of the position inside your chain commands. Here is an example:\n\n```js\n// here we add two custom commands to the editor to demonstrate transaction mapping between two transaction steps\naddCommands() {\n  return {\n    delete: () => ({ tr }) => {\n      const { $from, $to } = tr.selection\n\n      // here we use tr.mapping.map to map the position between transaction steps\n      const from = tr.mapping.map($from.pos)\n      const to = tr.mapping.map($to.pos)\n\n      tr.delete(from, to)\n\n      return true\n    },\n    insert: (content: string) => ({ tr }) => {\n      const { $from } = tr.selection\n\n      // here we use tr.mapping.map to map the position between transaction steps\n      const pos = tr.mapping.map($from.pos)\n\n      tr.insertText(content, pos)\n\n      return true\n    },\n  }\n}\n```\n\nNow you can do the following without `insert` inserting the content into the wrong position:\n\n```js\neditor.chain().delete().insert('foo').run()\n```\n\n#### Chaining inside custom commands\nWhen chaining a command, the transaction is held back. If you want to chain commands inside your custom commands, you’ll need to use said transaction and add to it. Here is how you would do that:\n\n```js\naddCommands() {\n  return {\n    customCommand: attributes => ({ chain }) => {\n      // Doesn’t work:\n      // return editor.chain() …\n\n      // Does work:\n      return chain()\n        .insertContent('foo!')\n        .insertContent('bar!')\n        .run()\n    },\n  }\n}\n```\n\n### Inline commands\nIn some cases, it’s helpful to put some more logic in a command. That’s why you can execute commands in commands. I know, that sounds crazy, but let’s look at an example:\n\n```js\neditor\n  .chain()\n  .focus()\n  .command(({ tr }) => {\n    // manipulate the transaction\n    tr.insertText('hey, that’s cool!')\n\n    return true\n  })\n  .run()\n```\n\n### Dry run for commands\nSometimes, you don’t want to actually run the commands, but only know if it would be possible to run commands, for example to show or hide buttons in a menu. That’s what we added `.can()` for. Everything coming after this method will be executed, without applying the changes to the document:\n\n```js\neditor\n  .can()\n  .toggleBold()\n```\n\nAnd you can use it together with `.chain()`, too. Here is an example which checks if it’s possible to apply all the commands:\n\n```js\neditor\n  .can()\n  .chain()\n  .toggleBold()\n  .toggleItalic()\n  .run()\n```\n\nBoth calls would return `true` if it’s possible to apply the commands, and `false` in case it’s not.\n\nIn order to make that work with your custom commands, don’t forget to return `true` or `false`.\n\nFor some of your own commands, you probably want to work with the raw [transaction](/api/introduction). To make them work with `.can()` you should check if the transaction should be dispatched. Here is how you can create a simple `.insertText()` command:\n\n```js\nexport default (value) => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.insertText(value)\n  }\n\n  return true\n}\n```\n\nIf you’re just wrapping another Tiptap command, you don’t need to check that, we’ll do it for you.\n\n```js\naddCommands() {\n  return {\n    bold: () => ({ commands }) => {\n      return commands.toggleMark('bold')\n    },\n  }\n}\n```\n\nIf you’re just wrapping a plain ProseMirror command, you’ll need to pass `dispatch` anyway. Then there’s also no need to check it:\n\n```js\nimport { exitCode } from '@tiptap/pm/commands'\n\nexport default () => ({ state, dispatch }) => {\n  return exitCode(state, dispatch)\n}\n```\n\n### Try commands\nIf you want to run a list of commands, but want only the first successful command to be applied, you can do this with the `.first()` method. This method runs one command after the other and stops at the first which returns `true`.\n\nFor example, the backspace key tries to undo an input rule first. If that was successful, it stops there. If no input rule has been applied and thus can’t be reverted, it runs the next command and deletes the selection, if there is one. Here is the simplified example:\n\n```js\neditor.first(({ commands }) => [\n  () => commands.undoInputRule(),\n  () => commands.deleteSelection(),\n  // …\n])\n```\n\nInside of commands you can do the same thing:\n\n```js\nexport default () => ({ commands }) => {\n  return commands.first([\n    () => commands.undoInputRule(),\n    () => commands.deleteSelection(),\n    // …\n  ])\n}\n```\n\n## List of commands\nHave a look at all of the core commands listed below. They should give you a good first impression of what’s possible.\n\n### Content\n| Command            | Description                                              | Links                                   |\n| ------------------ | -------------------------------------------------------- | --------------------------------------- |\n| clearContent()    | Clear the whole document.                                | [More](/api/commands/clear-content)     |\n| insertContent()   | Insert a node or string of HTML at the current position. | [More](/api/commands/insert-content)    |\n| insertContentAt() | Insert a node or string of HTML at a specific position.  | [More](/api/commands/insert-content-at) |\n| setContent()      | Replace the whole document with new content.             | [More](/api/commands/set-content)       |\n\n### Nodes & Marks\n| Command                 | Description                                               | Links                                |\n| ----------------------- | --------------------------------------------------------- | ------------------------------------ |\n| clearNodes()           | Normalize nodes to a simple paragraph.                    | [More](/api/commands/clear-nodes)  |\n| createParagraphNear()  | Create a paragraph nearby.                                | [More](/api/commands/create-paragraph-near)  |\n| deleteNode()           | Delete a node.                                            | [More](/api/commands/delete-node)  |\n| extendMarkRange()      | Extends the text selection to the current mark.           | [More](/api/commands/extend-mark-range)  |\n| exitCode()             | Exit from a code block.                                   | [More](/api/commands/exit-code)  |\n| joinBackward()         | Join two nodes backward.                                  | [More](/api/commands/join-backward)  |\n| joinForward()          | Join two nodes forward.                                   | [More](/api/commands/join-forward)  |\n| lift()                 | Removes an existing wrap.                                 | [More](/api/commands/lift)  |\n| liftEmptyBlock()       | Lift block if empty.                                      | [More](/api/commands/lift-empty-block)  |\n| newlineInCode()        | Add a newline character in code.                          | [More](/api/commands/newline-in-code)  |\n| resetAttributes()      | Resets some node or mark attributes to the default value. | [More](/api/commands/reset-attributes)  |\n| setMark()              | Add a mark with new attributes.                           | [More](/api/commands/set-mark)  |\n| setNode()              | Replace a given range with a node.                        | [More](/api/commands/set-node)  |\n| splitBlock()           | Forks a new node from an existing node.                   | [More](/api/commands/split-block)  |\n| toggleMark()           | Toggle a mark on and off.                                 | [More](/api/commands/toggle-mark)  |\n| toggleNode()           | Toggle a node with another node.                          | [More](/api/commands/toggle-node)  |\n| toggleWrap()           | Wraps nodes in another node, or removes an existing wrap. | [More](/api/commands/toggle-wrap)  |\n| undoInputRule()        | Undo an input rule.                                       | [More](/api/commands/undo-input-rule)  |\n| unsetAllMarks()        | Remove all marks in the current selection.                | [More](/api/commands/unset-all-marks)  |\n| unsetMark()            | Remove a mark in the current selection.                   | [More](/api/commands/unset-mark)  |\n| updateAttributes()     | Update attributes of a node or mark.                      | [More](/api/commands/update-attributes)  |\n\n### Lists\n| Command          | Description                                 | Links                                |\n| ---------------- | ------------------------------------------- | ------------------------------------ |\n| liftListItem()  | Lift the list item into a wrapping list.    | [More](/api/commands/lift-list-item)  |\n| sinkListItem()  | Sink the list item down into an inner list. | [More](/api/commands/sink-list-item)  |\n| splitListItem() | Splits one list item into two list items.   | [More](/api/commands/split-list-item)  |\n| toggleList()    | Toggle between different list types.        | [More](/api/commands/toggle-list)  |\n| wrapInList()    | Wrap a node in a list.                      | [More](/api/commands/wrap-in-list)  |\n\n### Selection\n| Command               | Description                             | Links                                |\n| --------------------- | --------------------------------------- | ------------------------------------ |\n| blur()               | Removes focus from the editor.          | [More](/api/commands/blur)  |\n| deleteRange()        | Delete a given range.                   | [More](/api/commands/delete-range)  |\n| deleteSelection()    | Delete the selection, if there is one.  | [More](/api/commands/delete-selection)  |\n| enter()              | Trigger enter.                          | [More](/api/commands/enter)  |\n| focus()              | Focus the editor at the given position. | [More](/api/commands/focus)  |\n| keyboardShortcut()   | Trigger a keyboard shortcut.            | [More](/api/commands/keyboard-shortcut)  |\n| scrollIntoView()     | Scroll the selection into view.         | [More](/api/commands/scroll-into-view)  |\n| selectAll()          | Select the whole document.              | [More](/api/commands/select-all)  |\n| selectNodeBackward() | Select a node backward.                 | [More](/api/commands/select-node-backward)  |\n| selectNodeForward()  | Select a node forward.                  | [More](/api/commands/select-node-forward)  |\n| selectParentNode()   | Select the parent node.                 | [More](/api/commands/select-parent-node)  |\n| setNodeSelection()   | Creates a NodeSelection.                | [More](/api/commands/set-node-selection)  |\n| setTextSelection()   | Creates a TextSelection.                | [More](/api/commands/set-text-selection)  |\n\n<!-- ## Example use cases\n\n### Quote a text\nTODO\n\nAdd a blockquote, with a specified text, add a paragraph below, set the cursor there.\n\n```js\n// Untested, work in progress, likely to change\nthis.editor\n  .chain()\n  .focus()\n  .createParagraphNear()\n  .insertContent(text)\n  .setBlockquote()\n  .insertContent('<p></p>')\n  .createParagraphNear()\n  .unsetBlockquote()\n  .createParagraphNear()\n  .insertContent('<p></p>')\n  .run()\n```\n\nAdd a custom command to insert a node.\n```js\naddCommands() {\n  return {\n    insertTimecode: attributes => ({ chain }) => {\n      return chain()\n        .focus()\n        .insertContent({\n          type: 'heading',\n          attrs: {\n            level: 2,\n          },\n          content: [\n            {\n              type: 'text',\n              text: 'heading',\n            },\n          ],\n        })\n        .insertText(' ')\n        .run();\n    },\n  }\n},\n```\n-->\n\n## Write your own commands\nAll extensions can add additional commands (and most do), check out the specific [documentation for the provided nodes](/api/nodes), [marks](/api/marks), and [extensions](/api/extensions) to learn more about those. And of course, you can [add your custom extensions](/guide/custom-extensions) with custom commands aswell.\n\nBut how do you write those commands? There’s a little bit to learn about that.\n\n:::pro Oops, this is work in progress\nA well-written documentation needs attention to detail, a great understanding of the project and time to write.\n\nThough Tiptap is used by thousands of developers all around the world, it’s still a side project for us. Let’s change that and make open source our full-time job! With nearly 300 sponsors we are half way there already.\n\nJoin them and become a sponsor! Enable us to put more time into open source and we’ll fill this page and keep it up to date for you.\n\n[Become a sponsor on GitHub →](https://github.com/sponsors/ueberdosis)\n:::\n\n\n"
    },
    {
        "url": "./api/schema.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Schema\n\n## Introduction\nUnlike many other editors, Tiptap is based on a [schema](https://prosemirror.net/docs/guide/#schema) that defines how your content is structured. That enables you to define the kind of nodes that may occur in the document, its attributes and the way they can be nested.\n\nThis schema is *very* strict. You can’t use any HTML element or attribute that is not defined in your schema.\n\nLet me give you one example: If you paste something like `This is <strong>important</strong>` into Tiptap, but don’t have any extension that handles `strong` tags, you’ll only see `This is important` – without the strong tags.\n\n## How a schema looks like\nWhen you’ll work with the provided extensions only, you don’t have to care that much about the schema. If you’re building your own extensions, it’s probably helpful to understand how the schema works. Let’s look at the most simple schema for a typical ProseMirror editor:\n\n```js\n// the underlying ProseMirror schema\n{\n  nodes: {\n    doc: {\n      content: 'block+',\n    },\n    paragraph: {\n      content: 'inline*',\n      group: 'block',\n      parseDOM: [{ tag: 'p' }],\n      toDOM: () => ['p', 0],\n    },\n    text: {\n      group: 'inline',\n    },\n  },\n}\n```\n\nWe register three nodes here. `doc`, `paragraph` and `text`. `doc` is the root node which allows one or more block nodes as children (`content: 'block+'`). Since `paragraph` is in the group of block nodes (`group: 'block'`) our document can only contain paragraphs. Our paragraphs allow zero or more inline nodes as children (`content: 'inline*'`) so there can only be `text` in it. `parseDOM` defines how a node can be parsed from pasted HTML. `toDOM` defines how it will be rendered in the DOM.\n\nIn Tiptap every node, mark and extension is living in its own file. This allows us to split the logic. Under the hood the whole schema will be merged together:\n\n```js\n// the Tiptap schema API\nimport { Node } from '@tiptap/core'\n\nconst Document = Node.create({\n  name: 'doc',\n  topNode: true,\n  content: 'block+',\n})\n\nconst Paragraph = Node.create({\n  name: 'paragraph',\n  group: 'block',\n  content: 'inline*',\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n  renderHTML({ HTMLAttributes }) {\n    return ['p', HTMLAttributes, 0]\n  },\n})\n\nconst Text = Node.create({\n  name: 'text',\n  group: 'inline',\n})\n```\n\n## Nodes and marks\n\n### Differences\nNodes are like blocks of content, for example paragraphs, headings, code blocks, blockquotes and many more.\n\nMarks can be applied to specific parts of a node. That’s the case for **bold**, *italic* or ~~striked~~ text. [Links](#) are marks, too.\n\n### The node schema\n\n#### Content\nThe content attribute defines exactly what kind of content the node can have. ProseMirror is really strict with that. That means, content which doesn’t fit the schema is thrown away. It expects a name or group as a string. Here are a few examples:\n\n```js\nNode.create({\n  // must have one or more blocks\n  content: 'block+',\n\n  // must have zero or more blocks\n  content: 'block*',\n\n  // allows all kinds of 'inline' content (text or hard breaks)\n  content: 'inline*',\n\n  // must not have anything else than 'text'\n  content: 'text*',\n\n  // can have one or more paragraphs, or lists (if lists are used)\n  content: '(paragraph|list?)+',\n\n  // must have exact one heading at the top, and one or more blocks below\n  content: 'heading block+'\n})\n```\n\n#### Marks\nYou can define which marks are allowed inside of a node with the `marks` setting of the schema. Add a one or more names or groups of marks, allow all or disallow all marks like this:\n\n```js\nNode.create({\n  // allows only the 'bold' mark\n  marks: 'bold',\n\n  // allows only the 'bold' and 'italic' marks\n  marks: 'bold italic',\n\n  // allows all marks\n  marks: '_',\n\n  // disallows all marks\n  marks: '',\n})\n```\n\n#### Group\nAdd this node to a group of extensions, which can be referred to in the [content](#content) attribute of the schema.\n\n```js\nNode.create({\n  // add to 'block' group\n  group: 'block',\n\n  // add to 'inline' group\n  group: 'inline',\n\n  // add to 'block' and 'list' group\n  group: 'block list',\n})\n```\n\n#### Inline\nNodes can be rendered inline, too. When setting `inline: true` nodes are rendered in line with the text. That’s the case for mentions. The result is more like a mark, but with the functionality of a node. One difference is the resulting JSON document. Multiple marks are applied at once, inline nodes would result in a nested structure.\n\n```js\nNode.create({\n  // renders nodes in line with the text, for example\n  inline: true,\n})\n```\n\nFor some cases where you want features that aren’t available in marks, for example a node view, try if an inline node would work:\n\n```js\nNode.create({\n  name: 'customInlineNode',\n  group: 'inline',\n  inline: true,\n  content: 'text*',\n})\n```\n\n#### Atom\nNodes with `atom: true` aren’t directly editable and should be treated as a single unit. It’s not so likely to use that in a editor context, but this is how it would look like:\n\n```js\nNode.create({\n  atom: true,\n})\n```\n\nOne example is the [`Mention`](/api/nodes/mention) extension, which somehow looks like text, but behaves more like a single unit. As this doesn’t have editable text content, it’s empty when you copy such node. Good news though, you can control that. Here is the example from the [`Mention`](/api/nodes/mention) extension:\n\n```js\n// Used to convert an atom node to plain text\nrenderText({ node }) {\n  return `@${node.attrs.id}`\n},\n```\n\n#### Selectable\nBesides the already visible text selection, there is an invisible node selection. If you want to make your nodes selectable, you can configure it like this:\n\n```js\nNode.create({\n  selectable: true,\n})\n```\n\n#### Draggable\nAll nodes can be configured to be draggable (by default they aren’t) with this setting:\n\n```js\nNode.create({\n  draggable: true,\n})\n```\n\n#### Code\nUsers expect code to behave very differently. For all kind of nodes containing code, you can set `code: true` to take this into account.\n\n```js\nNode.create({\n  code: true,\n})\n```\n\n#### Whitespace\nControls way whitespace in this a node is parsed.\n\n```js\nNode.create({\n  whitespace: 'pre',\n})\n```\n\n#### Defining\nNodes get dropped when their entire content is replaced (for example, when pasting new content) by default. If a node should be kept for such replace operations, configure them as `defining`.\n\nTypically, that applies to [`Blockquote`](/api/nodes/blockquote), [`CodeBlock`](/api/nodes/code-block), [`Heading`](/api/nodes/heading), and [`ListItem`](/api/nodes/list-item).\n\n```js\nNode.create({\n  defining: true,\n})\n```\n\n#### Isolating\nFor nodes that should fence the cursor for regular editing operations like backspacing, for example a TableCell, set `isolating: true`.\n\n```js\nNode.create({\n  isolating: true,\n})\n```\n\n#### Allow gap cursor\nThe [`Gapcursor`](/api/extensions/gapcursor) extension registers a new schema attribute to control if gap cursors are allowed everywhere in that node.\n\n```js\nNode.create({\n  allowGapCursor: false,\n})\n```\n\n#### Table roles\nThe [`Table`](/api/nodes/table) extension registers a new schema attribute to configure which role an Node has. Allowed values are `table`, `row`, `cell`, and `header_cell`.\n\n```js\nNode.create({\n  tableRole: 'cell',\n})\n```\n\n### The mark schema\n#### Inclusive\nIf you don’t want the mark to be active when the cursor is at its end, set inclusive to `false`. For example, that’s how it’s configured for [`Link`](/api/marks/link) marks:\n\n```js\nMark.create({\n  inclusive: false,\n})\n```\n\n#### Excludes\nBy default all marks can be applied at the same time. With the excludes attribute you can define which marks must not coexist with the mark. For example, the inline code mark excludes any other mark (bold, italic, and all others).\n\n```js\nMark.create({\n  // must not coexist with the bold mark\n  excludes: 'bold'\n  // exclude any other mark\n  excludes: '_',\n})\n```\n\n#### Exitable\nBy default a mark will \"trap\" the cursor, meaning the cursor can't get out of the mark except by moving the cursor left to right into text without a mark.\nIf this is set to true, the mark will be exitable when the mark is at the end of a node. This is handy for example using code marks.\n\n```js\nMark.create({\n  // make this mark exitable - default is false\n  exitable: true,\n})\n```\n\n#### Group\nAdd this mark to a group of extensions, which can be referred to in the content attribute of the schema.\n\n```js\nMark.create({\n  // add this mark to the 'basic' group\n  group: 'basic',\n  // add this mark to the 'basic' and the 'foobar' group\n  group: 'basic foobar',\n})\n```\n\n#### Code\nUsers expect code to behave very differently. For all kind of marks containing code, you can set `code: true` to take this into account.\n\n```js\nMark.create({\n  code: true,\n})\n```\n\n#### Spanning\nBy default marks can span multiple nodes when rendered as HTML. Set `spanning: false` to indicate that a mark must not span multiple nodes.\n\n```js\nMark.create({\n  spanning: false,\n})\n```\n\n## Get the underlying ProseMirror schema\nThere are a few use cases where you need to work with the underlying schema. You’ll need that if you’re using the Tiptap collaborative text editing features or if you want to manually render your content as HTML.\n\n### Option 1: With an Editor\nIf you need this on the client side and need an editor instance anyway, it’s available through the editor:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nconst editor = new Editor({\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    // add more extensions here\n  ])\n})\n\nconst schema = editor.schema\n```\n\n### Option 2: Without an Editor\nIf you just want to have the schema *without* initializing an actual editor, you can use the `getSchema` helper function. It needs an array of available extensions and conveniently generates a ProseMirror schema for you:\n\n```js\nimport { getSchema } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nconst schema = getSchema([\n  Document,\n  Paragraph,\n  Text,\n  // add more extensions here\n])\n```\n"
    },
    {
        "url": "./api/editor.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Editor\n\n## Introduction\nThis class is a central building block of Tiptap. It does most of the heavy lifting of creating a working  [ProseMirror](https://ProseMirror.net/) editor such as creating the [`EditorView`](https://ProseMirror.net/docs/ref/#view.EditorView), setting the initial [`EditorState`](https://ProseMirror.net/docs/ref/#state.Editor_State) and so on.\n\n## Methods\nThe editor instance will provide a bunch of public methods. Methods are regular functions and can return anything. They’ll help you to work with the editor.\n\nDon’t confuse methods with [commands](/api/commands). Commands are used to change the state of editor (content, selection, and so on) and only return `true` or `false`.\n\n### can()\nCheck if a command or a command chain can be executed – without actually executing it. Can be very helpful to enable/disable or show/hide buttons.\n\n```js\n// Returns `true` if the undo command can be executed\neditor.can().undo()\n```\n\n### chain()\nCreate a command chain to call multiple commands at once.\n\n```js\n// Execute two commands at once\neditor.chain().toggleBold().focus().run()\n```\n\n### destroy()\nStops the editor instance and unbinds all events.\n\n```js\n// Hasta la vista, baby!\neditor.destroy()\n```\n\n### getHTML()\nReturns the current editor document as HTML\n\n```js\neditor.getHTML()\n```\n\n### getJSON()\nReturns the current editor document as JSON.\n\n```js\neditor.getJSON()\n```\n\n### getText()\nReturns the current editor document as plain text.\n\n| Parameter  | Type                           | Description              |\n| ---------- | ------------------------------ | ------------------------ |\n| options | { blockSeparator?: string, textSerializers?: Record<string, TextSerializer>} | Options for the serialization.  |\n\n```js\n// Give me plain text!\neditor.getText()\n// Add two line breaks between nodes\neditor.getText({ blockSeparator: \"\\n\\n\" })\n```\n\n### getAttributes()\nGet attributes of the currently selected node or mark.\n\n| Parameter  | Type                           | Description              |\n| ---------- | ------------------------------ | ------------------------ |\n| typeOrName | string \\| NodeType \\| MarkType | Name of the node or mark |\n\n```js\neditor.getAttributes('link').href\n```\n\n### isActive()\nReturns if the currently selected node or mark is active.\n\n| Parameter              | Type                | Description                    |\n| ---------------------- | ------------------- | ------------------------------ |\n| name                   | string \\| null      | Name of the node or mark       |\n| attributes             | Record<string, any> | Attributes of the node or mark |\n\n```js\n// Check if it’s a heading\neditor.isActive('heading')\n// Check if it’s a heading with a specific attribute value\neditor.isActive('heading', { level: 2 })\n// Check if it has a specific attribute value, doesn’t care what node/mark it is\neditor.isActive({ textAlign: 'justify' })\n```\n\n### registerPlugin()\nRegister a ProseMirror plugin.\n\n| Parameter      | Type                                               | Description                                               |\n| -------------- | -------------------------------------------------- | --------------------------------------------------------- |\n| plugin         | Plugin                                             | A ProseMirror plugin                                      |\n| handlePlugins? | (newPlugin: Plugin, plugins: Plugin[]) => Plugin[] | Control how to merge the plugin into the existing plugins |\n\n### setOptions()\nUpdate editor options.\n\n| Parameter | Type                   | Description       |\n| --------- | ---------------------- | ----------------- |\n| options   | Partial<EditorOptions> | A list of options |\n\n```js\n// Add a class to an existing editor instance\neditor.setOptions({\n  editorProps: {\n    attributes: {\n      class: 'my-custom-class',\n    },\n  },\n})\n```\n\n### setEditable()\nUpdate editable state of the editor.\n\n| Parameter | Type    | Description                                                   |\n| --------- | ------- | ------------------------------------------------------------- |\n| editable  | boolean | `true` when the user should be able to write into the editor. |\n| emitUpdate | boolean | Defaults to `true`. Determines whether `onUpdate` is triggered. |\n\n```js\n// Make the editor read-only\neditor.setEditable(false)\n```\n\n### unregisterPlugin()\nUnregister a ProseMirror plugin.\n\n| Parameter       | Type                | Description      |\n| --------------- | ------------------- | ---------------- |\n| nameOrPluginKey | string \\| PluginKey | The plugins name |\n\n## Getters\n\n### isEditable\nReturns whether the editor is editable or read-only.\n\n```js\neditor.isEditable\n```\n\n### isEmpty\nCheck if there is content.\n\n```js\neditor.isEmpty\n```\n\n### isFocused\nCheck if the editor is focused.\n\n```js\neditor.isFocused\n```\n\n### isDestroyed\nCheck if the editor is destroyed.\n\n```js\neditor.isDestroyed\n```\n\n### isCapturingTransaction\nCheck if the editor is capturing a transaction.\n\n```js\neditor.isCapturingTransaction\n```\n\n## Settings\n\n### element\nThe `element` specifies the HTML element the editor will be binded to. The following code will integrate Tiptap with an element with the `.element` class:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    StarterKit,\n  ],\n})\n```\n\nYou can even initiate your editor before mounting it to an element. This is useful when your DOM is not yet available. Just leave out the `element`, we’ll create one for you. Append it to your container at a later date:\n\n```js\nyourContainerElement.append(editor.options.element)\n```\n\n### extensions\nIt’s required to pass a list of extensions to the `extensions` property, even if you only want to allow paragraphs.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Highlight from '@tiptap/extension-highlight'\n\nnew Editor({\n  // Use the default extensions\n  extensions: [\n    StarterKit,\n  ],\n\n  // … or use specific extensions\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n  ],\n\n  // … or both\n  extensions: [\n    StarterKit,\n    Highlight,\n  ],\n})\n```\n\n### content\nWith the `content` property you can provide the initial content for the editor. This can be HTML or JSON.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n  ],\n})\n```\n\n### editable\nThe `editable` property determines if users can write into the editor.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n  ],\n  editable: false,\n})\n```\n\n### autofocus\nWith `autofocus` you can force the cursor to jump in the editor on initialization.\n\n| Value     | Description                                            |\n| --------- | ------------------------------------------------------ |\n| `'start'` | Sets the focus to the beginning of the document.       |\n| `'end'`   | Sets the focus to the end of the document.             |\n| `'all'`   | Selects the whole document.                            |\n| `Number`  | Sets the focus to a specific position in the document. |\n| `true`    | Enables autofocus.                                     |\n| `false`   | Disables autofocus.                                    |\n| `null`    | Disables autofocus.                                    |\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit,\n  ],\n  autofocus: false,\n})\n```\n\n### enableInputRules\nBy default, Tiptap enables all [input rules](/guide/custom-extensions/#input-rules). With `enableInputRules` you can control that.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n  ],\n  enableInputRules: false,\n})\n```\n\nAlternatively you can allow only specific input rules.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Link from '@tiptap/extension-link'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n    Link,\n  ],\n  // pass an array of extensions or extension names\n  // to allow only specific input rules\n  enableInputRules: [Link, 'horizontalRule'],\n})\n```\n\n### enablePasteRules\nBy default, Tiptap enables all [paste rules](/guide/custom-extensions/#paste-rules). With `enablePasteRules` you can control that.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n  ],\n  enablePasteRules: false,\n})\n```\n\nAlternatively you can allow only specific paste rules.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Link from '@tiptap/extension-link'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [\n    StarterKit,\n    Link,\n  ],\n  // pass an array of extensions or extension names\n  // to allow only specific paste rules\n  enablePasteRules: [Link, 'horizontalRule'],\n})\n```\n\n### injectCSS\nBy default, Tiptap injects [a little bit of CSS](https://github.com/ueberdosis/tiptap/tree/main/packages/core/src/style.ts). With `injectCSS` you can disable that.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit,\n  ],\n  injectCSS: false,\n})\n```\n\n### injectNonce\nWhen you use a [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) with `nonce`, you can specify a `nonce` to be added to dynamically created elements. Here is an example:\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit,\n  ],\n  injectCSS: true,\n  injectNonce: \"your-nonce-here\"\n})\n```\n\n### editorProps\nFor advanced use cases, you can pass `editorProps` which will be handled by [ProseMirror](https://prosemirror.net/docs/ref/#view.EditorProps). You can use it to override various editor events or change editor DOM element attributes, for example to add some Tailwind classes. Here is an example:\n\n```js\nnew Editor({\n  // Learn more: https://prosemirror.net/docs/ref/#view.EditorProps\n  editorProps: {\n    attributes: {\n      class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none',\n    },\n    transformPastedText(text) {\n      return text.toUpperCase()\n    }\n  }\n})\n```\n\nYou can use that to hook into event handlers and pass - for example - a custom paste handler, too.\n\n### parseOptions\nPassed content is parsed by ProseMirror. To hook into the parsing, you can pass `parseOptions` which are then handled by [ProseMirror](https://prosemirror.net/docs/ref/#model.ParseOptions).\n\n```js\nnew Editor({\n  // Learn more: https://prosemirror.net/docs/ref/#model.ParseOptions\n  parseOptions: {\n    preserveWhitespace: 'full',\n  },\n})\n```\n"
    },
    {
        "url": "./api/introduction.md",
        "date": "2024-01-17",
        "contents": "# Introduction\nTiptap is a friendly wrapper around [ProseMirror](https://ProseMirror.net). Although Tiptap tries to hide most of the complexity of ProseMirror, it’s built on top of its APIs and we recommend you to read through the [ProseMirror Guide](https://ProseMirror.net/docs/guide/) for advanced usage.\n\n### Structure\nProseMirror works with a strict [Schema](/api/schema), which defines the allowed structure of a document. A document is a tree of headings, paragraphs and others elements, so called nodes. Marks can be attached to a node, e. g. to emphasize part of it. [Commands](/api/commands) change that document programmatically.\n\n### Content\nThe document is stored in a state. All changes are applied as transactions to the state. The state has details about the current content, cursor position and selection. You can hook into a few different [events](/api/events), for example to alter transactions before they get applied.\n\n### Extensions\nExtensions add [nodes](/api/nodes), [marks](/api/marks) and/or [functionalities](/api/extensions) to the editor. A lot of those extensions bound their commands to common [keyboard shortcuts](/api/keyboard-shortcuts).\n\n## Vocabulary\nProseMirror has its own vocabulary and you’ll stumble upon all those words now and then. Here is a short overview of the most common words we use in the documentation.\n\n| Word        | Description                                                              |\n| ----------- | ------------------------------------------------------------------------ |\n| Schema      | Configures the structure your content can have.                          |\n| Document    | The actual content in your editor.                                       |\n| State       | Everything to describe the current content and selection of your editor. |\n| Transaction | A change to the state (updated selection, content, …)                    |\n| Extension   | Registers new functionality.                                            |\n| Node        | A type of content, for example a heading or a paragraph.                 |\n| Mark        | Can be applied to nodes, for example for inline formatting.              |\n| Command     | Execute an action inside the editor, that somehow changes the state.     |\n| Decoration  | Styling on top of the document, for example to highlight mistakes.       |\n\n"
    },
    {
        "url": "./api/nodes.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Nodes\n\n## Introduction\nIf you think of the document as a tree, then nodes are just a type of content in that tree. Examples of nodes are paragraphs, headings, or code blocks. But nodes don’t have to be blocks. They can also be rendered inline with the text, for example for **@mentions**.\n\n## List of supported nodes\n| Title                                        | StarterKit ([view](/api/extensions/starter-kit)) | Source Code                                                                                  |\n| -------------------------------------------- | ------------------------------------------------ | -------------------------------------------------------------------------------------------- |\n| [Blockquote](/api/nodes/blockquote)          | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-blockquote/)      |\n| [BulletList](/api/nodes/bullet-list)         | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bullet-list/)     |\n| [CodeBlock](/api/nodes/code-block)           | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-code-block/)      |\n| [Details](/api/nodes/details)                | –                                                | Requires a Tiptap Pro subscription                                                           |\n| [DetailsSummary](/api/nodes/details-summary) | –                                                | Requires a Tiptap Pro subscription                                                           |\n| [DetailsContent](/api/nodes/details-content) | –                                                | Requires a Tiptap Pro subscription                                                           |\n| [Document](/api/nodes/document)              | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-document/)        |\n| [Emoji](/api/nodes/emoji)                    | –                                                | Requires a Tiptap Pro subscription                                                           |\n| [HardBreak](/api/nodes/hard-break)           | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-hard-break/)      |\n| [Heading](/api/nodes/heading)                | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-heading/)         |\n| [HorizontalRule](/api/nodes/horizontal-rule) | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-horizontal-rule/) |\n| [Image](/api/nodes/image)                    | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-image/)           |\n| [ListItem](/api/nodes/list-item)             | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-list-item/)       |\n| [Mention](/api/nodes/mention)                | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-mention/)         |\n| [OrderedList](/api/nodes/ordered-list)       | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-ordered-list/)    |\n| [Paragraph](/api/nodes/paragraph)            | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-paragraph/)       |\n| [Table](/api/nodes/table)                    | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table/)           |\n| [TableRow](/api/nodes/table-row)             | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table-row/)       |\n| [TableCell](/api/nodes/table-cell)           | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table-cell/)      |\n| [TaskList](/api/nodes/task-list)             | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-task-list/)       |\n| [TaskItem](/api/nodes/task-item)             | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-task-item/)       |\n| [Text](/api/nodes/text)                      | Included                                         | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text/)            |\n| [YouTube](/api/nodes/youtube)                | –                                                | [GitHub](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-youtube/)         |\n\n## Create a new node\nYou’re free to create your own nodes for Tiptap. Here is the boilerplate code that’s need to create and register your own node:\n\n```js\nimport { Node } from '@tiptap/core'\n\nconst CustomNode = Node.create({\n  // Your code here\n})\n\nconst editor = new Editor({\n  extensions: [\n    // Register your custom node with the editor.\n    CustomNode,\n    // … and don’t forget all other extensions.\n    Document,\n    Paragraph,\n    Text,\n    // …\n  ],\n})\n```\n\nLearn [more about custom extensions in our guide](/guide/custom-extensions).\n"
    },
    {
        "url": "./api/events.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Events\n\n## Introduction\nThe editor fires a few different events that you can hook into. Let’s have a look at all the available events first.\n\n## List of available events\n\n### beforeCreate\nBefore the view is created.\n\n### create\nThe editor is ready.\n\n### update\nThe content has changed.\n\n### selectionUpdate\nThe selection has changed.\n\n### transaction\nThe editor state has changed.\n\n### focus\nThe editor is focused.\n\n### blur\nThe editor isn’t focused anymore.\n\n### destroy\nThe editor is being destroyed.\n\n\n## Register event listeners\nThere are three ways to register event listeners.\n\n### Option 1: Configuration\nYou can define your event listeners on a new editor instance right-away:\n\n```js\nconst editor = new Editor({\n  onBeforeCreate({ editor }) {\n    // Before the view is created.\n  },\n  onCreate({ editor }) {\n    // The editor is ready.\n  },\n  onUpdate({ editor }) {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ editor, transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ editor, event }) {\n    // The editor is focused.\n  },\n  onBlur({ editor, event }) {\n    // The editor isn’t focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n})\n```\n\n### Option 2: Binding\nOr you can register your event listeners on a running editor instance:\n\n#### Bind event listeners\n```js\neditor.on('beforeCreate', ({ editor }) => {\n  // Before the view is created.\n})\n\neditor.on('create', ({ editor }) => {\n  // The editor is ready.\n})\n\neditor.on('update', ({ editor }) => {\n  // The content has changed.\n})\n\neditor.on('selectionUpdate', ({ editor }) => {\n  // The selection has changed.\n})\n\neditor.on('transaction', ({ editor, transaction }) => {\n  // The editor state has changed.\n})\n\neditor.on('focus', ({ editor, event }) => {\n  // The editor is focused.\n})\n\neditor.on('blur', ({ editor, event }) => {\n  // The editor isn’t focused anymore.\n})\n\neditor.on('destroy', () => {\n  // The editor is being destroyed.\n})\n```\n\n#### Unbind event listeners\nIf you need to unbind those event listeners at some point, you should register your event listeners with `.on()` and unbind them with `.off()` then.\n\n```js\nconst onUpdate = () => {\n  // The content has changed.\n}\n\n// Bind …\neditor.on('update', onUpdate)\n\n// … and unbind.\neditor.off('update', onUpdate)\n```\n\n### Option 3: Extensions\nMoving your event listeners to custom extensions (or nodes, or marks) is also possible. Here’s how that would look like:\n\n```js\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  onBeforeCreate({ editor }) {\n    // Before the view is created.\n  },\n  onCreate({ editor }) {\n    // The editor is ready.\n  },\n  onUpdate({ editor }) {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ editor, transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ editor, event }) {\n    // The editor is focused.\n  },\n  onBlur({ editor, event }) {\n    // The editor isn’t focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n})\n```\n"
    },
    {
        "url": "./api/marks/subscript.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Write slightly below the normal line to show you’re unique.\nicon: subscript\n---\n\n# Subscript\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-subscript.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-subscript)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-subscript.svg)](https://npmcharts.com/compare/@tiptap/extension-subscript?minimal=true)\n\nUse this extension to render text in <sub>subscript</sub>. If you pass `<sub>` or text with `vertical-align: sub` as inline style in the editor’s initial content, both will be rendered accordingly.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<sub>` HTML tags when reading contents of the `Editor` instance. All text in subscript, regardless of the method will be normalized to `<sub>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-subscript\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nSubscript.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setSubscript()\nMark text as subscript.\n\n```js\neditor.commands.setSubscript()\n```\n\n### toggleSubscript()\nToggle subscript mark.\n\n```js\neditor.commands.toggleSubscript()\n```\n\n### unsetSubscript()\nRemove subscript mark.\n\n```js\neditor.commands.unsetSubscript()\n```\n\n## Keyboard shortcuts\n| Command           | Windows/Linux      | macOS          |\n| ----------------- | ------------------ | -------------- |\n| toggleSubscript() | `Control`&nbsp;`,` | `Cmd`&nbsp;`,` |\n\n## Source code\n[packages/extension-subscript/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-subscript/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Subscript\n"
    },
    {
        "url": "./api/marks/bold.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Make your text bold and let it stand out.\nicon: bold\n---\n\n# Bold\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-bold.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-bold)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-bold.svg)](https://npmcharts.com/compare/@tiptap/extension-bold?minimal=true)\n\nUse this extension to render text in **bold**. If you pass `<strong>`, `<b>` tags, or text with inline `style` attributes setting the `font-weight` CSS rule in the editor’s initial content, they all will be rendered accordingly.\n\nType `**two asterisks**` or `__two underlines__` and it will magically transform to **bold** text while you type.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<strong>` HTML tags when reading contents of the `Editor` instance. All text marked bold, regardless of the method will be normalized to `<strong>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-bold\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nBold.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setBold()\nMark text as bold.\n\n```js\neditor.commands.setBold()\n```\n\n### toggleBold()\nToggle the bold mark.\n\n```js\neditor.commands.toggleBold()\n```\n\n### unsetBold()\nRemove the bold mark.\n\n```js\neditor.commands.unsetBold()\n```\n\n## Keyboard shortcuts\n| Command      | Windows/Linux      | macOS          |\n| ------------ | ------------------ | -------------- |\n| toggleBold() | `Control`&nbsp;`B` | `Cmd`&nbsp;`B` |\n\n## Source code\n[packages/extension-bold/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bold/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Bold\n"
    },
    {
        "url": "./api/marks/highlight.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Make it look nerdier with some colorful text highlights.\nicon: mark-pen-line\n---\n\n# Highlight\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-highlight.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-highlight)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-highlight.svg)](https://npmcharts.com/compare/@tiptap/extension-highlight?minimal=true)\n\nUse this extension to render highlighted text with `<mark>`. You can use only default `<mark>` HTML tag, which has a yellow background color by default, or apply different colors.\n\nType `==two equal signs==` and it will magically transform to <mark>highlighted</mark> text while you type.\n\n## Installation\n```bash\nnpm install @tiptap/extension-highlight\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nHighlight.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### multicolor\nAdd support for multiple colors.\n\nDefault: `false`\n\n```js\nHighlight.configure({\n  multicolor: true,\n})\n```\n\n## Commands\n\n### setHighlight()\nMark text as highlighted.\n\n```js\neditor.commands.setHighlight()\neditor.commands.setHighlight({ color: '#ffcc00' })\n```\n\n### toggleHighlight()\nToggle a text highlight.\n\n```js\neditor.commands.toggleHighlight()\neditor.commands.toggleHighlight({ color: '#ffcc00' })\n```\n\n### unsetHighlight()\n Removes the highlight.\n\n```js\neditor.commands.unsetHighlight()\n```\n\n\n## Keyboard shortcuts\n| Command           | Windows/Linux                   | macOS                       |\n| ----------------- | ------------------------------- | --------------------------- |\n| toggleHighlight() | `Control`&nbsp;`Shift`&nbsp;`H` | `Cmd`&nbsp;`Shift`&nbsp;`H` |\n\n## Source code\n[packages/extension-highlight/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-highlight/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Highlight\n"
    },
    {
        "url": "./api/marks/italic.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Helps to emphasize your text, doesn’t bring you closer to Italy though.\nicon: italic\n---\n\n# Italic\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-italic.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-italic)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-italic.svg)](https://npmcharts.com/compare/@tiptap/extension-italic?minimal=true)\n\nUse this extension to render text in *italic*. If you pass `<em>`, `<i>` tags, or text with inline `style` attributes setting `font-style: italic` in the editor’s initial content, they all will be rendered accordingly.\n\nType `*one asterisk*` or `_one underline_` and it will magically transform to *italic* text while you type.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<em>` HTML tags when reading contents of the `Editor` instance. All text marked italic, regardless of the method will be normalized to `<em>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-italic\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nItalic.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setItalic()\nMark the text italic.\n\n```js\neditor.commands.setItalic()\n```\n\n### toggleItalic()\nToggle the italic mark.\n\n```js\neditor.commands.toggleItalic()\n```\n\n### unsetItalic()\nRemove the italic mark.\n\n```js\neditor.commands.unsetItalic()\n```\n\n## Keyboard shortcuts\n| Command        | Windows/Linux      | macOS          |\n| -------------- | ------------------ | -------------- |\n| toggleItalic() | `Control`&nbsp;`I` | `Cmd`&nbsp;`I` |\n\n## Source code\n[packages/extension-italic/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-italic/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Italic\n"
    },
    {
        "url": "./api/marks/strike.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Cut through the words you wrote if you’re too afraid to delete it.\nicon: strikethrough\n---\n\n# Strike\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-strike.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-strike)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-strike.svg)](https://npmcharts.com/compare/@tiptap/extension-strike?minimal=true)\n\nUse this extension to render ~~striked text~~. If you pass `<s>`, `<del>`, `<strike>` tags, or text with inline `style` attributes setting `text-decoration: line-through` in the editor’s initial content, they all will be rendered accordingly.\n\nType <code>&Tilde;&Tilde;text between tildes&Tilde;&Tilde;</code> and it will be magically ~~striked through~~ while you type.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<s>` HTML tags when reading contents of the `Editor` instance. All text striked through, regardless of the method will be normalized to `<s>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-strike\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nStrike.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setStrike()\nMark text as striked.\n\n```js\neditor.commands.setStrike()\n```\n\n### toggleStrike()\nToggle strike mark.\n\n```js\neditor.commands.toggleStrike()\n```\n\n### unsetStrike()\nRemove strike mark.\n\n```js\neditor.commands.unsetStrike()\n```\n\n## Keyboard shortcuts\n| Command        | Windows/Linux                   | macOS                       |\n| -------------- | ------------------------------- | --------------------------- |\n| toggleStrike() | `Control`&nbsp;`Shift`&nbsp;`X` | `Cmd`&nbsp;`Shift`&nbsp;`X` |\n\n## Source code\n[packages/extension-strike/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-strike/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Strike\n"
    },
    {
        "url": "./api/marks/link.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Link it, link it good, link it real good (and don’t forget the href).\nicon: link\n---\n\n# Link\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-link.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-link)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-link.svg)](https://npmcharts.com/compare/@tiptap/extension-link?minimal=true)\n\nThe Link extension adds support for `<a>` tags to the editor. The extension is headless too, there is no actual UI to add, modify or delete links. The usage example below uses the native JavaScript prompt to show you how that could work.\n\nIn a real world application, you would probably add a more sophisticated user interface.\n\nPasted URLs will be transformed to links automatically.\n\n## Installation\n```bash\nnpm install @tiptap/extension-link\n```\n\n## Settings\n\n### protocols\nAdditional custom protocols you would like to be recognized as links.\n\nDefault: `[]`\n\n```js\nLink.configure({\n  protocols: ['ftp', 'mailto'],\n})\n```\n\nBy default, [linkify](https://linkify.js.org/docs/) adds `//` to the end of a protocol however this behavior can be changed by passing `optionalSlashes` option\n```js\nLink.configure({\n  protocols: [\n    {\n      scheme: 'tel',\n      optionalSlashes: true\n    }\n  ]\n})\n```\n\n### autolink\nIf enabled, it adds links as you type.\n\nDefault: `true`\n\n```js\nLink.configure({\n  autolink: false,\n})\n```\n\n### openOnClick\nIf enabled, links will be opened on click.\n\nDefault: `true`\n\n```js\nLink.configure({\n  openOnClick: false,\n})\n```\n\n### linkOnPaste\nAdds a link to the current selection if the pasted content only contains an url.\n\nDefault: `true`\n\n```js\nLink.configure({\n  linkOnPaste: false,\n})\n```\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nLink.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n#### Removing and overriding existing html attributes\n\nYou can add `rel: null` to HTMLAttributes to remove the default `rel=\"noopener noreferrer nofollow\"`. You can also override the default by using `rel: \"your-value\"`.\n\nThis can also be used to change the `target` from the default value of `_blank`.\n\n```js\nLink.configure({\n  HTMLAttributes: {\n    // Change rel to different value\n    // Allow search engines to follow links(remove nofollow)\n    rel: 'noopener noreferrer',\n    // Remove target entirely so links open in current tab\n    target: null,\n  },\n})\n```\n\n### validate\nA function that validates every autolinked link. If it exists, it will be called with the link href as argument. If it returns `false`, the link will be removed.\n\nCan be used to set rules for example excluding or including certain domains, tlds, etc.\n\n```js\n// only autolink urls with a protocol\nLink.configure({\n  validate: href => /^https?:\\/\\//.test(href),\n})\n```\n\n## Commands\n\n### setLink()\nLinks the selected text.\n\n```js\neditor.commands.setLink({ href: 'https://example.com' })\neditor.commands.setLink({ href: 'https://example.com', target: '_blank' })\n```\n\n### toggleLink()\nAdds or removes a link from the selected text.\n\n```js\neditor.commands.toggleLink({ href: 'https://example.com' })\neditor.commands.toggleLink({ href: 'https://example.com', target: '_blank' })\n```\n\n### unsetLink()\nRemoves a link.\n\n```js\neditor.commands.unsetLink()\n```\n\n## Keyboard shortcuts\n:::warning Doesn’t have a keyboard shortcut\nThis extension doesn’t bind a specific keyboard shortcut. You would probably open your custom UI on `Mod-k` though.\n:::\n\n## Get the current value\nDid you know that you can use [`getAttributes`](/api/editor#get-attributes) to find out which attributes, for example which href, is currently set? Don’t confuse it with a [command](/api/commands) (which changes the state), it’s just a method. Here is how that could look like:\n\n```js\nthis.editor.getAttributes('link').href\n```\n\n## Source code\n[packages/extension-link/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-link/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Link\n"
    },
    {
        "url": "./api/marks/text-style.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Useless extension, just adds <span> tags (required by other extensions though).\nicon: palette-line\n---\n\n# TextStyle\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-text-style.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-text-style)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-text-style.svg)](https://npmcharts.com/compare/@tiptap/extension-text-style?minimal=true)\n\nThis mark renders a `<span>` HTML tag and enables you to add a list of styling related attributes, for example font-family, font-size, or color. The extension doesn’t add any styling attribute by default, but other extensions use it as the foundation, for example [`FontFamily`](/api/extensions/font-family) or [`Color`](/api/extensions/color).\n\n## Installation\n```bash\nnpm install @tiptap/extension-text-style\n```\n\n## Commands\n\n### removeEmptyTextStyle()\nRemove `<span>` tags without an inline style.\n\n```js\neditor.command.removeEmptyTextStyle()\n```\n\n## Source code\n[packages/extension-text-style/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text-style/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/TextStyle\n"
    },
    {
        "url": "./api/marks/code.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Developers love to add some inline code to their texts.\nicon: code-view\n---\n\n# Code\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-code.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-code)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-code.svg)](https://npmcharts.com/compare/@tiptap/extension-code?minimal=true)\n\nThe Code extensions enables you to use the `<code>` HTML tag in the editor. If you paste in text with `<code>` tags it will rendered accordingly.\n\nType something with <code>\\`back-ticks around\\`</code> and it will magically transform to `inline code` while you type.\n\n## Installation\n```bash\nnpm install @tiptap/extension-code\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nCode.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setCode()\nMark text as inline code.\n\n```js\neditor.commands.setCode()\n```\n\n### toggleCode()\nToggle inline code mark.\n\n```js\neditor.commands.toggleCode()\n```\n\n### unsetCode()\nRemove inline code mark.\n\n```js\neditor.commands.unsetCode()\n```\n\n## Keyboard shortcuts\n| Command      | Windows/Linux      | macOS          |\n| ------------ | ------------------ | -------------- |\n| toggleCode() | `Control`&nbsp;`E` | `Cmd`&nbsp;`E` |\n\n## Source code\n[packages/extension-code/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-code/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Code\n"
    },
    {
        "url": "./api/marks/superscript.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Write slightly above the normal line to show you’re just next level.\nicon: superscript\n---\n\n# Superscript\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-superscript.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-superscript)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-superscript.svg)](https://npmcharts.com/compare/@tiptap/extension-superscript?minimal=true)\n\nUse this extension to render text in <sup>superscript</sup>. If you pass `<sup>` or text with `vertical-align: super` as inline style in the editor’s initial content, both will be rendered accordingly.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<sup>` HTML tags when reading contents of the `Editor` instance. All text in superscript, regardless of the method will be normalized to `<sup>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-superscript\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nSuperscript.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setSuperscript()\nMark text as superscript.\n\n```js\neditor.commands.setSuperscript()\n```\n\n### toggleSuperscript()\nToggle superscript mark.\n\n```js\neditor.commands.toggleSuperscript()\n```\n\n### unsetSuperscript()\nRemove superscript mark.\n\n```js\neditor.commands.unsetSuperscript()\n```\n\n## Keyboard shortcuts\n| Command             | Windows/Linux      | macOS          |\n| ------------------- | ------------------ | -------------- |\n| toggleSuperscript() | `Control`&nbsp;`.` | `Cmd`&nbsp;`.` |\n\n## Source code\n[packages/extension-superscript/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-superscript/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Superscript\n"
    },
    {
        "url": "./api/marks/underline.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add a line below your text to make it look more … underlined.\nicon: underline\n---\n\n# Underline\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-underline.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-underline)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-underline.svg)](https://npmcharts.com/compare/@tiptap/extension-underline?minimal=true)\n\nUse this extension to render text <u>underlined</u>. If you pass `<u>` tags, or text with inline `style` attributes setting `text-decoration: underline` in the editor’s initial content, they all will be rendered accordingly.\n\nBe aware that underlined text in the internet usually indicates that it’s a clickable link. Don’t confuse your users with underlined text.\n\n::: warning Restrictions\nThe extension will generate the corresponding `<u>` HTML tags when reading contents of the `Editor` instance. All text marked underlined, regardless of the method will be normalized to `<u>` HTML tags.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-underline\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nUnderline.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setUnderline()\nMarks a text as underlined.\n\n```js\neditor.commands.setUnderline()\n```\n\n### toggleUnderline()\nToggles an underline mark.\n\n```js\neditor.commands.toggleUnderline()\n```\n\n### unsetUnderline()\nRemoves an underline mark.\n\n```js\neditor.commands.unsetUnderline()\n```\n\n## Keyboard shortcuts\n| Command           | Windows/Linux      | macOS          |\n| ----------------- | ------------------ | -------------- |\n| toggleUnderline() | `Control`&nbsp;`U` | `Cmd`&nbsp;`U` |\n\n## Source code\n[packages/extension-underline/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-underline/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Marks/Underline\n"
    },
    {
        "url": "./api/nodes/document.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: \"Everyone needs it, nobody talks about it: the Document extension.\"\nicon: file-line\n---\n\n# Document\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-document.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-document)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-document.svg)](https://npmcharts.com/compare/@tiptap/extension-document?minimal=true)\n\n**The `Document` extension is required**, no matter what you build with Tiptap. It’s a so called “topNode”, a node that’s the home to all other nodes. Think of it like the `<body>` tag for your document.\n\nThe node is very tiny though. It defines a name of the node (`doc`), is configured to be a top node (`topNode: true`) and that it can contain multiple other nodes (`block+`). That’s all. But have a look yourself:\n\n:::warning Breaking Change from 1.x → 2.x\nTiptap 1 tried to hide that node from you, but it has always been there. You have to explicitly import it from now on (or use `StarterKit`).\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-document\n```\n\n## Source code\n[packages/extension-document/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-document/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Document\n"
    },
    {
        "url": "./api/nodes/text.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: No text editor without text, so better make sure to install that one.\nicon: text\n---\n\n# Text\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-text.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-text)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-text.svg)](https://npmcharts.com/compare/@tiptap/extension-text?minimal=true)\n\n**The `Text` extension is required**, at least if you want to work with text of any kind and that’s very likely. This extension is a little bit different, it doesn’t even render HTML. It’s plain text, that’s all.\n\n:::warning Breaking Change from 1.x → 2.x\nTiptap 1 tried to hide that node from you, but it has always been there. You have to explicitly import it from now on (or use `StarterKit`).\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-text\n```\n\n## Source code\n[packages/extension-text/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Text\n"
    },
    {
        "url": "./api/nodes/hard-break.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Sometimes we all need a break, even if it’s just a line break.\nicon: text-wrap\n---\n\n# HardBreak\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-hard-break.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-hard-break)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-hard-break.svg)](https://npmcharts.com/compare/@tiptap/extension-hard-break?minimal=true)\n\nThe HardBreak extensions adds support for the `<br>` HTML tag, which forces a line break.\n\n## Installation\n```bash\nnpm install @tiptap/extension-hard-break\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nHardBreak.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### keepMarks\nDecides whether to keep marks after a line break. Based on the `keepOnSplit` option for marks.\n\nDefault: `true`\n\n```js\nHardBreak.configure({\n  keepMarks: false,\n})\n```\n\n## Commands\n\n### setHardBreak()\nAdd a line break.\n\n```js\neditor.commands.setHardBreak()\n```\n\n## Keyboard shortcuts\n| Command      | Windows/Linux                                  | macOS                                      |\n| ------------ | ---------------------------------------------- | ------------------------------------------ |\n| setHardBreak | `Shift`&nbsp;`Enter`<br>`Control`&nbsp;`Enter` | `Shift`&nbsp;`Enter`<br>`Cmd`&nbsp;`Enter` |\n\n## Source code\n[packages/extension-hard-break/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-hard-break/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/HardBreak\n"
    },
    {
        "url": "./api/nodes/paragraph.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Mom, look! I wrote a paragraph on the Internet.\nicon: paragraph\n---\n\n# Paragraph\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-paragraph.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-paragraph)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-paragraph.svg)](https://npmcharts.com/compare/@tiptap/extension-paragraph?minimal=true)\n\nYes, the schema is very strict. Without this extension you won’t even be able to use paragraphs in the editor.\n\n:::warning Breaking Change from 1.x → 2.x\nTiptap 1 tried to hide that node from you, but it has always been there. You have to explicitly import it from now on (or use `StarterKit`).\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-paragraph\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nParagraph.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setParagraph()\nTransforms all selected nodes to paragraphs.\n\n```js\neditor.commands.setParagraph()\n```\n\n## Keyboard shortcuts\n| Command        | Windows/Linux                 | macOS                     |\n| -------------- | ----------------------------- | ------------------------- |\n| setParagraph() | `Control`&nbsp;`Alt`&nbsp;`0` | `Cmd`&nbsp;`Alt`&nbsp;`0` |\n\n## Source code\n[packages/extension-paragraph/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-paragraph/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Paragraph\n"
    },
    {
        "url": "./api/nodes/blockquote.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Quoting other people will make you look clever.\nicon: double-quotes-l\n---\n\n# Blockquote\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-blockquote.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-blockquote)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-blockquote.svg)](https://npmcharts.com/compare/@tiptap/extension-blockquote?minimal=true)\n\nThe Blockquote extension enables you to use the `<blockquote>` HTML tag in the editor. This is great to … show quotes in the editor, you know?\n\nType <code>>&nbsp;</code> at the beginning of a new line and it will magically transform to a blockquote.\n\n## Installation\n```bash\nnpm install @tiptap/extension-blockquote\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nBlockquote.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n### setBlockquote()\nWrap content in a blockquote.\n\n```js\neditor.commands.setBlockquote()\n```\n\n### toggleBlockquote()\nWrap or unwrap a blockquote.\n\n```js\neditor.commands.toggleBlockquote()\n```\n\n### unsetBlockquote()\nUnwrap a blockquote.\n\n```js\neditor.commands.unsetBlockquote()\n```\n\n## Keyboard shortcuts\n| Command           | Windows/Linux                   | macOS                       |\n| ----------------- | ------------------------------- | --------------------------- |\n| Toggle Blockquote | `Control`&nbsp;`Shift`&nbsp;`B` | `Cmd`&nbsp;`Shift`&nbsp;`B` |\n\n## Source code\n[packages/extension-blockquote/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-blockquote/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Blockquote\n"
    },
    {
        "url": "./api/nodes/heading.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Structure the content with headings (comes with 6 different levels or less).\nicon: h-1\n---\n\n# Heading\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-heading.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-heading)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-heading.svg)](https://npmcharts.com/compare/@tiptap/extension-heading?minimal=true)\n\nThe Heading extension adds support for headings of different levels. Headings are rendered with `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` or `<h6>` HTML tags. By default all six heading levels (or styles) are enabled, but you can pass an array to only allow a few levels. Check the usage example to see how this is done.\n\nType <code>#&nbsp;</code> at the beginning of a new line and it will magically transform to a heading, same for <code>##&nbsp;</code>, <code>###&nbsp;</code>, <code>####&nbsp;</code>, <code>#####&nbsp;</code> and <code>######&nbsp;</code>.\n\n## Installation\n```bash\nnpm install @tiptap/extension-heading\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nHeading.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### levels\nSpecifies which heading levels are supported.\n\nDefault: `[1, 2, 3, 4, 5, 6]`\n\n```js\nHeading.configure({\n  levels: [1, 2],\n})\n```\n\n## Commands\n\n### setHeading()\nCreates a heading node with the specified level.\n\n```js\neditor.commands.setHeading({ level: 1 })\n```\n\n### toggleHeading()\nToggles a heading node with the specified level.\n\n```js\neditor.commands.toggleHeading({ level: 1 })\n```\n\n## Keyboard shortcuts\n| Command                     | Windows/Linux                 | macOS                     |\n| --------------------------- | ----------------------------- | ------------------------- |\n| toggleHeading({ level: 1 }) | `Control`&nbsp;`Alt`&nbsp;`1` | `Cmd`&nbsp;`Alt`&nbsp;`1` |\n| toggleHeading({ level: 2 }) | `Control`&nbsp;`Alt`&nbsp;`2` | `Cmd`&nbsp;`Alt`&nbsp;`2` |\n| toggleHeading({ level: 3 }) | `Control`&nbsp;`Alt`&nbsp;`3` | `Cmd`&nbsp;`Alt`&nbsp;`3` |\n| toggleHeading({ level: 4 }) | `Control`&nbsp;`Alt`&nbsp;`4` | `Cmd`&nbsp;`Alt`&nbsp;`4` |\n| toggleHeading({ level: 5 }) | `Control`&nbsp;`Alt`&nbsp;`5` | `Cmd`&nbsp;`Alt`&nbsp;`5` |\n| toggleHeading({ level: 6 }) | `Control`&nbsp;`Alt`&nbsp;`6` | `Cmd`&nbsp;`Alt`&nbsp;`6` |\n\n## Source code\n[packages/extension-heading/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-heading/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Heading\n"
    },
    {
        "url": "./api/nodes/task-list.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Adds support for tasks (doesn’t make sure you actually complete them though).\nicon: list-check\n---\n\n# TaskList\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-task-list.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-task-list)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-task-list.svg)](https://npmcharts.com/compare/@tiptap/extension-task-list?minimal=true)\n\nThis extension enables you to use task lists in the editor. They are rendered as `<ul data-type=\"taskList\">`. This implementation doesn’t require any framework, it’s using Vanilla JavaScript only.\n\nType <code>[ ]&nbsp;</code> or <code>[x]&nbsp;</code> at the beginning of a new line and it will magically transform to a task list.\n\n## Installation\n```bash\nnpm install @tiptap/extension-task-list @tiptap/extension-task-item\n```\n\nThis extension requires the [`TaskItem`](/api/nodes/task-item) extension.\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nTaskList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### itemTypeName\nSpecify the list item name.\n\nDefault: `'taskItem'`\n\n```js\nTaskList.configure({\n  itemTypeName: 'taskItem',\n})\n```\n\n## Commands\n\n# toggleTaskList()\nToggle a task list.\n\n```js\neditor.commands.toggleTaskList()\n```\n\n## Keyboard shortcuts\n| Command          | Windows/Linux                   | macOS                       |\n| ---------------- | ------------------------------- | --------------------------- |\n| toggleTaskList() | `Control`&nbsp;`Shift`&nbsp;`9` | `Cmd`&nbsp;`Shift`&nbsp;`9` |\n\n## Source code\n[packages/extension-task-list/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-task-list/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/TaskList\n"
    },
    {
        "url": "./api/nodes/image.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add an image (but a beautiful one), when words aren’t enough.\nicon: image-line\n---\n\n# Image\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-image.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-image)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-image.svg)](https://npmcharts.com/compare/@tiptap/extension-image?minimal=true)\n\nUse this extension to render `<img>` HTML tags. By default, those images are blocks. If you want to render images in line with text  set the `inline` option to `true`.\n\n:::warning Restrictions\nThis extension does only the rendering of images. It doesn’t upload images to your server, that’s a whole different story.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-image\n```\n\n## Settings\n\n### inline\nRenders the image node inline, for example in a paragraph tag: `<p><img src=\"spacer.gif\"></p>`. By default images are on the same level as paragraphs.\n\nIt totally depends on what kind of editing experience you’d like to have, but can be useful if you (for example) migrate from Quill to Tiptap.\n\nDefault: `false`\n\n```js\nImage.configure({\n  inline: true,\n})\n```\n\n### allowBase64\nAllow images to be parsed as base64 strings `<img src=\"data:image/jpg;base64...\">`.\n\nDefault: `false`\n\n```js\nImage.configure({\n  allowBase64: true,\n})\n```\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nImage.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setImage()\nMakes the current node an image.\n\n```js\neditor.commands.setImage({ src: 'https://example.com/foobar.png' })\neditor.commands.setImage({ src: 'https://example.com/foobar.png', alt: 'A boring example image', title: 'An example' })\n```\n\n## Source code\n[packages/extension-image/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-image/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Image\n"
    },
    {
        "url": "./api/nodes/horizontal-rule.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Separate what needs to be separated, but use it wisely.\nicon: separator\n---\n\n# HorizontalRule\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-horizontal-rule.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-horizontal-rule)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-horizontal-rule.svg)](https://npmcharts.com/compare/@tiptap/extension-horizontal-rule?minimal=true)\n\nUse this extension to render a `<hr>` HTML tag. If you pass `<hr>` in the editor’s initial content, it’ll be rendered accordingly.\n\nType three dashes (<code>---</code>) or three underscores and a space (<code>___ </code>) at the beginning of a new line and it will magically transform to a horizontal rule.\n\n## Installation\n```bash\nnpm install @tiptap/extension-horizontal-rule\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nHorizontalRule.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setHorizontalRule()\nCreate a horizontal rule.\n\n```js\neditor.commands.setHorizontalRule()\n```\n\n## Source code\n[packages/extension-horizontal-rule/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-horizontal-rule/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/HorizontalRule\n"
    },
    {
        "url": "./api/nodes/table.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: You’re working on something really serious if you need tables inside a text editor.\nicon: table-line\ntableOfContents: true\n---\n\n# Table\n\n## Introduction\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-table.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-table)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-table.svg)](https://npmcharts.com/compare/@tiptap/extension-table?minimal=true)\n\nNothing is as much fun as a good old HTML table. The `Table` extension enables you to add this holy grail of WYSIWYG editing to your editor.\n\nDon’t forget to add a `spacer.gif`. (Just joking. If you don’t know what that is, don’t listen.)\n\n## Installation\n```bash\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\nThis extension requires the [`TableRow`](/api/nodes/table-row), [`TableHeader`](/api/nodes/table-header) and [`TableCell`](/api/nodes/table-cell) nodes.\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nTable.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### resizable\nDefault: `false`\n\n### handleWidth\nDefault: `5`\n\n### cellMinWidth\nDefault: `25`\n\n### View\nDefault: `TableView`\n\n### lastColumnResizable\nDefault: `true`\n\n### allowTableNodeSelection\nDefault: `false`\n\n## Commands\n\n### insertTable()\nCreates a new table, with the specified number of rows and columns, and with a header row (if you tell it to).\n\n```js\neditor.commands.insertTable()\neditor.commands.insertTable({ rows: 3, cols: 3, withHeaderRow: true })\n```\n\n### addColumnBefore()\nAdds a column before the current column.\n\n```js\neditor.commands.addColumnBefore()\n```\n\n### addColumnAfter()\nAdds a column after the current column.\n\n```js\neditor.commands.addColumnAfter()\n```\n\n### deleteColumn()\nDeletes the current column.\n\n```js\neditor.commands.deleteColumn()\n```\n\n### addRowBefore()\nAdds a row above the current row.\n\n```js\neditor.commands.addRowBefore()\n```\n\n### addRowAfter()\nAdds a row below the current row.\n\n```js\neditor.commands.addRowAfter()\n```\n\n### deleteRow()\nDeletes the current row.\n\n```js\neditor.commands.deleteRow()\n```\n\n### deleteTable()\nDeletes the whole table.\n\n```js\neditor.commands.deleteTable()\n```\n\n### mergeCells()\nMerge all selected cells to a single cell.\n\n```js\neditor.commands.mergeCells()\n```\n\n### splitCell()\nSplits the current cell.\n\n```js\neditor.commands.splitCell()\n```\n\n### toggleHeaderColumn()\nMakes the current column a header column.\n\n```js\neditor.commands.toggleHeaderColumn()\n```\n\n### toggleHeaderRow()\nMakes the current row a header row.\n\n```js\neditor.commands.toggleHeaderRow()\n```\n\n### toggleHeaderCell()\nMakes the current cell a header cell.\n\n```js\neditor.commands.toggleHeaderCell()\n```\n\n### mergeOrSplit()\nIf multiple cells are selected, they are merged. If a single cell is selected, the cell is splitted into two cells.\n\n```js\neditor.commands.mergeOrSplit()\n```\n\n### setCellAttribute()\nSets the given attribute for the current cell. Can be whatever you define on the [`TableCell`](/api/nodes/table-cell) extension, for example a background color. Just make sure to register [your custom attribute](/guide/custom-extensions#attributes) first.\n\n```js\neditor.commands.setCellAttribute('customAttribute', 'value')\neditor.commands.setCellAttribute('backgroundColor', '#000')\n```\n\n### goToNextCell()\nGo the next cell.\n\n```js\neditor.commands.goToNextCell()\n```\n\n### goToPreviousCell()\nGo to the previous cell.\n\n```js\neditor.commands.goToPreviousCell()\n```\n\n### fixTables()\nInspects all tables in the document and fixes them, if necessary.\n\n```js\neditor.commands.fixTables()\n```\n\n## Source code\n[packages/extension-table/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Table\n"
    },
    {
        "url": "./api/nodes/mention.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Ping all your people @marijn @kevin\nicon: at-line\n---\n\n# Mention\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-mention.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-mention)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-mention.svg)](https://npmcharts.com/compare/@tiptap/extension-mention?minimal=true)\n\nHonestly, the mention node is amazing. It adds support for `@mentions`, for example to ping users, *and* provides full control over the rendering.\n\nLiterally everything can be customized. You can pass a custom component for the rendering.  All examples use `.filter()` to search through items, but feel free to send async queries to an API or add a more advanced library like [fuse.js](https://fusejs.io/) to your project.\n\n## Installation\n```bash\nnpm install @tiptap/extension-mention\n```\n\n## Dependencies\nTo place the popups correctly, we’re using [tippy.js](https://atomiks.github.io/tippyjs/) in all our examples. You are free to bring your own library, but if you’re fine with it, just install what we use:\n\n```bash\nnpm install tippy.js\n```\n\nSince 2.0.0-beta.193 we marked the `@tiptap/suggestion` as a peer dependency. That means, you will need to install it manually.\n\n```bash\nnpm install @tiptap/suggestion\n```\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nMention.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### renderText\nDefine how a mention text should be rendered.\n\n```js\nMention.configure({\n  renderText({ options, node }) {\n    return `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`\n  }\n})\n```\n\n### renderHTML\nDefine how a mention html element should be rendered, this is useful if you want to render an element other than `span` (e.g `a`)\n\n```js\nMention.configure({\n  renderHTML({ options, node }) {\n    return [\n      \"a\",\n      { href: '/profile/1' },\n      `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`,\n      ];\n  }\n})\n```\n### suggestion\n[Read more](/api/utilities/suggestion)\n\n```js\nMention.configure({\n  suggestion: {\n    // …\n  },\n})\n```\n\n## Source code\n[packages/extension-mention/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-mention/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Mention\n"
    },
    {
        "url": "./api/nodes/bullet-list.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Everything looks more serious with a few bullet points.\nicon: list-unordered\n---\n\n# BulletList\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-bullet-list.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-bullet-list)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-bullet-list.svg)](https://npmcharts.com/compare/@tiptap/extension-bullet-list?minimal=true)\n\nThis extension enables you to use bullet lists in the editor. They are rendered as `<ul>` HTML tags.\n\nType <code>*&nbsp;</code>, <code>-&nbsp;</code> or <code>+&nbsp;</code> at the beginning of a new line and it will magically transform to a bullet list.\n\n## Installation\n```bash\nnpm install @tiptap/extension-bullet-list @tiptap/extension-list-item\n```\n\nThis extension requires the [`ListItem`](/api/nodes/list-item) node.\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nBulletList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### itemTypeName\nSpecify the list item name.\n\nDefault: `'listItem'`\n\n```js\nBulletList.configure({\n  itemTypeName: 'listItem',\n})\n```\n### keepMarks\nDecides whether to keep the marks from a previous line after toggling the list either using `inputRule` or using the button\n\nDefault: `false`\n\n```js\nBulletList.configure({\n  keepMarks: true,\n})\n```\n\n### keepAttributes\nDecides whether to keep the attributes from a previous line after toggling the list either using `inputRule` or using the button\n\nDefault: `false`\n\n```js\nBulletList.configure({\n  keepAttributes: true,\n})\n```\n\n## Commands\n\n### toggleBulletList()\nToggles a bullet list.\n\n```js\neditor.commands.toggleBulletList()\n```\n\n## Keyboard shortcuts\n| Command          | Windows/Linux                   | macOS                       |\n| ---------------- | ------------------------------- | --------------------------- |\n| toggleBulletList | `Control`&nbsp;`Shift`&nbsp;`8` | `Cmd`&nbsp;`Shift`&nbsp;`8` |\n\n## Source code\n[packages/extension-bullet-list/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bullet-list/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/BulletList\n"
    },
    {
        "url": "./api/nodes/youtube.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Your favorite videos and jams - right in your editor!\nicon: youtube-line\n---\n\n# YouTube\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-youtube.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-youtube)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-youtube.svg)](https://npmcharts.com/compare/@tiptap/extension-youtube?minimal=true)\n\nThis extension adds a new YouTube embed node to the editor.\n\n## Installation\n```bash\nnpm install @tiptap/extension-youtube\n```\n\n## Settings\n\n### inline\nControls if the node should be handled inline or as a block.\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  inline: false,\n})\n```\n\n### width\nControls the default width of added videos\n\nDefault: `640`\n\n```js\nYoutube.configure({\n  width: 480,\n})\n```\n\n### height\nControls the default height of added videos\n\nDefault: `480`\n\n```js\nYoutube.configure({\n  height: 320,\n})\n```\n\n### controls\nEnables or disables YouTube video controls\n\nDefault: `true`\n\n```js\nYoutube.configure({\n  controls: false,\n})\n```\n\n### nocookie\nEnables the nocookie mode for YouTube embeds\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  nocookie: true,\n})\n```\n\n### allowFullscreen\nAllows the iframe to be played in fullscreen\n\nDefault: `true`\n\n```js\nYoutube.configure({\n  allowFullscreen: false,\n})\n```\n\n### autoplay\nAllows the iframe to start playing after the player is loaded\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  autoplay: true,\n})\n```\n\n### ccLanguage\nSpecifies the default language that the player will use to display closed captions. Set the parameter's value to an ISO 639-1 two-letter language code. For example, setting it to `es` will cause the captions to be in spanish\n\nDefault: `undefined`\n\n```js\nYoutube.configure({\n  ccLanguage: 'es',\n})\n```\n\n### ccLoadPolicy\nSetting this parameter's value to `true` causes closed captions to be shown by default, even if the user has turned captions off\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  ccLoadPolicy: 'true',\n})\n```\n\n### disableKBcontrols\nDisables the keyboards controls for the iframe player\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  disableKBcontrols: 'true',\n})\n```\n\n### enableIFrameApi\nEnables the player to be controlled via IFrame Player API calls\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  enableIFrameApi: 'true',\n})\n```\n\n### origin\nThis parameter provides an extra security measure for the IFrame API and is only supported for IFrame embeds. If you are using the IFrame API, which means you are setting the `enableIFrameApi` parameter value to `true`, you should always specify your domain as the `origin` parameter value.\n\nDefault: `''`\n\n```js\nYoutube.configure({\n  origin: 'yourdomain.com',\n})\n```\n\n### endTime\nThis parameter specifies the time, measured in seconds from the start of the video, when the player should stop playing the video.\nFor example, setting it to `15` will make the video stop at the 15 seconds mark\n\nDefault: `0`\n\n```js\nYoutube.configure({\n  endTime: '15',\n})\n```\n\n### interfaceLanguage\nSets the player's interface language. The parameter value is an ISO 639-1 two-letter language code. For example, setting it to `fr` will cause the interface to be in french\n\nDefault: `undefined`\n\n```js\nYoutube.configure({\n  interfaceLanguage: 'fr',\n})\n```\n\n### ivLoadPolicy\nSetting this to 1 causes video annotations to be shown by default, whereas setting to 3 causes video annotations to not be shown by default\n\nDefault: `0`\n\n```js\nYoutube.configure({\n  ivLoadPolicy: '3',\n})\n```\n\n### loop\nThis parameter has limited support in IFrame embeds. To loop a single video, set the loop parameter value to `true` and set the playlist parameter value to the same video ID already specified in the Player API URL.\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  loop: 'true',\n})\n```\n\n### playlist\nThis parameter specifies a comma-separated list of video IDs to play.\n\nDefault: `''`\n\n```js\nYoutube.configure({\n  playlist: 'VIDEO_ID_1,VIDEO_ID_2,VIDEO_ID_3,...,VIDEO_ID_N',\n})\n```\n\n### modestBranding\nDisables the Youtube logo on the control bar of the player. Note that a small YouTube text label will still display in the upper-right corner of a paused video when the user's mouse pointer hovers over the player\n\nDefault: `false`\n\n```js\nYoutube.configure({\n  modestBranding: 'true',\n})\n```\n\n### progressBarColor\nThis parameter specifies the color that will be used in the player's video progress bar. Note that setting the color parameter to `white` will disable the `modestBranding` parameter\n\nDefault: `undefined`\n\n```js\nYoutube.configure({\n  progressBarColor: 'white',\n})\n```\n\n## Commands\n\n### setYoutubeVideo(options)\nInserts a YouTube iframe embed at the current position\n\n```js\neditor.commands.setYoutubeVideo({\n  src: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n  width: 640,\n  height: 480,\n})\n```\n\n#### Options\n\n| Option           | Description                                                             | Optional |\n| ---------------- | ----------------------------------------------------------------------- | -------- |\n| src              | The url of the youtube video. Can be a YouTube or YouTube Music link    |          |\n| width            | The embed width (overrides the default option, optional                 | ✅         |\n| height           | The embed height (overrides the default option, optional                | ✅         |\n\n\n## Source code\n[packages/extension-youtube/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-youtube/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/YouTube\n"
    },
    {
        "url": "./api/nodes/list-item.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Simply does its job. Doesn’t even care if it’s part of a bullet list or an ordered list.\nicon: asterisk\n---\n\n# ListItem\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-list-item.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-list-item)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-list-item.svg)](https://npmcharts.com/compare/@tiptap/extension-list-item?minimal=true)\n\nThe ListItem extension adds support for the `<li>` HTML tag. It’s used for bullet lists and ordered lists and can’t really be used without them.\n\n## Installation\n```bash\nnpm install @tiptap/extension-list-item\n```\n\nThis extension requires the [`BulletList`](/api/nodes/bullet-list) or [`OrderedList`](/api/nodes/ordered-list) node.\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nListItem.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Keyboard shortcuts\n| Command         | Windows/Linux      | macOS              |\n| --------------- | ------------------ | ------------------ |\n| splitListItem() | `Enter`            | `Enter`            |\n| sinkListItem()  | `Tab`              | `Tab`              |\n| liftListItem()  | `Shift`&nbsp;`Tab` | `Shift`&nbsp;`Tab` |\n\n## Source code\n[packages/extension-list-item/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-list-item/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/ListItem\n"
    },
    {
        "url": "./api/nodes/ordered-list.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: If a bullet list doesn’t look serious enough, put some numbers in front of it.\nicon: list-ordered\n---\n\n# OrderedList\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-ordered-list.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-ordered-list)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-ordered-list.svg)](https://npmcharts.com/compare/@tiptap/extension-ordered-list?minimal=true)\n\nThis extension enables you to use ordered lists in the editor. They are rendered as `<ol>` HTML tags.\n\nType <code>1.&nbsp;</code> (or any other number followed by a dot) at the beginning of a new line and it will magically transform to a ordered list.\n\n## Installation\n```bash\nnpm install @tiptap/extension-ordered-list @tiptap/extension-list-item\n```\n\nThis extension requires the [`ListItem`](/api/nodes/list-item) node.\n\n## Settings\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nOrderedList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### itemTypeName\nSpecify the list item name.\n\nDefault: `'listItem'`\n\n```js\nOrderedList.configure({\n  itemTypeName: 'listItem',\n})\n```\n\n### keepMarks\nDecides whether to keep the marks from a previous line after toggling the list either using `inputRule` or using the button\n\nDefault: `false`\n\n```js\nOrderedList.configure({\n  keepMarks: true,\n})\n```\n### keepAttributes\nDecides whether to keep the attributes from a previous line after toggling the list either using `inputRule` or using the button\n\nDefault: `false`\n\n```js\nOrderedList.configure({\n  keepAttributes: true,\n})\n```\n\n## Commands\n\n### toggleOrderedList()\nToggle an ordered list.\n\n```js\neditor.commands.toggleOrderedList()\n```\n\n## Keyboard shortcuts\n| Command           | Windows/Linux                   | macOS                       |\n| ----------------- | ------------------------------- | --------------------------- |\n| toggleOrderedList | `Control`&nbsp;`Shift`&nbsp;`7` | `Cmd`&nbsp;`Shift`&nbsp;`7` |\n\n## Source code\n[packages/extension-ordered-list/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-ordered-list/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/OrderedList\n"
    },
    {
        "url": "./api/nodes/table-cell.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: \"It’s useless without all its other table friends: the table cell.\"\nicon: checkbox-blank-line\n---\n\n# TableCell\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-table-cell.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-table-cell)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-table-cell.svg)](https://npmcharts.com/compare/@tiptap/extension-table-cell?minimal=true)\n\nDon’t try to use tables without table cells. It won’t be fun.\n\n## Installation\n```bash\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\nThis extension requires the [`Table`](/api/nodes/table), [`TableRow`](/api/nodes/table-row) and [`TableHeader`](/api/nodes/table-header) nodes.\n\n## Source code\n[packages/extension-table-cell/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table-cell/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Table\n"
    },
    {
        "url": "./api/nodes/code-block.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: The least code the better, but sometimes you just need multiple lines.\nicon: terminal-box-line\n---\n\n# CodeBlock\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-code-block.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-code-block)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-code-block.svg)](https://npmcharts.com/compare/@tiptap/extension-code-block?minimal=true)\n\nWith the CodeBlock extension you can add fenced code blocks to your documents. It’ll wrap the code in `<pre>` and `<code>` HTML tags.\n\nType <code>&grave;&grave;&grave;&nbsp;</code> (three backticks and a space) or <code>&Tilde;&Tilde;&Tilde;&nbsp;</code> (three tildes and a space) and a code block is instantly added for you. You can even specify the language, try writing <code>&grave;&grave;&grave;css&nbsp;</code>. That should add a `language-css` class to the `<code>`-tag.\n\n::: warning No syntax highlighting\nThe CodeBlock extension doesn’t come with styling and has no syntax highlighting built-in. Try the [CodeBlockLowlight](/api/nodes/code-block-lowlight) extension if you’re looking for code blocks with syntax highlighting.\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-code-block\n```\n\n## Settings\n\n### languageClassPrefix\nAdds a prefix to language classes that are applied to code tags.\n\nDefault: `'language-'`\n\n```js\nCodeBlock.configure({\n  languageClassPrefix: 'language-',\n})\n```\n\n### exitOnTripleEnter\nDefine whether the node should be exited on triple enter.\n\nDefault: `true`\n\n```js\nCodeBlock.configure({\n  exitOnTripleEnter: false,\n})\n```\n\n### exitOnArrowDown\nDefine whether the node should be exited on arrow down if there is no node after it.\n\nDefault: `true`\n\n```js\nCodeBlock.configure({\n  exitOnArrowDown: false,\n})\n```\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nCodeBlock.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n## Commands\n\n### setCodeBlock()\nWrap content in a code block.\n\n```js\neditor.commands.setCodeBlock()\n```\n\n### toggleCodeBlock()\nToggle the code block.\n\n```js\neditor.commands.toggleCodeBlock()\n```\n\n## Keyboard shortcuts\n| Command         | Windows/Linux                 | macOS                     |\n| --------------- | ----------------------------- | ------------------------- |\n| toggleCodeBlock | `Control`&nbsp;`Alt`&nbsp;`C` | `Cmd`&nbsp;`Alt`&nbsp;`C` |\n\n## Source code\n[packages/extension-code-block/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-code-block/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/CodeBlock\n"
    },
    {
        "url": "./api/nodes/table-header.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: \"Tables don’t require a header, but let’s be honest: They look better with it.\"\nicon: t-box-line\n---\n\n# TableHeader\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-table-header.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-table-header)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-table-header.svg)](https://npmcharts.com/compare/@tiptap/extension-table-header?minimal=true)\n\nTable headers are optional. But come on, you want them, don’t you? If you don’t want them, update the `content` attribute of the [`TableRow`](/api/nodes/table-row) extension, like this:\n\n```js\n// Table rows without table headers\nTableRow.extend({\n  content: 'tableCell*',\n})\n```\n\nThis is the default, which allows table headers:\n\n```js\n// Table rows with table headers (default)\nTableRow.extend({\n  content: '(tableCell | tableHeader)*',\n})\n```\n\n## Installation\n```bash\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\nThis extension requires the [`Table`](/api/nodes/table), [`TableRow`](/api/nodes/table-row) and [`TableCell`](/api/nodes/table-cell) nodes.\n\n## Source code\n[packages/extension-table-header/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table-header/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Table\n"
    },
    {
        "url": "./api/nodes/code-block-lowlight.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add some colorful syntax highlighting to your code blocks.\nicon: terminal-box-fill\n---\n\n# CodeBlockLowlight\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-code-block-lowlight.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-code-block-lowlight)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-code-block-lowlight.svg)](https://npmcharts.com/compare/@tiptap/extension-code-block-lowlight?minimal=true)\n\nWith the CodeBlockLowlight extension you can add fenced code blocks to your documents. It’ll wrap the code in `<pre>` and `<code>` HTML tags.\n\n::: warning Syntax highlight dependency\nThis extension relies on the [lowlight](https://github.com/wooorm/lowlight) library to apply syntax highlight to the code block’s content.\n:::\n\nType <code>&grave;&grave;&grave;&nbsp;</code> (three backticks and a space) or <code>&Tilde;&Tilde;&Tilde;&nbsp;</code> (three tildes and a space) and a code block is instantly added for you. You can even specify the language, try writing <code>&grave;&grave;&grave;css&nbsp;</code>. That should add a `language-css` class to the `<code>`-tag.\n\n## Installation\n```bash\nnpm install lowlight @tiptap/extension-code-block-lowlight\n```\n\n## Settings\n\n### lowlight\n\nYou should provide the `lowlight` module to this extension. Decoupling the `lowlight`\npackage from the extension allows the client application to control which\nversion of lowlight it uses and which programming language packages it needs to load.\n\n```js\nimport { lowlight } from 'lowlight/lib/core'\n\nCodeBlockLowlight.configure({\n  lowlight,\n})\n```\n\n### HTMLAttributes\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nCodeBlockLowlight.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### languageClassPrefix\nAdds a prefix to language classes that are applied to code tags.\n\nDefault: `'language-'`\n\n```js\nCodeBlockLowlight.configure({\n  languageClassPrefix: 'language-',\n})\n```\n\n### defaultLanguage\nDefine a default language instead of the automatic detection of lowlight.\n\nDefault: `null`\n\n```js\nCodeBlockLowlight.configure({\n  defaultLanguage: 'plaintext',\n})\n```\n\n## Commands\n\n### setCodeBlock()\nWrap content in a code block.\n\n```js\neditor.commands.setCodeBlock()\n```\n\n### toggleCodeBlock()\nToggle the code block.\n\n```js\neditor.commands.toggleCodeBlock()\n```\n\n## Keyboard shortcuts\n| Command         | Windows/Linux                 | macOS                     |\n| --------------- | ----------------------------- | ------------------------- |\n| toggleCodeBlock | `Control`&nbsp;`Alt`&nbsp;`C` | `Cmd`&nbsp;`Alt`&nbsp;`C` |\n\n## Source code\n[packages/extension-code-block-lowlight/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-code-block-lowlight/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/CodeBlockLowlight\n"
    },
    {
        "url": "./api/nodes/task-item.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: The actually task, without it the task list would be nothing.\nicon: task-line\n---\n\n# TaskItem\n\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-task-item.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-task-item)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-task-item.svg)](https://npmcharts.com/compare/@tiptap/extension-task-item?minimal=true)\n\nThis extension renders a task item list element, which is a `<li>` tag with a `data-type` attribute set to `taskItem`. It also renders a checkbox inside the list element, which updates a `checked` attribute.\n\nThis extension doesn’t require any JavaScript framework, it’s based on Vanilla JavaScript.\n\n## Installation\n\n```bash\nnpm install @tiptap/extension-task-list @tiptap/extension-task-item\n```\n\nThis extension requires the [`TaskList`](/api/nodes/task-list) node.\n\n## Settings\n\n### HTMLAttributes\n\nCustom HTML attributes that should be added to the rendered HTML tag.\n\n```js\nTaskItem.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n### nested\n\nWhether the task items are allowed to be nested within each other.\n\n```js\nTaskItem.configure({\n  nested: true,\n})\n```\n\n### onReadOnlyChecked\n\nA handler for when the task item is checked or unchecked while the editor is set to `readOnly`.\nIf this is not supplied, the task items are immutable while the editor is `readOnly`.\nIf this function returns false, the check state will be preserved (`readOnly`).\n\n```js\nTaskItem.configure({\n  onReadOnlyChecked: (node, checked) => {\n    // do something\n  },\n})\n```\n\n## Keyboard shortcuts\n\n| Command         | Windows/Linux      | macOS              |\n| --------------- | ------------------ | ------------------ |\n| splitListItem() | `Enter`            | `Enter`            |\n| sinkListItem()  | `Tab`              | `Tab`              |\n| liftListItem()  | `Shift`&nbsp;`Tab` | `Shift`&nbsp;`Tab` |\n\n## Source code\n\n[packages/extension-task-item/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-task-item/)\n\n## Usage\n\nhttps://embed.tiptap.dev/preview/Nodes/TaskItem\n"
    },
    {
        "url": "./api/nodes/table-row.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: \"The perfect middle ground between a table and a table cell.\"\nicon: table-2\n---\n\n# TableRow\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-table-row.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-table-row)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-table-row.svg)](https://npmcharts.com/compare/@tiptap/extension-table-row?minimal=true)\n\nWhat’s a table without rows? Add this extension to make your tables usable.\n\n## Installation\n```bash\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\nThis extension requires the [`Table`](/api/nodes/table), [`TableHeader`](/api/nodes/table-header) and [`TableCell`](/api/nodes/table-cell) nodes.\n\n## Source code\n[packages/extension-table-row/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-table-row/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Nodes/Table\n"
    },
    {
        "url": "./api/extensions/collaboration.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Collaborative text editing can be fricking complex, but it doesn’t have to be that way.\nicon: user-voice-line\n---\n\n# Collaboration\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-collaboration.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-collaboration)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-collaboration.svg)](https://npmcharts.com/compare/@tiptap/extension-collaboration?minimal=true)\n\nThe Collaboration extension enables you to collaborate with others in a single document. The implementation is based on [Y.js by Kevin Jahns](https://github.com/yjs/yjs), which is the coolest thing to [integrate collaborative editing](/guide/collaborative-editing) in your project.\n\nThe history works totally different in a collaborative editing setup. If you undo a change, you don’t want to undo changes of other users. To handle that behaviour this extension provides an own `undo` and `redo` command. Don’t load the default [`History`](/api/extensions/history) extension together with the Collaboration extension to avoid conflicts.\n\n## Installation\n```bash\nnpm install @tiptap/extension-collaboration yjs y-websocket y-prosemirror\n```\n\n## Settings\n\n### document\nAn initialized Y.js document.\n\nDefault: `null`\n\n```js\nCollaboration.configure({\n  document: new Y.Doc(),\n})\n```\n\n### field\nName of a Y.js fragment, can be changed to sync multiple fields with one Y.js document.\n\nDefault: `'default'`\n\n```js\nCollaboration.configure({\n  document: new Y.Doc(),\n  field: 'title',\n})\n```\n\n### fragment\nA raw Y.js fragment, can be used instead of `document` and `field`.\n\nDefault: `null`\n\n```js\nCollaboration.configure({\n  fragment: new Y.Doc().getXmlFragment('body'),\n})\n```\n\n## Commands\nThe `Collaboration` extension comes with its own history extension. Make sure to disable the default extension, if you’re working with the `StarterKit`.\n\n### undo()\nUndo the last change.\n\n```js\neditor.commands.undo()\n```\n### redo()\nRedo the last change.\n\n```js\neditor.commands.redo()\n```\n\n## Keyboard shortcuts\n| Command | Windows/Linux                                         | macOS                                         |\n| ------- | ----------------------------------------------------- | --------------------------------------------- |\n| undo()  | `Control`&nbsp;`Z`                                    | `Cmd`&nbsp;`Z`                                |\n| redo()  | `Shift`&nbsp;`Control`&nbsp;`Z`<br>`Control`&nbsp;`Y` | `Shift`&nbsp;`Cmd`&nbsp;`Z`<br>`Cmd`&nbsp;`Y` |\n\n## Source code\n[packages/extension-collaboration/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration/)\n\n## Usage\n:::warning Public\nThe content of this editor is shared with other users.\n:::\nhttps://embed.tiptap.dev/preview/Extensions/Collaboration?hideSource\nhttps://embed.tiptap.dev/preview/Extensions/Collaboration\n\n!!tiptap-collab-cta\n"
    },
    {
        "url": "./api/extensions/dropcursor.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Adds a cursor when something is dragged inside the editor.\nicon: drag-drop-line\n---\n\n# Dropcursor\n\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-dropcursor.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-dropcursor)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-dropcursor.svg)](https://npmcharts.com/compare/@tiptap/extension-dropcursor?minimal=true)\n\nThis extension loads the [ProseMirror Dropcursor plugin](https://github.com/ProseMirror/prosemirror-dropcursor) by Marijn Haverbeke, which shows a cursor at the drop position when something is dragged into the editor.\n\nNote that Tiptap is headless, but the dropcursor needs CSS for its appearance. There are settings for the color and width, and you’re free to add a custom CSS class.\n\n## Installation\n\n```bash\nnpm install @tiptap/extension-dropcursor\n```\n\n## Settings\n\n### color\n\nColor of the dropcursor.\n\nDefault: `'currentColor'`\n\n```js\nDropcursor.configure({\n  color: '#ff0000',\n})\n```\n\n### width\n\nWidth of the dropcursor.\n\nDefault: `1`\n\n```js\nDropcursor.configure({\n  width: 2,\n})\n```\n\n### class\n\nOne or multiple CSS classes that should be applied to the dropcursor.\n\n```js\nDropcursor.configure({\n  class: 'my-custom-class',\n})\n```\n\n## Source code\n\n[packages/extension-dropcursor/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-dropcursor/)\n\n## Usage\n\nhttps://embed.tiptap.dev/preview/Extensions/Dropcursor\n"
    },
    {
        "url": "./api/extensions/list-keymap.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add extra keymap handlers to change the default backspace and delete behavior for lists.\nicon: asterisk\n---\n\n# ListKeymap\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-list-keymap.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-list-keymap)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-list-keymap.svg)](https://npmcharts.com/compare/@tiptap/extension-list-keymap?minimal=true)\n\nThis extensions adds extra keymap handlers to change the default backspace and delete behavior for lists. Those are not included in the core package, because they are not required for the most basic use cases.\n\n## Installation\n```bash\nnpm install @tiptap/extension-list-keymap\n```\n\n## Settings\n\n### listTypes\nA array of list items and their parent wrapper node types.\n\nDefault:\n\n```js\n[\n  {\n    itemName: 'listItem',\n    wrapperNames: ['bulletList', 'orderedList'],\n  },\n  {\n    itemName: 'taskItem',\n    wrapperNames: ['taskList'],\n  },\n]\n```\n\n```js\nListKeymap.configure({\n  listTypes: [\n    {\n      itemName: 'taskItem',\n      wrapperNames: ['customTaskList'],\n    },\n  ],\n})\n```\n\n## Source code\n[packages/extension-list-keymap/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-list-keymap/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/ListKeymap\n"
    },
    {
        "url": "./api/extensions/history.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: If I could just go back and make everything undone … you can.\nicon: history-line\n---\n\n# History\n\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-history.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-history)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-history.svg)](https://npmcharts.com/compare/@tiptap/extension-history?minimal=true)\n\nThis extension provides history support. All changes to the document will be tracked and can be removed with `undo`. Undone changes can be applied with `redo` again.\n\n## Installation\n\n```bash\nnpm install @tiptap/extension-history\n```\n\n## Settings\n\n### depth\n\nThe amount of history events that are collected before the oldest events are discarded. Defaults to 100.\n\nDefault: `100`\n\n```js\nHistory.configure({\n  depth: 10,\n})\n```\n\n### newGroupDelay\n\nThe delay between changes after which a new group should be started (in milliseconds). When changes aren’t adjacent, a new group is always started.\n\nDefault: `500`\n\n```js\nHistory.configure({\n  newGroupDelay: 1000,\n})\n```\n\n## Commands\n\n### undo()\n\nUndo the last change.\n\n```js\neditor.commands.undo()\n```\n\n### redo()\n\nRedo the last change.\n\n```js\neditor.commands.redo()\n```\n\n## Keyboard shortcuts\n\n| Command | Windows/Linux                                                                            | macOS                                                                        |\n| ------- | ---------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |\n| undo()  | `Control`&nbsp;`Z`<br>`Control`&nbsp;`я`                                                 | `Cmd`&nbsp;`Z`<br>`Cmd`&nbsp;`я`                                             |\n| redo()  | `Shift`&nbsp;`Control`&nbsp;`Z`<br>`Control`&nbsp;`Y`<br>`Shift`&nbsp;`Control`&nbsp;`я` | `Shift`&nbsp;`Cmd`&nbsp;`Z`<br>`Cmd`&nbsp;`Y`<br>`Shift`&nbsp;`Cmd`&nbsp;`я` |\n\n## Source code\n\n[packages/extension-history/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-history/)\n\n## Usage\n\nhttps://embed.tiptap.dev/preview/Extensions/History\n"
    },
    {
        "url": "./api/extensions/focus.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Keep track of where the cursor is, and let the user know you know it.\nicon: focus-line\n---\n\n# Focus\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-focus.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-focus)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-focus.svg)](https://npmcharts.com/compare/@tiptap/extension-focus?minimal=true)\n\nThe Focus extension adds a CSS class to focused nodes. By default it adds `.has-focus`, but you can change that.\n\nNote that it’s only a class, the styling is totally up to you. The usage example below has some CSS for that class.\n\n## Installation\n```bash\nnpm install @tiptap/extension-focus\n```\n\n## Settings\n\n### className\nThe class that is applied to the focused element.\n\nDefault: `'has-focus'`\n\n```js\nFocus.configure({\n  className: 'focus',\n})\n```\n\n### mode\nApply the class to `'all'`, the `'shallowest'` or the `'deepest'` node.\n\nDefault: `'all'`\n\n```js\nFocus.configure({\n  mode: 'deepest',\n})\n```\n\n## Source code\n[packages/extension-focus/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-focus/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/Focus\n"
    },
    {
        "url": "./api/extensions/starter-kit.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: All the popular extensions in a single extension. Doesn’t get much better than this.\nicon: stack-line\n---\n\n# StarterKit\n[![Version](https://img.shields.io/npm/v/@tiptap/starter-kit.svg?label=version)](https://www.npmjs.com/package/@tiptap/starter-kit)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/starter-kit.svg)](https://npmcharts.com/compare/@tiptap/starter-kit?minimal=true)\n\nThe `StarterKit` is a collection of the most popular Tiptap extensions. If you’re just getting started, this extension is for you.\n\n## Installation\n```bash\nnpm install @tiptap/starter-kit\n```\n\n## Included extensions\n\n### Nodes\n* [`Blockquote`](/api/nodes/blockquote)\n* [`BulletList`](/api/nodes/bullet-list)\n* [`CodeBlock`](/api/nodes/code-block)\n* [`Document`](/api/nodes/document)\n* [`HardBreak`](/api/nodes/hard-break)\n* [`Heading`](/api/nodes/heading)\n* [`HorizontalRule`](/api/nodes/horizontal-rule)\n* [`ListItem`](/api/nodes/list-item)\n* [`OrderedList`](/api/nodes/ordered-list)\n* [`Paragraph`](/api/nodes/paragraph)\n* [`Text`](/api/nodes/text)\n\n### Marks\n* [`Bold`](/api/marks/bold)\n* [`Code`](/api/marks/code)\n* [`Italic`](/api/marks/italic)\n* [`Strike`](/api/marks/strike)\n\n### Extensions\n* [`Dropcursor`](/api/extensions/dropcursor)\n* [`Gapcursor`](/api/extensions/gapcursor)\n* [`History`](/api/extensions/history)\n\n## Source code\n[packages/starter-kit/](https://github.com/ueberdosis/tiptap/blob/main/packages/starter-kit/)\n\n## Usage\nPass `StarterKit` to the editor to load all included extension at once.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst editor = new Editor({\n  content: '<p>Example Text</p>',\n  extensions: [\n    StarterKit,\n  ],\n})\n```\n\nYou can configure the included extensions, or even disable a few of them, like shown below.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst editor = new Editor({\n  content: '<p>Example Text</p>',\n  extensions: [\n    StarterKit.configure({\n      // Disable an included extension\n      history: false,\n\n      // Configure an included extension\n      heading: {\n        levels: [1, 2],\n      },\n    }),\n  ],\n})\n```\n"
    },
    {
        "url": "./api/extensions/character-count.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Limit the number of characters in your editor, or at least count them.\nicon: calculator-line\n---\n\n# CharacterCount\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-character-count.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-character-count)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-character-count.svg)](https://npmcharts.com/compare/@tiptap/extension-character-count?minimal=true)\n\nThe `CharacterCount` extension limits the number of allowed characters to a specific length and is able to return the number of characters and words. That’s it, that’s all.\n\n## Installation\n```bash\nnpm install @tiptap/extension-character-count\n```\n\n## Settings\n\n### limit\n\nThe maximum number of characters that should be allowed.\n\nDefault: `null`\n\n```js\nCharacterCount.configure({\n  limit: 240,\n})\n```\n\n### mode\n\nThe mode by which the size is calculated.\n\nDefault: `'textSize'`\n\n```js\nCharacterCount.configure({\n  mode: 'nodeSize',\n})\n```\n\n## Storage\n\n### characters()\nGet the number of characters for the current document.\n\n```js\neditor.storage.characterCount.characters()\n\n// Get the size of a specific node.\neditor.storage.characterCount.characters({ node: someCustomNode })\n\n// Overwrite the default `mode`.\neditor.storage.characterCount.characters({ mode: 'nodeSize' })\n```\n\n### words()\nGet the number of words for the current document.\n\n```js\neditor.storage.characterCount.words()\n\n// Get the number of words for a specific node.\neditor.storage.characterCount.words({ node: someCustomNode })\n```\n\n## Source code\n[packages/extension-character-count/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-character-count/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/CharacterCount\n"
    },
    {
        "url": "./api/extensions/font-family.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Doesn’t have support for Comic Sans, but for all other fonts.\n---\n\n# FontFamily\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-font-family.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-font-family)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-font-family.svg)](https://npmcharts.com/compare/@tiptap/extension-font-family?minimal=true)\n\nThis extension enables you to set the font family in the editor. It uses the [`TextStyle`](/api/marks/text-style) mark, which renders a `<span>` tag. The font family is applied as inline style, for example `<span style=\"font-family: Arial\">`.\n\n## Installation\n```bash\nnpm install @tiptap/extension-text-style @tiptap/extension-font-family\n```\n\nThis extension requires the [`TextStyle`](/api/marks/text-style) mark.\n\n## Settings\n\n### types\nA list of marks to which the font family attribute should be applied to.\n\nDefault: `['textStyle']`\n\n```js\nFontFamily.configure({\n  types: ['textStyle'],\n})\n```\n\n## Commands\n\n### setFontFamily()\nApplies the given font family as inline style.\n\n```js\neditor.commands.setFontFamily('Inter')\n```\n\n### unsetFontFamily()\nRemoves any font family.\n\n```js\neditor.commands.unsetFontFamily()\n```\n\n## Source code\n[packages/extension-font-family/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-font-family/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/FontFamily\n"
    },
    {
        "url": "./api/extensions/floating-menu.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Make a toolbar appear automagically on empty lines.\nicon: menu-4-line\n---\n\n# Floating Menu\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-floating-menu.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-floating-menu)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-floating-menu.svg)](https://npmcharts.com/compare/@tiptap/extension-floating-menu?minimal=true)\n\nThis extension will make a menu appear in an empty line.\n\n## Installation\n```bash\nnpm install @tiptap/extension-floating-menu\n```\n\n## Settings\n\n### element\nThe DOM element that contains your menu.\n\nType: `HTMLElement`\n\nDefault: `null`\n\n### tippyOptions\nUnder the hood, the `FloatingMenu` uses [tippy.js](https://atomiks.github.io/tippyjs/v6/all-props/). You can directly pass options to it.\n\nType: `Object`\n\nDefault: `{}`\n\n### pluginKey\nThe key for the underlying ProseMirror plugin. Make sure to use different keys if you add more than one instance.\n\nType: `string | PluginKey`\n\nDefault: `'floatingMenu'`\n\n### shouldShow\nA callback to control whether the menu should be shown or not.\n\nType: `(props) => boolean`\n\n## Source code\n[packages/extension-floating-menu/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-floating-menu/)\n\n## Using Vanilla JavaScript\n```js\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      element: document.querySelector('.menu'),\n    }),\n  ],\n})\n```\n\n## Using a framework\nhttps://embed.tiptap.dev/preview/Extensions/FloatingMenu\n\n### Custom logic\nCustomize the logic for showing the menu with the `shouldShow` option. For components, `shouldShow` can be passed as a prop.\n\n```js\nFloatingMenu.configure({\n  shouldShow: ({ editor, view, state, oldState }) => {\n    // show the floating within any paragraph\n    return editor.isActive('paragraph')\n  },\n})\n```\n\n### Multiple menus\nUse multiple menus by setting an unique `pluginKey`.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      pluginKey: 'floatingMenuOne',\n      element: document.querySelector('.menu-one'),\n    }),\n    FloatingMenu.configure({\n      pluginKey: 'floatingMenuTwo',\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\nAlternatively you can pass a ProseMirror `PluginKey`.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\nimport { PluginKey } from '@tiptap/pm/state'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      pluginKey: new PluginKey('floatingMenuOne'),\n      element: document.querySelector('.menu-one'),\n    }),\n    FloatingMenu.configure({\n      pluginKey: new PluginKey('floatingMenuOne'),\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n"
    },
    {
        "url": "./api/extensions/gapcursor.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: The gapcursor makes sure the cursor doesn’t get stuck … in a gap.\nicon: space\n---\n\n# Gapcursor\n\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-gapcursor.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-gapcursor)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-gapcursor.svg)](https://npmcharts.com/compare/@tiptap/extension-gapcursor?minimal=true)\n\nThis extension loads the [ProseMirror Gapcursor plugin](https://github.com/ProseMirror/prosemirror-gapcursor) by Marijn Haverbeke, which adds a gap for the cursor in places that don’t allow regular selection. For example, after a table at the end of a document.\n\nNote that Tiptap is headless, but the gapcursor needs CSS for its appearance. The [default CSS](https://github.com/ueberdosis/tiptap/tree/main/packages/core/src/style.ts) is loaded through the Editor class.\n\n## Installation\n\n```bash\nnpm install @tiptap/extension-gapcursor\n```\n\n## Source code\n\n[packages/extension-gapcursor/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-gapcursor/)\n\n## Usage\n\nhttps://embed.tiptap.dev/preview/Extensions/Gapcursor\n"
    },
    {
        "url": "./api/extensions/bubble-menu.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add a toolbar that pops up above the text. Great to apply inline formatting.\nicon: chat-2-line\n---\n\n# Bubble Menu\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-bubble-menu.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-bubble-menu)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-bubble-menu.svg)](https://npmcharts.com/compare/@tiptap/extension-bubble-menu?minimal=true)\n\nThis extension will make a contextual menu appear near a selection of text. Use it to let users apply [marks](/api/marks) to their text selection.\n\nAs always, the markup and styling is totally up to you.\n\n## Installation\n```bash\nnpm install @tiptap/extension-bubble-menu\n```\n\n## Settings\n\n### element\nThe DOM element that contains your menu.\n\nType: `HTMLElement`\n\nDefault: `null`\n\n### updateDelay\nThe `BubbleMenu` debounces the `update` method to allow the bubble menu to not be updated on every selection update. This can be controlled in milliseconds.\nThe BubbleMenuPlugin will come with a default delay of 250ms. This can be deactivated, by setting the delay to `0` which deactivates the debounce.\n\nType: `Number`\n\nDefault: `undefined`\n\n### tippyOptions\nUnder the hood, the `BubbleMenu` uses [tippy.js](https://atomiks.github.io/tippyjs/v6/all-props/). You can directly pass options to it.\n\nType: `Object`\n\nDefault: `{}`\n\n### pluginKey\nThe key for the underlying ProseMirror plugin. Make sure to use different keys if you add more than one instance.\n\nType: `string | PluginKey`\n\nDefault: `'bubbleMenu'`\n\n### shouldShow\nA callback to control whether the menu should be shown or not.\n\nType: `(props) => boolean`\n\n## Source code\n[packages/extension-bubble-menu/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-bubble-menu/)\n\n## Usage\n\n### JavaScript\n```js\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      element: document.querySelector('.menu'),\n    }),\n  ],\n})\n```\n\n### Frameworks\nhttps://embed.tiptap.dev/preview/Extensions/BubbleMenu\n\n### Custom logic\nCustomize the logic for showing the menu with the `shouldShow` option. For components, `shouldShow` can be passed as a prop.\n\n```js\nBubbleMenu.configure({\n  shouldShow: ({ editor, view, state, oldState, from, to }) => {\n    // only show the bubble menu for images and links\n    return editor.isActive('image') || editor.isActive('link')\n  },\n})\n```\n\n### Multiple menus\nUse multiple menus by setting an unique `pluginKey`.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      pluginKey: 'bubbleMenuOne',\n      element: document.querySelector('.menu-one'),\n    }),\n    BubbleMenu.configure({\n      pluginKey: 'bubbleMenuTwo',\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\nAlternatively you can pass a ProseMirror `PluginKey`.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\nimport { PluginKey } from '@tiptap/pm/state'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      pluginKey: new PluginKey('bubbleMenuOne'),\n      element: document.querySelector('.menu-one'),\n    }),\n    BubbleMenu.configure({\n      pluginKey: new PluginKey('bubbleMenuTwo'),\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n"
    },
    {
        "url": "./api/extensions/collaboration-cursor.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: See other user’s cursors and their name while they type.\nicon: account-pin-circle-line\n---\n\n# CollaborationCursor\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-collaboration-cursor.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-collaboration-cursor)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-collaboration-cursor.svg)](https://npmcharts.com/compare/@tiptap/extension-collaboration-cursor?minimal=true)\n\nThis extension adds information about all connected users (like their name and a specified color), their current cursor position and their text selection (if there’s one).\n\nOpen this page in multiple browser windows to test it.\n\n## Installation\n```bash\nnpm install @tiptap/extension-collaboration-cursor\n```\n\nThis extension requires the [`Collaboration`](/api/extensions/collaboration) extension.\n\n## Settings\n\n### provider\nA Y.js network provider, for example a [y-websocket](https://github.com/yjs/y-websocket) instance.\n\nDefault: `null`\n\n### user\nAttributes of the current user, assumes to have a name and a color, but can be used with any attribute. The values are synced with all other connected clients.\n\nDefault: `{ user: null, color: null }`\n\n### render\nA render function for the cursor, look at [the extension source code](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration-cursor/) for an example.\n\n### selectionRender\nA render function for the selection, look at [the extension source code](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration-cursor/) for an example.\n\n## Commands\n\n### updateUser()\nPass an object with updated attributes of the current user. It expects a `name` and a `color`, but you can add additional fields, too.\n\n```js\neditor.commands.updateUser({\n  name: 'John Doe',\n  color: '#000000',\n  avatar: 'https://unavatar.io/github/ueberdosis',\n})\n```\n\n## Source code\n[packages/extension-collaboration-cursor/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-collaboration-cursor/)\n\n## Usage\n:::warning Public\nThe content of this editor is shared with other users.\n:::\nhttps://embed.tiptap.dev/preview/Extensions/CollaborationCursor?hideSource\nhttps://embed.tiptap.dev/preview/Extensions/CollaborationCursor\n\n!!tiptap-collab-cta\n"
    },
    {
        "url": "./api/extensions/color.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Add text color support to your editor (comes with unlimited colors).\nicon: paint-brush-line\n---\n\n# Color\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-color.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-color)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-color.svg)](https://npmcharts.com/compare/@tiptap/extension-color?minimal=true)\n\nThis extension enables you to set the font color in the editor. It uses the [`TextStyle`](/api/marks/text-style) mark, which renders a `<span>` tag (and only that). The font color is applied as inline style then, for example `<span style=\"color: #958DF1\">`.\n\n## Installation\n```bash\nnpm install @tiptap/extension-text-style @tiptap/extension-color\n```\n\nThis extension requires the [`TextStyle`](/api/marks/text-style) mark.\n\n## Settings\n\n### types\nA list of marks to which the color attribute should be applied to.\n\nDefault: `['textStyle']`\n\n```js\nColor.configure({\n  types: ['textStyle'],\n})\n```\n\n## Commands\n\n### setColor()\nApplies the given font color as inline style.\n\n```js\neditor.commands.setColor('#ff0000')\n```\n\n### unsetColor()\nRemoves any font color.\n\n```js\neditor.commands.unsetColor()\n```\n\n## Source code\n[packages/extension-color/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-color/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/Color\n"
    },
    {
        "url": "./api/extensions/text-align.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Left, right, center, whatever! Align the text however you like.\nicon: align-left\n---\n\n# TextAlign\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-text-align.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-text-align)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-text-align.svg)](https://npmcharts.com/compare/@tiptap/extension-text-align?minimal=true)\n\nThis extension adds a text align attribute to a specified list of nodes. The attribute is used to align the text.\n\n:::warning Firefox bug\n`text-align: justify` doesn't work together with `white-space: pre-wrap` in Firefox, [that’s a known issue](https://bugzilla.mozilla.org/show_bug.cgi?id=1253840).\n:::\n\n## Installation\n```bash\nnpm install @tiptap/extension-text-align\n```\n\n## Settings\n\n### types\nA list of nodes where the text align attribute should be applied to. Usually something like `['heading', 'paragraph']`.\n\nDefault: `[]`\n\n```js\nTextAlign.configure({\n  types: ['heading', 'paragraph'],\n})\n```\n\n### alignments\nA list of available options for the text align attribute.\n\nDefault: `['left', 'center', 'right', 'justify']`\n\n```js\nTextAlign.configure({\n  alignments: ['left', 'right'],\n})\n```\n\n### defaultAlignment\nThe default text align.\n\nDefault: `'left'`\n\n```js\nTextAlign.configure({\n  defaultAlignment: 'right',\n})\n```\n\n\n## Commands\n\n### setTextAlign()\nSet the text align to the specified value.\n\n```js\neditor.commands.setTextAlign('right')\n```\n\n### unsetTextAlign()\nRemove the text align value.\n\n```js\neditor.commands.unsetTextAlign()\n```\n\n## Keyboard shortcuts\n| Command                 | Windows/Linux                | macOS                       |\n| ----------------------- | ---------------------------- | --------------------------- |\n| setTextAlign('left')    | `Ctrl`&nbsp;`Shift`&nbsp;`L` | `Cmd`&nbsp;`Shift`&nbsp;`L` |\n| setTextAlign('center')  | `Ctrl`&nbsp;`Shift`&nbsp;`E` | `Cmd`&nbsp;`Shift`&nbsp;`E` |\n| setTextAlign('right')   | `Ctrl`&nbsp;`Shift`&nbsp;`R` | `Cmd`&nbsp;`Shift`&nbsp;`R` |\n| setTextAlign('justify') | `Ctrl`&nbsp;`Shift`&nbsp;`J` | `Cmd`&nbsp;`Shift`&nbsp;`J` |\n\n## Source code\n[packages/extension-text-align/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-text-align/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/TextAlign\n"
    },
    {
        "url": "./api/extensions/placeholder.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: Configure a helpful placeholder to fill the emptyness.\nicon: ghost-line\n---\n\n# Placeholder\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-placeholder.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-placeholder)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-placeholder.svg)](https://npmcharts.com/compare/@tiptap/extension-placeholder?minimal=true)\n\nThis extension provides placeholder support. Give your users an idea what they should write with a tiny hint. There is a handful of things to customize, if you feel like it.\n\n## Installation\n```bash\nnpm install @tiptap/extension-placeholder\n```\n\n### Additional Setup\nPlaceholders are displayed with the help of CSS.\n\n**Display a Placeholder only for the first line in an empty editor.**\n```\n.tiptap p.is-editor-empty:first-child::before {\n  color: #adb5bd;\n  content: attr(data-placeholder);\n  float: left;\n  height: 0;\n  pointer-events: none;\n}\n```\n**Display Placeholders on every new line.**\n```\n.tiptap p.is-empty::before {\n  color: #adb5bd;\n  content: attr(data-placeholder);\n  float: left;\n  height: 0;\n  pointer-events: none;\n}\n```\n\n\n## Settings\n\n### emptyEditorClass\nThe added CSS class if the editor is empty.\n\nDefault: `'is-editor-empty'`\n\n```js\nPlaceholder.configure({\n  emptyEditorClass: 'is-editor-empty',\n})\n```\n\n### emptyNodeClass\nThe added CSS class if the node is empty.\n\nDefault: `'is-empty'`\n\n```js\nPlaceholder.configure({\n  emptyNodeClass: 'my-custom-is-empty-class',\n})\n```\n\n### placeholder\nThe placeholder text added as `data-placeholder` attribute.\n\nDefault: `'Write something …'`\n\n```js\nPlaceholder.configure({\n  placeholder: 'My Custom Placeholder',\n})\n```\n\nYou can even use a function to add placeholder depending on the node:\n\n```js\nPlaceholder.configure({\n  placeholder: ({ node }) => {\n    if (node.type.name === 'heading') {\n      return 'What’s the title?'\n    }\n\n    return 'Can you add some further context?'\n  },\n})\n```\n\n### considerAnyAsEmpty\nConsider any node that is not a leaf or atom as empty for the editor empty check.\n\nDefault: `false`\n\n```js\nPlaceholder.configure({\n  considerAnyAsEmpty: true,\n})\n```\n\n### showOnlyWhenEditable\nShow decorations only when editor is editable.\n\nDefault: `true`\n\n```js\nPlaceholder.configure({\n  showOnlyWhenEditable: false,\n})\n```\n\n### showOnlyCurrent\nShow decorations only in currently selected node.\n\nDefault: `true`\n\n```js\nPlaceholder.configure({\n  showOnlyCurrent: false\n})\n```\n\n### includeChildren\nShow decorations also for nested nodes.\n\nDefault: `false`\n\n```js\nPlaceholder.configure({\n  includeChildren: true\n})\n```\n\n\n## Source code\n[packages/extension-placeholder/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-placeholder/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/Placeholder\n"
    },
    {
        "url": "./api/extensions/typography.md",
        "date": "2024-01-17",
        "contents": "---\ndescription: The typography smart ass for your editor, replaces everything that’s wrong.\nicon: quill-pen-line\n---\n\n# Typography\n[![Version](https://img.shields.io/npm/v/@tiptap/extension-typography.svg?label=version)](https://www.npmjs.com/package/@tiptap/extension-typography)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/extension-typography.svg)](https://npmcharts.com/compare/@tiptap/extension-typography?minimal=true)\n\nThis extension tries to help with common text patterns with the correct typographic character. Under the hood all rules are input rules.\n\n## Installation\n```bash\nnpm install @tiptap/extension-typography\n```\n\n## Rules\n| Name                | Description                                                                             |\n| ------------------- | --------------------------------------------------------------------------------------- |\n| emDash              | Converts double dashes `--` to an emdash `—`.                                           |\n| ellipsis            | Converts three dots `...` to an ellipsis character `…`                                  |\n| openDoubleQuote     | `“`Smart” opening double quotes.                                                        |\n| closeDoubleQuote    | “Smart`”` closing double quotes.                                                        |\n| openSingleQuote     | `‘`Smart’ opening single quotes.                                                        |\n| closeSingleQuote    | ‘Smart`’` closing single quotes.                                                        |\n| leftArrow           | Converts <code><&dash;</code> to an arrow `←` .                                         |\n| rightArrow          | Converts <code>&dash;></code> to an arrow `→`.                                          |\n| copyright           | Converts `(c)` to a copyright sign `©`.                                                 |\n| registeredTrademark | Converts `(r)` to registered trademark sign `®`.                                        |\n| trademark           | Converts `(tm)` to registered trademark sign `™`.                                       |\n| servicemark         | Converts `(sm)` to registered trademark sign `℠`.                                       |\n| oneHalf             | Converts `1/2` to one half `½`.                                                         |\n| oneQuarter          | Converts `1/4` to one quarter `¼`.                                                      |\n| threeQuarters       | Converts `3/4` to three quarters `¾`.                                                   |\n| plusMinus           | Converts `+/-` to plus/minus sign `±`.                                                  |\n| notEqual            | Converts <code style=\"font-variant-ligatures: none;\">!=</code> to a not equal sign `≠`. |\n| laquo               | Converts `<<` to left-pointing double angle quotation mark `«`.                         |\n| raquo               | Converts `>>` to right-pointing double angle quotation mark `»`.                        |\n| multiplication      | Converts `2 * 3` or `2x3` to a multiplcation sign `2×3`.                                |\n| superscriptTwo      | Converts `^2` a superscript two `²`.                                                    |\n| superscriptThree    | Converts `^3` a superscript three `³`.                                                  |\n\n## Keyboard shortcuts\n| Command         | Windows/Linux | macOS       |\n| --------------- | ------------- | ----------- |\n| undoInputRule() | `Backspace`   | `Backspace` |\n\n## Source code\n[packages/extension-typography/](https://github.com/ueberdosis/tiptap/blob/main/packages/extension-typography/)\n\n## Usage\nhttps://embed.tiptap.dev/preview/Extensions/Typography\n\n### Disabling rules\n\nYou can configure the included rules, or even disable a few of them, like shown below.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Typography from '@tiptap/extension-typography'\n\nconst editor = new Editor({\n  extensions: [\n    // Disable some included rules\n    Typography.configure({\n      oneHalf: false,\n      oneQuarter: false,\n      threeQuarters: false,\n    }),\n  ],\n})\n```\n\n### Overriding rules\n\nYou can override the output of a rule by passing a string to the option you want to override.\n\n```js\nimport { Editor } from '@tiptap/core'\nimport Typography from '@tiptap/extension-typography'\n\nconst editor = new Editor({\n  extensions: [\n    // Disable some included rules\n    Typography.configure({\n      oneHalf: \"1 / 2\", // this will insert \"1 / 2\" instead of the default \"½\"\n    }),\n  ],\n})\n```\n"
    },
    {
        "url": "./api/utilities/tiptap-php.md",
        "date": "2024-01-17",
        "contents": "# Tiptap for PHP\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/ueberdosis/tiptap-php.svg)](https://packagist.org/packages/ueberdosis/tiptap-php)\n[![Total Downloads](https://img.shields.io/packagist/dt/ueberdosis/tiptap-php.svg)](https://packagist.org/packages/ueberdosis/tiptap-php)\n\n## Introduction\nA PHP package to work with [Tiptap](https://tiptap.dev/) content. You can transform Tiptap-compatible JSON to HTML, and the other way around, sanitize your content, or just modify it.\n\n## Installation\nYou can install the package via composer:\n\n```bash\ncomposer require ueberdosis/tiptap-php\n```\n\n## Usage\nThe PHP package mimics large parts of the JavaScript package. If you know your way around Tiptap, the PHP syntax will feel familiar to you. Here is an easy example:\n\n```php\n(new Tiptap\\Editor)\n    ->setContent('<p>Example Text</p>')\n    ->getDocument();\n\n// Returns:\n// ['type' => 'doc', 'content' => …]\n```\n\n## Documentation\nThere’s a lot more the PHP package can do. Check out the [repository on GitHub](https://github.com/ueberdosis/tiptap-php).\n\n"
    },
    {
        "url": "./api/utilities/suggestion.md",
        "date": "2024-01-17",
        "contents": "# Suggestion\n[![Version](https://img.shields.io/npm/v/@tiptap/suggestion.svg?label=version)](https://www.npmjs.com/package/@tiptap/suggestion)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/suggestion.svg)](https://npmcharts.com/compare/@tiptap/suggestion?minimal=true)\n\nThis utility helps with all kinds of suggestions in the editor. Have a look at the [`Mention`](/api/nodes/mention) or [`Emoji`](/api/nodes/emoji) node to see it in action.\n\n## Settings\n\n### char\nThe character that triggers the autocomplete popup.\n\nDefault: `'@'`\n\n### pluginKey\nA ProseMirror PluginKey.\n\nDefault: `SuggestionPluginKey`\n\n### allowSpaces\nAllows or disallows spaces in suggested items.\n\nDefault: `false`\n\n### allowedPrefixes\nThe prefix characters that are allowed to trigger a suggestion. Set to `null` to allow any prefix character.\n\nDefault: `[' ']`\n\n### startOfLine\nTrigger the autocomplete popup at the start of a line only.\n\nDefault: `false`\n\n### decorationTag\nThe HTML tag that should be rendered for the suggestion.\n\nDefault: `'span'`\n\n### decorationClass\nA CSS class that should be added to the suggestion.\n\nDefault: `'suggestion'`\n\n### command\nExecuted when a suggestion is selected.\n\nDefault: `() => {}'`\n\n### items\nPass an array of filtered suggestions, can be async.\n\nDefault: `({ editor, query }) => []`\n\n### render\nA render function for the autocomplete popup.\n\nDefault: `() => ({})`\n\n### findSuggestionMatch\nOptional param to replace the built-in regex matching of editor content that triggers a suggestion.\nSee [the\nsource](https://github.com/estrattonbailey/tiptap/blob/develop/packages/suggestion/src/findSuggestionMatch.ts#L18)\nfor more detail.\n\nDefault: `findSuggestionMatch(config: Trigger): SuggestionMatch`\n\n\n## Source code\n[packages/suggestion/](https://github.com/ueberdosis/tiptap/blob/main/packages/suggestion/)\n\n"
    },
    {
        "url": "./api/utilities/html.md",
        "date": "2024-01-17",
        "contents": "# HTML\n[![Version](https://img.shields.io/npm/v/@tiptap/html.svg?label=version)](https://www.npmjs.com/package/@tiptap/html)\n[![Downloads](https://img.shields.io/npm/dm/@tiptap/html.svg)](https://npmcharts.com/compare/@tiptap/html?minimal=true)\n\nThe utility helps rendering JSON content as HTML, and generating JSON from HTML, without an editor instance, for example on the server side.\n\nAll it needs is JSON or a HTML string, and a list of extensions.\n\n## Source code\n[packages/html/](https://github.com/ueberdosis/tiptap/blob/main/packages/html/)\n\n## Generate HTML from JSON\nhttps://embed.tiptap.dev/preview/GuideContent/GenerateHTML\n\n## Generate JSON from HTML\nhttps://embed.tiptap.dev/preview/GuideContent/GenerateJSON\n"
    },
    {
        "url": "./api/commands/reset-attributes.md",
        "date": "2024-01-17",
        "contents": "# resetAttributes\n`resetAttributes` resets some of the nodes attributes back to it's default attributes.\n\n## Parameters\n`typeOrName: string | Node`\n\nThe node that should be resetted. Can be a string or a Node.\n\n`attributes: string | string[]`\n\nA string or an array of strings that defines which attributes should be reset.\n\n## Usage\n```js\n// reset the style and class attributes on the currently selected paragraph nodes\neditor.commands.resetAttributes('paragraph', ['style', 'class'])\n```\n"
    },
    {
        "url": "./api/commands/select-parent-node.md",
        "date": "2024-01-17",
        "contents": "# selectParentNode\n`selectParentNode` will try to get the parent node of the currently selected node and move the selection to that node.\n\n## Usage\n```js\neditor.commands.selectParentNode()\n```\n"
    },
    {
        "url": "./api/commands/set-mark.md",
        "date": "2024-01-17",
        "contents": "# setMark\nThe `setMark` command will add a new mark at the current selection.\n\n## Parameters\n\n`typeOrName: string | MarkType`\n\nThe type of a mark to add. Can be a string or a MarkType.\n\n`attributes: Record<string, any>`\n\nThe attributes that should be applied to the mark. **This is optional.**\n\n## Usage\n```js\neditor.commands.setMark(\"bold\", { class: 'bold-tag' })\n```\n"
    },
    {
        "url": "./api/commands/clear-content.md",
        "date": "2024-01-17",
        "contents": "# clearContent\nThe `clearContent` command deletes the current document.\n\nKeep in mind that the editor will enforce the configured schema, and the document won’t be `null`. The default [`Document`](/api/nodes/document) expects to have at least one block node, which is the paragraph by default. In other words: Even after running that command the document will have at least one (empty) paragraph.\n\nSee also: [setContent](/api/commands/set-content), [insertContent](/api/commands/insert-content)\n\n## Parameters\n`emitUpdate: boolean (false)`\n\nBy default, it doesn’t trigger the update event. Passing `true` doesn’t prevent triggering the update event.\n\n## Usage\n```js\n// Remove all content from the document\neditor.commands.clearContent()\n\n// Remove all content, and trigger the `update` event\neditor.commands.clearContent(true)\n```\n\n"
    },
    {
        "url": "./api/commands/blur.md",
        "date": "2024-01-17",
        "contents": "# blur\nThis command removes the focus from the editor.\n\nSee also: [focus](/api/commands/focus)\n\n## Usage\n```js\n// Remove the focus from the editor\neditor.commands.blur()\n```\n\n"
    },
    {
        "url": "./api/commands/create-paragraph-near.md",
        "date": "2024-01-17",
        "contents": "# createParagraphNear\nIf a block node is currently selected, the `createParagraphNear` command creates an empty paragraph after the currently selected block node. If the selected block node is the first child of its parent, the new paragraph will be inserted before the current selection.\n\n## Usage\n```js\neditor.commands.createParagraphNear()\n```\n"
    },
    {
        "url": "./api/commands/select-textblock-end.md",
        "date": "2024-01-17",
        "contents": "# selectTextblockEnd\nThe `selectTextblockEnd` will move the cursor to the end of the current textblock if the block is a valid textblock.\n\n## Usage\n```js\neditor.commands.selectTextblockEnd()\n```\n"
    },
    {
        "url": "./api/commands/set-text-selection.md",
        "date": "2024-01-17",
        "contents": "# setTextSelection\nIf you think of selection in the context of an editor, you’ll probably think of a text selection. With `setTextSelection` you can control that text selection and set it to a specified range or position.\n\nSee also: [focus](/api/commands/focus), [setNodeSelection](/api/commands/set-node-selection), [deleteSelection](/api/commands/delete-selection), [selectAll](/api/commands/select-all)\n\n## Parameters\n`position: number | Range`\n\nPass a number, or a Range, for example `{ from: 5, to: 10 }`.\n\n## Usage\n```js\n// Set the cursor to the specified position\neditor.commands.setTextSelection(10)\n\n// Set the text selection to the specified range\neditor.commands.setTextSelection({ from: 5, to: 10 })\n```\n\n"
    },
    {
        "url": "./api/commands/delete-range.md",
        "date": "2024-01-17",
        "contents": "# deleteRange\nThe `deleteRange` command deletes everything in a given range. It requires a `range` attribute of type `Range`.\n\n## Parameters\n`range: Range`\n\n## Usage\n```js\neditor.commands.deleteRange({ from: 0, to: 12 })\n```\n"
    },
    {
        "url": "./api/commands/delete-selection.md",
        "date": "2024-01-17",
        "contents": "# deleteSelection\nThe `deleteSelection` command deletes the currently selected nodes. If no selection exists, nothing will be deleted.\n\n## Usage\n```js\neditor.commands.deleteSelection()\n```\n"
    },
    {
        "url": "./api/commands/sink-list-item.md",
        "date": "2024-01-17",
        "contents": "# sinkListItem\nThe `sinkListItem` will try to sink the list item around the current selection down into a wrapping child list.\n\n## Usage\n```js\neditor.commands.sinkListItem()\n```\n"
    },
    {
        "url": "./api/commands/scroll-into-view.md",
        "date": "2024-01-17",
        "contents": "# scrollIntoView\n`scrollIntoView` scrolls the view to the current selection or cursor position.\n\n## Usage\n```js\neditor.commands.scrollIntoView()\n```\n"
    },
    {
        "url": "./api/commands/insert-content-at.md",
        "date": "2024-01-17",
        "contents": "# insertContentAt\nThe `insertContentAt` will insert a string of html or a node at a given position or range. If a range is given, the new content will replace the content in the given range with the new content.\n\n## Parameters\n`position: number | Range`\n\nThe position or range the content will be inserted in.\n\n`value: Content`\n\nThe content to be inserted. Can be a string of HTML or a node.\n\n`options: Record<string, any>`\n\n* updateSelection: controls if the selection should be moved to the newly inserted content.\n* parseOptions: Passed content is parsed by ProseMirror. To hook into the parsing, you can pass `parseOptions` which are then handled by [ProseMirror](https://prosemirror.net/docs/ref/#model.ParseOptions).\n\n## Usage\n```js\neditor.commands.insertContentAt(12, '<p>Hello world</p>', {\n  updateSelection: true,\n  parseOptions: {\n    preserveWhitespace: 'full',\n  }\n})\n```\n"
    },
    {
        "url": "./api/commands/focus.md",
        "date": "2024-01-17",
        "contents": "# focus\nThis command sets the focus back to the editor.\n\nWhen a user clicks on a button outside the editor, the browser sets the focus to that button. In most scenarios you want to focus the editor then again. That’s why you’ll see that in basically every demo here.\n\nSee also: [setTextSelection](/api/commands/set-text-selection), [blur](/api/commands/blur)\n\n## Parameters\n`position: 'start' | 'end' | 'all' | number | boolean | null (false)`\n\nBy default, it’s restoring the cursor position (and text selection). Pass a position to move the cursor to.\n\n`options: { scrollIntoView: boolean }`\n\nDefines whether to scroll to the cursor when focusing. Defaults to `true`.\n\n## Usage\n```js\n// Set the focus to the editor\neditor.commands.focus()\n\n// Set the cursor to the first position\neditor.commands.focus('start')\n\n// Set the cursor to the last position\neditor.commands.focus('end')\n\n// Selects the whole document\neditor.commands.focus('all')\n\n// Set the cursor to position 10\neditor.commands.focus(10)\n```\n"
    },
    {
        "url": "./api/commands/join-forward.md",
        "date": "2024-01-17",
        "contents": "# joinForward\nThe `joinForward` command joins two nodes forwards from the current selection. If the selection is empty and at the end of a textblock, `joinForward` will try to reduce the distance between that block and the block after it. [See also](https://prosemirror.net/docs/ref/#commands.joinForward)\n\n## Usage\n```js\neditor.commands.joinForward()\n```\n\n"
    },
    {
        "url": "./api/commands/toggle-node.md",
        "date": "2024-01-17",
        "contents": "# toggleNode\n`toggleNode` will toggle a node with another node.\n\n## Parameters\n`typeOrName: string | NodeType`\n\nThe type of node that should be toggled.\n\n`toggleTypeOrName: string | NodeType`\n\nThe type of node that should be used for the toggling.\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the node. **This is optional.**\n\n## Usage\n```js\n// toggle a paragraph with a heading node\neditor.commands.toggleNode('paragraph', 'heading', { level: 1 })\n\n// toggle a paragraph with a image node\neditor.commands.toggleNode('paragraph', 'image', { src: 'https://example.com/image.png' })\n```\n"
    },
    {
        "url": "./api/commands/lift-list-item.md",
        "date": "2024-01-17",
        "contents": "# liftListItem\nThe `liftListItem` will try to lift the list item around the current selection up into a wrapping parent list.\n\n## Usage\n```js\neditor.commands.liftListItem()\n```\n"
    },
    {
        "url": "./api/commands/split-block.md",
        "date": "2024-01-17",
        "contents": "# splitBlock\n`splitBlock` will split the current node into two nodes at the current [NodeSelection](https://prosemirror.net/docs/ref/#state.NodeSelection). If the current selection is not splittable, the command will be ignored.\n\n## Parameters\n`options: Record<string, any>`\n\n* `keepMarks: boolean` - Defines if the marks should be kept or removed. Defaults to `true`.\n\n## Usage\n```js\n// split the current node and keep marks\neditor.commands.splitBlock()\n\n// split the current node and don't keep marks\neditor.commands.splitBlock({ keepMarks: false })\n```\n"
    },
    {
        "url": "./api/commands/enter.md",
        "date": "2024-01-17",
        "contents": "# enter\nThe `enter` command triggers an enter programmatically.\n\n## Usage\n```js\neditor.commands.enter()\n```\n"
    },
    {
        "url": "./api/commands/toggle-wrap.md",
        "date": "2024-01-17",
        "contents": "# toggleWrap\n`toggleWrap` wraps the current node with a new node or removes a wrapping node.\n\n## Parameters\n`typeOrName: string | NodeType`\n\nThe type of node that should be used for the wrapping node.\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the node. **This is optional.**\n\n## Usage\n```js\n// toggle wrap the current selection with a heading node\neditor.commands.toggleWrap('heading', { level: 1 })\n```\n"
    },
    {
        "url": "./api/commands/newline-in-code.md",
        "date": "2024-01-17",
        "contents": "# newlineInCode\n`newlineInCode` inserts a new line in the current code block. If a selection is set, the selection will be replaced with a newline character.\n\n## Usage\n```js\neditor.commands.newlineInCode()\n```\n"
    },
    {
        "url": "./api/commands/clear-nodes.md",
        "date": "2024-01-17",
        "contents": "# clearNodes\nThe `clearNodes` command normalizes nodes to the default node, which is the paragraph by default. It’ll even normalize all kind of lists. For advanced use cases it can come in handy, before applying a new node type.\n\nIf you wonder how you can define the default node: It depends on what’s in the `content` attribute of your [`Document`](/api/nodes/document), by default that’s `block+` (at least one block node) and the [`Paragraph`](/api/nodes/paragraph) node has the highest priority, so it’s loaded first and is therefore the default node.\n\n## Usage\n```js\neditor.commands.clearNodes()\n```\n\n"
    },
    {
        "url": "./api/commands/lift-empty-block.md",
        "date": "2024-01-17",
        "contents": "# liftEmptyBlock\nIf the currently selected block is an empty textblock, lift it if possible. **Lifting** means, that the block will be moved to the parent of the block it is currently in.\n\n## Usage\n```js\neditor.commands.liftEmptyBlock()\n```\n"
    },
    {
        "url": "./api/commands/join-down.md",
        "date": "2024-01-17",
        "contents": "# joinDown\nThe `joinDown` command joins the selected block, or if there is a text selection, the closest ancestor block of the selection that can be joined, with the sibling below it. [See also](https://prosemirror.net/docs/ref/#commands.joinDown)\n\n## Usage\n```js\neditor.commands.joinDown()\n```\n\n"
    },
    {
        "url": "./api/commands/toggle-list.md",
        "date": "2024-01-17",
        "contents": "# toggleList\n`toggleList` will toggle between different types of lists.\n\n## Parameters\n`listTypeOrName: string | NodeType`\n\nThe type of node that should be used for the wrapping list\n\n`itemTypeOrName: string | NodeType`\n\nThe type of node that should be used for the list items\n\n`keepMarks?: boolean`\n\nIf marks should be kept as list items or not\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the list. **This is optional.**\n\n## Usage\n```js\n// toggle a bullet list with list items\neditor.commands.toggleList('bullet_list', 'list_item')\n\n// toggle a numbered list with list items\neditor.commands.toggleList('ordered_list', 'list_item')\n```\n"
    },
    {
        "url": "./api/commands/undo-input-rule.md",
        "date": "2024-01-17",
        "contents": "# undoInputRule\n`undoInputRule` will undo the most recent input rule that was triggered.\n\n## Usage\n```js\neditor.commands.undoInputRule()\n```\n"
    },
    {
        "url": "./api/commands/join-textblock-forward.md",
        "date": "2024-01-17",
        "contents": "# joinTextblockForward\nA more limited form of joinForward that only tries to join the current textblock to the one after it, if the cursor is at the end of a textblock. [See also](https://prosemirror.net/docs/ref/#commands.joinTextblockForward)\n\n## Usage\n```js\neditor.commands.joinTextblockForward()\n```\n\n"
    },
    {
        "url": "./api/commands/keyboard-shortcut.md",
        "date": "2024-01-17",
        "contents": "# keyboardShortcut\nThe `keyboardShortcut` command will try to trigger a ShortcutEvent with a given name.\n\n## Parameters\n`name: String`\n\nThe name of the shortcut to trigger.\n\n## Usage\n```js\neditor.commands.keyboardShortcut('undo')\n```\n"
    },
    {
        "url": "./api/commands/delete-node.md",
        "date": "2024-01-17",
        "contents": "# deleteNode\nThe `deleteNode` command deletes a node inside the current selection. It requires a `typeOrName` argument, which can be a string or a `NodeType` to find the node that needs to be deleted. After deleting the node, the view will automatically scroll to the cursors position.\n\n## Parameters\n`typeOrName: string | NodeType`\n\n## Usage\n```js\n// deletes a paragraph node\neditor.commands.deleteNode('paragraph')\n\n// or\n\n// deletes a custom node\neditor.commands.deleteNode(MyCustomNode)\n```\n"
    },
    {
        "url": "./api/commands/lift.md",
        "date": "2024-01-17",
        "contents": "# lift\nThe `lift` command lifts a given node up into it's parent node. **Lifting** means, that the block will be moved to the parent of the block it is currently in.\n\n## Parameters\n`typeOrName: String | NodeType`\n\nThe node that should be lifted. If the node is not found in the current selection, ignore the command.\n\n`attributes: Record<string, any>`\n\nThe attributes the node should have to be lifted. This is **optional**.\n\n## Usage\n```js\n// lift any headline\neditor.commands.lift('headline')\n\n// lift only h2\neditor.commands.lift('headline', { level: 2 })\n```\n"
    },
    {
        "url": "./api/commands/unset-mark.md",
        "date": "2024-01-17",
        "contents": "# unsetMark\n`unsetMark` will remove the mark from the current selection. Can also remove all marks across the current selection.\n\n## Parameters\n`typeOrName: string | MarkType`\n\nThe type of mark that should be removed.\n\n`options?: Record<string, any>`\n\n* `extendEmptyMarkRange?: boolean` - Removes the mark even across the current selection. Defaults to `false`\n\n## Usage\n```js\n// removes a bold mark\neditor.commands.unsetMark('bold')\n\n// removes a bold mark across the current selection\neditor.commands.unsetMark('bold', { extendEmptyMarkRange: true })\n```\n"
    },
    {
        "url": "./api/commands/set-node-selection.md",
        "date": "2024-01-17",
        "contents": "# setNodeSelection\n`setNodeSelection` creates a new NodeSelection at a given position. A node selection is a selection that points to a single node. [See more](https://prosemirror.net/docs/ref/#state.NodeSelection)\n\n## Parameters\n`position: number`\n\nThe position the NodeSelection will be created at.\n\n## Usage\n```js\neditor.commands.setNodeSelection(10)\n```\n"
    },
    {
        "url": "./api/commands/join-backward.md",
        "date": "2024-01-17",
        "contents": "# joinBackward\nThe `joinBackward` command joins two nodes backwards from the current selection. If the selection is empty and at the start of a textblock, `joinBackward` will try to reduce the distance between that block and the block before it. [See also](https://prosemirror.net/docs/ref/#commands.joinBackward)\n\n## Usage\n```js\neditor.commands.joinBackward()\n```\n"
    },
    {
        "url": "./api/commands/toggle-mark.md",
        "date": "2024-01-17",
        "contents": "# toggleMark\nThe `toggleMark` command toggles a specific mark on and off at the current selection.\n\n## Parameters\n`typeOrName: string | MarkType`\n\nThe type of mark that should be toggled.\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the mark. **This is optional.**\n\n`options?: Record<string, any>`\n* `extendEmptyMarkRange: boolean` - Removes the mark even across the current selection. Defaults to `false`\n\n## Usage\n```js\n// toggles a bold mark\neditor.commands.toggleMark('bold')\n\n// toggles bold mark with a color attribute\neditor.commands.toggleMark('bold', { color: 'red' })\n\n// toggles a bold mark with a color attribute and removes the mark across the current selection\neditor.commands.toggleMark('bold', { color: 'red' }, { extendEmptyMarkRange: true })\n```\n"
    },
    {
        "url": "./api/commands/select-node-forward.md",
        "date": "2024-01-17",
        "contents": "# selectNodeForward\nIf the selection is empty and at the end of a textblock, `selectNodeForward` will select the node after the current textblock if possible.\n\n## Usage\n```js\neditor.commands.selectNodeForward()\n```\n"
    },
    {
        "url": "./api/commands/join-up.md",
        "date": "2024-01-17",
        "contents": "# joinUp\nThe `joinUp` command joins the selected block, or if there is a text selection, the closest ancestor block of the selection that can be joined, with the sibling above it. [See also](https://prosemirror.net/docs/ref/#commands.joinUp)\n\n## Usage\n```js\neditor.commands.joinUp()\n```\n\n"
    },
    {
        "url": "./api/commands/for-each.md",
        "date": "2024-01-17",
        "contents": "# forEach\nLoop through an array of items.\n\n## Parameters\n`items: any[]`\n\nAn array of items.\n\n`fn: (item: any, props: CommandProps & { index: number }) => boolean`\n\nA function to do anything with your item.\n\n## Usage\n```js\nconst items = ['foo', 'bar', 'baz']\n\neditor.commands.forEach(items, (item, { commands }) => {\n  return commands.insertContent(item)\n})\n```\n"
    },
    {
        "url": "./api/commands/set-node.md",
        "date": "2024-01-17",
        "contents": "# setNode\nThe `setNode` command will replace a given range with a given node. The range depends on the current selection. **Important**: Currently `setNode` only supports text block nodes.\n\n## Parameters\n\n`typeOrName: string | NodeType`\n\nThe type of the node that will replace the range. Can be a string or a NodeType.\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the node. **This is optional.**\n\n## Usage\n```js\neditor.commands.setNode(\"paragraph\", { id: \"paragraph-01\" })\n```\n"
    },
    {
        "url": "./api/commands/unset-all-marks.md",
        "date": "2024-01-17",
        "contents": "# unsetAllMarks\n`unsetAllMarks` will remove all marks from the current selection.\n\n## Usage\n```js\neditor.commands.unsetAllMarks()\n```\n"
    },
    {
        "url": "./api/commands/select-node-backward.md",
        "date": "2024-01-17",
        "contents": "# selectNodeBackward\nIf the selection is empty and at the start of a textblock, `selectNodeBackward` will select the node before the current textblock if possible.\n\n## Usage\n```js\neditor.commands.selectNodeBackward()\n```\n"
    },
    {
        "url": "./api/commands/insert-content.md",
        "date": "2024-01-17",
        "contents": "# insertContent\nThe `insertContent` command adds the passed value to the document.\n\nSee also: [setContent](/api/commands/set-content), [clearContent](/api/commands/clear-content)\n\n## Parameters\n`value: Content`\n\nThe command is pretty flexible and takes plain text, HTML or even JSON as a value.\n\n## Usage\n```js\n// Plain text\neditor.commands.insertContent('Example Text')\n\n// HTML\neditor.commands.insertContent('<h1>Example Text</h1>')\n\n// HTML with trim white space\neditor.commands.insertContent('<h1>Example Text</h1>', \n{\n  parseOptions: {\n    preserveWhitespace: false,\n  }\n})\n\n// JSON/Nodes\neditor.commands.insertContent({\n  type: 'heading',\n  attrs: {\n    level: 1,\n  },\n  content: [\n    {\n      type: 'text',\n      text: 'Example Text',\n    },\n  ],\n})\n\n// Multiple nodes at once\neditor.commands.insertContent([\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'First paragraph',\n      },\n    ],\n  },\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'Second paragraph',\n      },\n    ],\n  },\n])\n```\n\n"
    },
    {
        "url": "./api/commands/set-content.md",
        "date": "2024-01-17",
        "contents": "# setContent\nThe `setContent` command replaces the document with a new one. You can pass JSON or HTML, both work fine. It’s basically the same as setting the `content` on initialization.\n\nSee also: [insertContent](/api/commands/insert-content), [clearContent](/api/commands/clear-content)\n\n## Parameters\n`content: string`\n\nPass a string (JSON or HTML) as [content](/guide/output). The editor will only render what’s allowed according to the [schema](/api/schema).\n\n`emitUpdate?: Boolean (false)`\n\nBy default, it doesn’t trigger the update event. Passing `true` doesn’t prevent triggering the update event.\n\n`parseOptions?: Record<string, any>`\n\nOptions to configure the parsing can be passed during initialization and/or with setContent. Read more about parseOptions in the [ProseMirror documentation](https://prosemirror.net/docs/ref/#model.ParseOptions).\n\n## Usage\n```js\n// HTML\neditor.commands.setContent('<p>Example Text</p>')\n\n// JSON\neditor.commands.setContent({\n  \"type\": \"doc\",\n  \"content\": [\n    {\n      \"type\": \"paragraph\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Example Text\"\n        }\n      ]\n    }\n  ]\n})\n```\n\n"
    },
    {
        "url": "./api/commands/select-textblock-start.md",
        "date": "2024-01-17",
        "contents": "# selectTextblockStart\nThe `selectTextblockStart` will move the cursor to the start of the current textblock if the block is a valid textblock.\n\n## Usage\n```js\neditor.commands.selectTextblockStart()\n```\n"
    },
    {
        "url": "./api/commands/split-list-item.md",
        "date": "2024-01-17",
        "contents": "# splitListItem\n`splitListItem` splits one list item into two separate list items. If this is a nested list, the wrapping list item should be split.\n\n## Parameters\n`typeOrName: string | NodeType`\n\nThe type of node that should be split into two separate list items.\n\n## Usage\n```js\neditor.commands.splitListItem('bullet_list')\n```\n"
    },
    {
        "url": "./api/commands/exit-code.md",
        "date": "2024-01-17",
        "contents": "# exitCode\nThe `exitCode` command will create a default block after the current selection if the selection is a `code` element and move the cursor to the new block.\n\n## Usage\n```js\neditor.commands.exitCode()\n```\n"
    },
    {
        "url": "./api/commands/select-all.md",
        "date": "2024-01-17",
        "contents": "# selectAll\nSelects the whole document at once.\n\n## Usage\n```js\n// Select the whole document\neditor.commands.selectAll()\n```\n"
    },
    {
        "url": "./api/commands/update-attributes.md",
        "date": "2024-01-17",
        "contents": "# updateAttributes\nThe `updateAttributes` command sets attributes of a node or mark to new values. Not passed attributes won’t be touched.\n\nSee also: [extendMarkRange](/api/commands/extend-mark-range)\n\n## Parameters\n`typeOrName: string | NodeType | MarkType`\n\nPass the type you want to update, for example `'heading'`.\n\n`attributes: Record<string, any>`\n\nThis expects an object with the attributes that need to be updated. It doesn’t need to have all attributes.\n\n## Usage\n```js\n// Update node attributes\neditor.commands.updateAttributes('heading', { level: 1 })\n\n// Update mark attributes\neditor.commands.updateAttributes('highlight', { color: 'pink' })\n```\n\n"
    },
    {
        "url": "./api/commands/wrap-in-list.md",
        "date": "2024-01-17",
        "contents": "# wrapInList\n`wrapInList` will wrap a node in the current selection in a list.\n\n## Parameters\n`typeOrName: string | NodeType`\n\nThe type of node that should be wrapped in a list.\n\n`attributes?: Record<string, any>`\n\nThe attributes that should be applied to the list. **This is optional.**\n\n## Usage\n```js\n// wrap a paragraph in a bullet list\neditor.commands.wrapInList('paragraph')\n```\n"
    },
    {
        "url": "./api/commands/extend-mark-range.md",
        "date": "2024-01-17",
        "contents": "# extendMarkRange\nThe `extendMarkRange` command expands the current selection to encompass the current mark. If the current selection doesn’t have the specified mark, nothing changes.\n\n## Parameters\n`typeOrName: string | MarkType`\n\nName or type of the mark.\n\n`attributes?: Record<string, any>`\n\nOptionally, you can specify attributes that the extented mark must contain.\n\n## Usage\n```js\n// Expand selection to link marks\neditor.commands.extendMarkRange('link')\n\n// Expand selection to link marks with specific attributes\neditor.commands.extendMarkRange('link', { href: 'https://google.com' })\n\n// Expand selection to link mark and update attributes\neditor\n  .chain()\n  .extendMarkRange('link')\n  .updateAttributes('link', {\n    href: 'https://duckduckgo.com'\n  })\n  .run()\n```\n"
    },
    {
        "url": "./api/commands/set-meta.md",
        "date": "2024-01-17",
        "contents": "# setMeta\nStore a metadata property in the current transaction.\n\n## Parameters\n`key: string`\n\nThe name of your metadata. You can get its value at any time with [getMeta](https://prosemirror.net/docs/ref/#state.Transaction.getMeta).\n\n`value: any`\n\nStore any value within your metadata.\n\n## Usage\n```js\n// Prevent the update event from being triggered\neditor.commands.setMeta('preventUpdate', true)\n\n// Store any value in the current transaction.\n// You can get this value at any time with tr.getMeta('foo').\neditor.commands.setMeta('foo', 'bar')\n```\n"
    },
    {
        "url": "./api/commands/cut.md",
        "date": "2024-01-17",
        "contents": "# cut\nThis command cuts out content and places it into the given position.\n\nSee also: [focus](/api/commands/cut)\n\n## Usage\n```js\nconst from = editor.state.selection.from\nconst to = editor.state.selection.to\n\nconst endPos = editor.state.doc.nodeSize - 2\n\n// Cut out content from range and put it at the end of the document\neditor.commands.cut({ from, to }, endPos)\n```\n\n"
    },
    {
        "url": "./api/commands/join-textblock-backward.md",
        "date": "2024-01-17",
        "contents": "# joinTextblockBackward\nA more limited form of joinBackward that only tries to join the current textblock to the one before it, if the cursor is at the start of a textblock. [See also](https://prosemirror.net/docs/ref/#commands.joinTextblockBackward)\n\n## Usage\n```js\neditor.commands.joinTextblockBackward()\n```\n\n"
    },
    {
        "url": "./tutorials/get-started-with-tiptap-collab.md",
        "date": "2024-01-17",
        "contents": "# Getting started with Tiptap Collab\n\n## Introduction\n\n**Welcome** to the first of a series of tutorials about collaboration in Tiptap (or Lexical, Quill, Slate, and others that have a [Yjs editor binding](https://docs.yjs.dev/ecosystem/editor-bindings)) using Tiptap Collab. This series will start covering the basics, and expand to more specific use cases in the next posts. For today, we’ll start moving from a simple textarea box to a fully collaborative editor instance.\n\nImagine that you are building a simple sticky note app, where a user can create notes.\n\nSo let's say you have a few textareas. Depending on your framework (Vue, React, ..), the code probably looks similar to this:\n\n<tiptap-demo name=\"Tutorials/1-1-textarea\"></tiptap-demo>\n\n## Setting Up Tiptap\n\nIn order to incorporate the Tiptap editor instance for better collaboration and formatting options, you start by modifying your code to include Tiptap in the Note component.\n\nYou begin by importing the necessary Tiptap components and creating a new editor instance within the Note component.\n\n```bash\nnpm install @tiptap/vue-3 @tiptap/pm @tiptap/starter-kit\n# for React: npm install @tiptap/react @tiptap/pm @tiptap/starter-kit\n```\n\n<tiptap-demo name=\"Tutorials/1-2-tiptap\"></tiptap-demo>\n\nNow your Note component has a fully functional Tiptap editor instance! The user can now format their text (see https://tiptap.dev/guide/menus on how to add a menu bar, in our example, you can make text bold using cmd+b). But what about collaboration?\n\n## Adding Yjs\n\nTo enable collaboration, you need to add the Collaboration extension to your editor instance. This extension allows multiple users to edit the same document simultaneously, with changes being synced in realtime.\n\n\nTo add the Collaboration extension to your editor instance, you first need to install the `@tiptap/extension-collaboration` package:\n\n```bash\nnpm install @tiptap/extension-collaboration yjs\n```\n\nThen, you can import the `Collaboration` extension and add it to your editor extensions:\n\n<tiptap-demo name=\"Tutorials/1-3-yjs\"></tiptap-demo>\n\nok, so what have we done?\n\nWe just added the collaboration extension as well as the technology behind it, Yjs. Instead of raw text we are passing the Y.Doc which basically takes care of merging changes. But so far, there is no collaboration...\n\n## Real-Time Collaboration with Tiptap Collab\n\nTo enable real-time collaboration, we need to connect the Y.Doc with the TiptapCollabProvider. The TiptapCollabProvider is a package that provides a simple way to synchronize Y.Doc's across different clients.\n\nTo start using TiptapCollabProvider, we need to create a new instance of the TiptapCollabProvider class and pass our Y.Doc. We also need to provide a document name.\n\nTo get started, let's sign up for a Tiptap Pro account, which comes with a free licence of Tiptap Collab:\n\n!!tiptap-collab-cta\n\nAfter you signed up, click on \"Join the Beta\". Just follow the instructions and you'll be set up within a few minutes.\n\nYour app ID is shown in the collab admin interface: https://collab.tiptap.dev/ - just copy that and also already get the JWT from the settings area. It's valid for two hours, so more than enough for our quick test. We'll cover generating JWTs using your secret later.\n\n\nNow, back to our application:\n\n```bash\nnpm install @hocuspocus/provider\n```\n\nLet's now create the TiptapCollabProvider to finally get syncing:\n\n<tiptap-demo name=\"Tutorials/1-4-collab\"></tiptap-demo>\n\nAnd that's it! With these changes, our Tiptap note-taking application is now fully collaborative. Notes will get synced to other users in realtime.\n\n\nWe've only scratched the surface of what Tiptap Collab and Hocuspocus can do. Keep an eye out for future articles where we'll delve into more complex scenarios like permissions, presence indicators, and beyond. Don't miss out!\n"
    },
    {
        "url": "./tutorials/jwt-authentication.md",
        "date": "2024-01-17",
        "contents": "# JWT authentication with Tiptap Collab\n\nIn our first tutorial, we've gone from a simple textarea to a fully collaborative Tiptap editor instance.\nHowever, the JWT that is given by Tiptap Collab is valid for just a few hours, which is enough for testing,\nbut certainly not enough for a real live application.\n\n## What is a JWT\n\nIn a short explanation, a JWT (JSON Web Token) is a json object that is cryptographically signed, which means a generated JWT cannot be altered.\n\n## How to generate a JWT\n\nThe JWT **must** be generated on the server side, as your `secret` **must not** leave your server (i.e. don't even try to generate the JWT on the frontend).\nYou can use the following snippet on a NodeJS server and build an API around it.\n\n```typescript\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst jwt = jsonwebtoken.sign({ /* object to be encoded in the JWT */ }, 'your_secret')\n// this JWT should be sent in the `token` field of the provider. Never expose 'your_secret' to a frontend!\n```\n\nA full server / API example is available [here](https://github.com/ueberdosis/tiptap-collab-replit/blob/main/src/server-collab.ts).\nMake sure to put the `secret` inside the server environment variable (or just make it a constant in the server file, don't transfer it from the client).\nYou probably want to create an API call like `GET /getCollabToken` which will generate the JWT based on the server secret and the list of documents that the user is allowed to access.\n\n## How to limit access to specific documents\n\nDocuments can only be accessed by knowing the exact document name, as there is no way to get a list of documents from TiptapCollab.\nThus, it's a good practice to name them like `userUuid/documentUuid` (i.e. `1500c624-8f9f-496a-b196-5e5dd8ec3c25/7865975c-38d0-4bb5-846b-df909cdc66d3`), which\nalready makes it impossible to open random documents by guessing the name.\n\nIf you want to further limit which documents can be accessed using which JWT, you can encode the `allowedDocumentNames` property in the JWT, as in the following\nexample. The created JWT will only allow access to the document(s) specified.\n\n```typescript\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst jwt = jsonwebtoken.sign({\n  allowedDocumentNames: [\n    '1500c624-8f9f-496a-b196-5e5dd8ec3c25/7865975c-38d0-4bb5-846b-df909cdc66d3', // userUuid/documentUuid\n    '1500c624-8f9f-496a-b196-5e5dd8ec3c25/*' // userUuid/*\n  ]\n}, 'your_secret')\n// this JWT should be sent in the `token` field of the provider. Never expose 'your_secret' to a frontend!\n```\n"
    },
    {
        "url": "./overview/upgrade-guide.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Upgrade Guide\n\n## Introduction\nFirst of all, Tiptap v1 isn’t supported anymore and won’t receive any further updates.\n\nIf you’re still using Tiptap v1, you can find the documentation [here](https://v1.tiptap.dev/), but we strongly recommend that you upgrade to version 2.\n\nYes, it’s tedious work to upgrade your favorite text editor to a new API, but we made sure you’ve got enough reasons to upgrade to the newest version.\n\n* Autocompletion in your IDE (thanks to TypeScript)\n* Amazing documentation with 100+ pages and 100+ interactive examples\n* Active development, new features in the making, new releases every week\n* Tons of new extensions\n* Well-tested code base\n\nThe new API will look pretty familiar to you, but there are a ton of changes though. To make the upgrade a little bit easier, here is everything you need to know:\n\n## Uninstall Tiptap v1\nThe whole package structure has changed, we even moved to another npm namespace, so you’ll need to remove the old version entirely before upgrading to Tiptap 2.\n\nOtherwise you’ll run into an exception, for example “looks like multiple versions of prosemirror-model were loaded”.\n\n```bash\nnpm uninstall tiptap tiptap-commands tiptap-extensions tiptap-utils\n```\n\n## Install Tiptap v2\n\nOnce you have uninstalled the old version of Tiptap, install the new Vue 2 package, the ProseMirror library and the starter kit:\n\n```bash\nnpm install @tiptap/vue-2 @tiptap/pm @tiptap/starter-kit\n```\n\n## Keep Tiptap v2 up to date\nWe are constantly releasing updates to Tiptap.\n\nUnfortunately, for npm there is no integrated tool to easily update your dependencies, but you can use the `npm-check` package:\n\n```bash\nnpm install -g npm-check\nnpm-check -u\n```\n\n## Explicitly register the Document, Text and Paragraph extensions\nTiptap 1 tried to hide a few required extensions from you with the default setting `useBuiltInExtensions: true`. That setting has been removed and you’re required to import all extensions. Be sure to explicitly import at least the [`Document`](/api/nodes/document), [`Paragraph`](/api/nodes/paragraph) and [`Text`](/api/nodes/text) extensions.\n\n```js\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    // all your other extensions\n  ],\n})\n```\n\nAnd we removed some settings: `dropCursor`, `enableDropCursor`, and `enableGapCursor`. Those are separate extensions now: [`Dropcursor`](/api/extensions/dropcursor) and [`Gapcursor`](/api/extensions/gapcursor). You probably want to load them, but if you don’t, just ignore this.\n\n## New names for most extensions\nWe switched to lowerCamelCase, so there’s a lot type names that changed. If you stored your content as JSON you need to loop through it and rename them. Sorry for that one.\n\n| Old type              | New type               |\n| --------------------- | ---------------------- |\n| ~~`bullet_list`~~     | `bulletList`           |\n| ~~`code_block`~~      | `codeBlock`            |\n| ~~`hard_break`~~      | `hardBreak`            |\n| ~~`horizontal_rule`~~ | `horizontalRule`       |\n| ~~`list_item`~~       | `listItem`             |\n| ~~`ordered_list`~~    | `orderedList`          |\n| ~~`table_cell`~~      | `tableCell`            |\n| ~~`table_header`~~    | `tableHeader`          |\n| ~~`table_row`~~       | `tableRow`             |\n| ~~`todo_list`~~       | `taskList` (new name!) |\n| ~~`todo_item`~~       | `taskItem` (new name!) |\n\n## Removed methods\nWe removed the `.state()` method. No worries though, it’s still available through `editor.state`.\n\n## New extension API\nIn case you’ve built some custom extensions for your project, you’re required to rewrite them to fit the new API. No worries, you can keep a lot of your work though. The `schema`, `commands`, `keys`, `inputRules` and `pasteRules` all work like they did before. It’s just different how you register them.\n\n```js\nimport { Node } from '@tiptap/core'\n\nconst CustomExtension = Node.create({\n  name: 'custom_extension',\n  addOptions() {\n    …\n  },\n  addAttributes() {\n    …\n  },\n  parseHTML() {\n    …\n  },\n  renderHTML({ node, HTMLAttributes }) {\n    …\n  },\n  addCommands() {\n    …\n  },\n  addKeyboardShortcuts() {\n    …\n  },\n  addInputRules() {\n    …\n  },\n  // and more …\n})\n```\n\nRead more about [all the nifty details building custom extensions](/guide/custom-extensions) in our guide.\n\n## Renamed settings and methods\n[We renamed a lot of settings and methods](/api/editor). Hopefully you can migrate to the new API with search & replace. Here is a list of what changed:\n\n| Old name        | New name    |\n| --------------- | ----------- |\n| ~~`autoFocus`~~ | `autofocus` |\n\n## Renamed commands\nAll new extensions come with specific commands to set, unset and toggle styles. So instead of `.bold()`, it’s now `.toggleBold()`. Also, we switched to lowerCamelCase, below are a few examples. Oh, and we renamed `todo_list`, to `taskList`, sorry for that one.\n\n| Old command              | New command                     |\n| ------------------------ | ------------------------------- |\n| `.redo()`                | `.redo()` (nothing changed)     |\n| `.undo()`                | `.undo()` (nothing changed)     |\n| ~~`.todo_list()`~~       | `.toggleTaskList()` (new name!) |\n| ~~`.blockquote()`~~      | `.toggleBlockquote()`           |\n| ~~`.bold()`~~            | `.toggleBold()`                 |\n| ~~`.bullet_list()`~~     | `.toggleBulletList()`           |\n| ~~`.code()`~~            | `.toggleCode()`                 |\n| ~~`.code_block()`~~      | `.toggleCodeBlock()`            |\n| ~~`.hard_break()`~~      | `.setHardBreak()`               |\n| ~~`.heading()`~~         | `.toggleHeading()`              |\n| ~~`.horizontal_rule()`~~ | `.setHorizontalRule()`          |\n| ~~`.italic()`~~          | `.toggleItalic()`               |\n| ~~`.link()`~~            | `.toggleLink()`                 |\n| ~~`.ordered_list()`~~    | `.toggleOrderedList()`          |\n| ~~`.paragraph()`~~       | `.setParagraph()`               |\n| ~~`.strike()`~~          | `.toggleStrike()`               |\n| ~~`.underline()`~~       | `.toggleUnderline()`            |\n| …                        | …                               |\n\n## MenuBar, BubbleMenu and FloatingMenu\nRead the dedicated [guide on creating menus](/guide/menus) to migrate your menus.\n\n## Commands can be chained now\nMost commands can be combined to one call now. That’s shorter than separate function calls in most cases. Here is an example to make the selected text bold:\n\n```js\neditor.chain().toggleBold().focus().run()\n```\n\nThe `.chain()` is required to start a new chain and the `.run()` is needed to actually execute all the commands in between. Read more about [the new Tiptap commands](/api/commands) in our API documentation.\n\n## .focus() isn’t called on every command anymore\nWe tried to hide the `.focus()` command from you with Tiptap 1 and executed that on every command. That led to issues in specific use cases, where you want to run a command, but don’t want to focus the editor.\n\nWith Tiptap v2 you have to explicitly call the `focus()` and you probably want to do that in a lot of places. Here is an example:\n\n```js\neditor.chain().focus().toggleBold().run()\n```\n\n## Event callbacks have fewer parameters\nThe new event callbacks have fewer parameters. The same things should be available through `this.` now. [Read more about events here.](/api/events)\n\n## Collaborative editing\nThe reference implementation for collaborative editing uses Y.js now. That’s a whole different thing. You still can use the Tiptap 1 extension, but it’s up to you to adapt it to the new extension API. If you’ve done this, don’t forget to share it with us so we can link to it from here!\n\nRead more about [the new collaborative editing experience](/guide/collaborative-editing) in our guide.\n\n## Marks don’t support node view anymore\nFor marks, node views are [not well supported in ProseMirror](https://discuss.prosemirror.net/t/there-is-a-bug-in-marks-nodeview/2722/2). There is also [a related issue](https://github.com/ueberdosis/tiptap/issues/613) for Tiptap 1. That’s why we removed it in Tiptap 2.\n\n## Become a sponsor\nTiptap wouldn’t exist without the funding of its community. If you fell in love with Tiptap, don’t forget to [become a sponsor](/sponsor) and make the maintenance, development and support sustainable.\n\nIn exchange, we’ll take you into our hearts, invite you to private repositories, add a `sponsor ♥` label to your issues and pull requests and more.\n"
    },
    {
        "url": "./overview/contributing.md",
        "date": "2024-01-17",
        "contents": "---\ntableOfContents: true\n---\n\n# Contributing\n\n## Introduction\nTiptap would be nothing without its lively community. Contributions have always been and will always be welcome. Here is a little bit you should know, before you send your contribution:\n\n## Welcome examples\n* Failing regression tests as bug reports\n* Documentation improvements, e. g. fix a typo, add a section\n* New features for existing extensions, e. g. a new configureable option\n* Well explained, non-breaking changes to the core\n\n## Won’t merge\n* New extensions, which we then need to support and maintain\n\n## Submit ideas\nMake sure to open an issue and outline your idea first. We’ll get back to you quickly and let you know if there is a chance we can merge your contribution.\n\n## Set up the development environment\nIt’s not too hard to tinker around with the official repository. You’ll need [Git](https://github.com/git-guides/install-git), [Node and NPM](https://nodejs.org/en/download/) installed. Here is what you need to do then:\n\n1. Copy the code to your local machine: `$ git clone git@github.com:ueberdosis/tiptap.git`\n2. Install dependencies: `$ npm install`\n3. Start the development environment: `$ npm run start`\n4. Open http://localhost:3000 in your favorite browser.\n5. Start playing around!\n\n## Our code style\nThere is an eslint config that ensures a consistent code style. To check for errors, run `$ npm run lint`. That’ll be checked when you send a pull request, too. Make sure it’s passing, before sending a pull request.\n\n## Testing for errors\nYour pull request will automatically execute all our existing tests. Make sure that they all pass, before sending a pull request. Run all tests locally with `$ npm run test` or run single tests (e. g. when writing new ones) with `$ npm run test:open`.\n\n## Creating your own extensions\nIf you want to create and maintain your own extensions, you can use your `create-tiptap-extension` CLI tool. It will create a new extension boilerplate with all necessary files and the build process. It's as easy as running\n\n```bash\nnpm init tiptap-extension\n```\n\nIf you want to let us know about your extension you can give us a hint on [Twitter](https://twitter.com/tiptap_editor) or [Discord](https://discord.gg/WtJ49jGshW).\n\n## Further questions\nAny further questions? Create a new issue or discussion in the repository. We’ll get back to you.\n"
    }
]