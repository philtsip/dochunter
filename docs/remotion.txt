[{"url":"https://www.remotion.dev/docs/parameterized-rendering","title":"Parameterized videos | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Passing props Defining a schema Visual editing Data fetching Variable duration How props get resolved Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Parameterized videos Parameterized videos  Remotion allows for ingesting, validating, visually editing, and transforming data that may be used to parametrize a video.  Data may influence the content of the video, or the metadata such as width, height, duration or framerate.  High-level overview​  Remotion allows the passing of props to a React component. Props are a React concept and take the shape of a JavaScript object.  To determine the data which gets passed to the video, the following steps are taken:  1 Default props are defined statically, so that the video can be designed in the Studio without any data.  The default props define the shape of the data. A schema can be defined and validated. In absence of data, default props can be edited in the Remotion Studio. 2 Input props may be specified when rendering a video to override the default props.  Input props will be merged together with default props, where input props have priority. 3 Using calculateMetadata(), postprocessing of the props may be performed and metadata be dynamically calculated.  For example, given a URL is passed as a prop, it may be fetched and the content added to the props. Asynchronous calculation of the video duration and other metadata is also possible here. 4 The final props are passed to the React component. The component may dynamically render content based on the props.  See here for a visual explanation and more details of how the resolution process works.  Table of contents​ Passing props Defining a Schema Visual editing Data fetching Variable metadata How props get resolved See also​  You can use the Remotion Player to display a Remotion component in a React app and dynamically change the content without rendering the video, to create experiences where the content updates in real-time.  Improve this page Ask on Discord Get help Previous Video manipulation Next Passing props High-level overview Table of contents See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/animating-properties","title":"Animating properties | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedAnimating properties Animating properties  Animation works by changing properties over time. Let's create a simple fade in animation.  If we want to fade the text in over 60 frames, we need to gradually change the opacity over time so that it goes from 0 to 1.  FadeIn.tsx export const FadeIn = () => {   const frame = useCurrentFrame();     const opacity = Math.min(1, frame / 60);     return (     <AbsoluteFill       style={{         justifyContent: \"center\",         alignItems: \"center\",         backgroundColor: \"white\",         fontSize: 80,       }}     >       <div style={{ opacity: opacity }}>Hello World!</div>     </AbsoluteFill>   ); }; Copy Using the interpolate helper function​  Using the interpolate() function can make animations more readable. The above animation can also be written as:  import { interpolate } from \"remotion\";   const opacity = interpolate(frame, [0, 60], [0, 1], {   /*                        ^^^^^   ^^^^^    ^^^^   Variable to interpolate ----|       |       |   Input range ------------------------|       |   Output range -------------------------------|  */   extrapolateRight: \"clamp\", }); Copy  In this example, we map the frames 0 to 60 to their opacity values (0, 0.0166, 0.033, 0.05 ...) and use the extrapolateRight setting to clamp the output so that it never becomes bigger than 1.  Using spring animations​  Spring animations are a natural animation primitive. By default, they animate from 0 to 1 over time. This time, let's animate the scale of the text.  import { spring, useCurrentFrame, useVideoConfig } from \"remotion\";   export const MyVideo = () => {   const frame = useCurrentFrame();   const { fps } = useVideoConfig();     const scale = spring({     fps,     frame,   });     return (     <div       style={{         flex: 1,         textAlign: \"center\",         fontSize: \"7em\",       }}     >       <div style={{ transform: `scale(${scale})` }}>Hello World!</div>     </div>   ); }; Copy  You should see the text jump in.     The default spring configuration leads to a little bit of overshoot, meaning the text will bounce a little bit. See the documentation page for spring() to learn how to customize it.  Always animate using useCurrentFrame()​  Watch out for flickering issues during rendering that arise if you write animations that are not driven by useCurrentFrame() – for example CSS transitions.  Read more about how Remotion's rendering works - understanding it will help you avoid issues down the road.  Improve this page Ask on Discord Get help Previous The fundamentals Next Reuse components Using the interpolate helper function Using spring animations Always animate using useCurrentFrame()  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/player/","title":"@remotion/player | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player API Reference Examples Scaling Code sharing Autoplay Getting the current time Preloading Best practices Avoiding flickers Lambda Cloud Run (Alpha) Building apps Player Installation in existing project Handling user video uploads Display a buffer state Upload with a presigned URL Build a Google Font picker Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Player @remotion/player  Using the Remotion Player you can embed Remotion videos in any React app and customize the video content at runtime.  Templates​  The following templates include the Player and Lambda rendering and are a good starting point for building a video app:  Next.js (App dir) Next.js (Pages dir) Remix Demo​  Play the video, then tweak the parameters below the video.  Hi there! Your favorite color is 0:00 / 0:11   Enter your name:    Select your favorite color:   Components​ <Player> Embed a Remotion composition in a web app <Thumbnail> Embed a still in a web app See also​ Installation API Improve this page Ask on Discord Get help Previous GPU in the cloud (Docker) Next Examples Templates Demo Components See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/resources","title":"List of resources | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing List of resources List of resources  This list tries to compile all templates, libraries, building blocks and examples in one place. Add more to the list by clicking the \"Improve this page\" button below!  Templates​ Hello World (TypeScript) Hello World (JavaScript) Blank React Three Fiber Stills Text-to-Speech Template (Azure) Text-to-Speech Template (Google) Audiogram Skia Tailwind Hello World Template with pull request video previews Library starter template with best practices SaaS starter Kits​ Remix template Next.js template Integrations​ React Three Fiber Skia Google Fonts Figma Lottie spline.design After Effects Rive GIFs Effects​ Motion Blur Noise Path animations Players​ Remotion Player Vidstack Player Animation helpers​ Remotion Animated remotion-transition-series remotion-time - use seconds instead of frame remotion-animate-text Full projects​ GitHub Unwrapped 2023 GitHub Unwrapped 2022 GitHub Unwrapped 2021 Podcast Maker Stargazer MapSnap (exclusive for Company License subscribers) Mockoops Product Hunt Today Remotion Weather Rewind Table (Airtable templates for Remotion) Conference Speaker Announcement Cards Motionly.video Examples​ Music with Tone.JS Animate a .glb model Typewriter effect D3.js Greenscreen Effect Noise visualization Audio visualization 3D Text Wavy TikTok Effect Apple \"Spring loaded\" animation ThreeJS particles demo Text Morphing Text warping Include GLTF models OpenGL transitions Conference talk in React Conference talk in React #2 Twitch stinger example DevContainer Template Usage with Anime.JS Displaying a spinner while content is loading Mapbox example Shader example Jump cuts without re-mounting CSS animations Globe.gl example Videos​  See the Showcase for videos made with Remotion.  Tutorials​ Spotify Wrapped Programmatic Stories Basketball Tracker Formula 1 Graphics Remotion Skia Tutorial Fireship: Remotion Tutorial CRT effect \"Create videos with Code\" by Prismic Integrate GreenSock with Remotion DVD Screensaver Tutorial Remotion Tutorial by Alfonso Graziano Tooling​ VS Code extension GIF Pull request previews Loading compositions remotely Hacks​ GitHub Actions Matrix renderer WebKit renderer Rustymotion - Rust renderer Side-by-side editor Humans​ Experts Support Success Stories Products​ Typeframes ClipPulse Augie Oxolo Hackreels AnimStats See also​ Remotion GitHub topic #resources and #showcase channel on Discord  Many resources in our documentation were left out from this list to avoid too much redundancy. Search the documentation to see if we have an article on what you are looking for!  Improve this page Ask on Discord Get help Previous Terminology Next v4.0 Migration Templates SaaS starter Kits Integrations Effects Players Animation helpers Full projects Examples Videos Tutorials Tooling Hacks Humans Products See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/render","title":"Render your video | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedRender your video Render your video  There are various ways to render your video.  Remotion Studio​  To render a video, click the \" Render\" button. Choose your preferred settings, then confirm using the Render video button.  CLI​  Render a video using render CLI command:  npx remotion render HelloWorld Copy  Modify the composition ID to select a different video to render, or add an output path at the end if you want to override the default.  You can leave out the composition name and a picker will be shown:  npx remotion render Copy SSR​  Remotion has a full-featured server-side rendering API. Read more about it on the server-side rendering API.  AWS Lambda​  Check out Remotion Lambda.  GitHub Actions​  You can also render a video using a GitHub Action.  Google Cloud Run​  An official Remotion package for Cloud Run is in development. Register your interest in Discord if you want to be a beta tester.  Remotion Studio deployment​  It’s possible to deploy the Remotion Studio onto a long-running server in the cloud, which can then be accessed by your non-technical team members using just a URL. Check out the Deploy the Remotion Studio guide to learn how to do this.  Variants​ Audio-only​  Instead of rendering a video, you can also just export the audio.  Image Sequence​  Instead of encoding as a video, you can use the --sequence command to output a series of image.  Still images​  If you want a single image, you can do so using the CLI or Node.JS API.  GIF​  See: Render as GIF  Transparent videos​  See: Creating overlays  See also​ CLI options Improve this page Ask on Discord Get help Previous Preview your video Next Transforms Remotion Studio CLI SSR AWS Lambda GitHub Actions Google Cloud Run Remotion Studio deployment Variants Audio-only Image Sequence Still images GIF Transparent videos See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/terminology","title":"Terminology | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Terminology Terminology  Here we try to explain the meaning of some terms that are used often in the documentation, but are not self-explanatory. Which terms would you like to have explained? Let us know!  Composition​  A composition is the definition of a renderable asset. It consists of a React component, width, height, FPS and a duration. It can be registered in the Remotion Studio by rendering a <Composition> (to render video or audio render target) or a <Still>.  In the Remotion Player, you don't use the <Composition> component, rather you pass the component and metadata directly to the <Player>.  Sequence​  A <Sequence> is a built-in component that manipulates the time for its children. For example, you might have an animation that starts at frame 0. If you would like to delay the animation, rather than refactoring the animation, you can wrap it in a <Sequence> and define a delay using the from prop.  Using a sequence, you can also trim the start and end of an animation by passing the durationInFrames prop.  Composition ID​  The string that you pass to the <Composition> component. You need the composition ID to reference what you would like to render, for example: npx remotion render src/index <composition-id>. See: Defining compositions  Bundle​  Once you have written your video in React, you need to bundle it using Webpack in order to render it. The output artifact of the bundling process is called the bundle. It is a folder containing HTML, CSS, JavaScript and other assets.  When you render using the command line, a bundle is automatically generated. When you are using the Node.JS APIs, you need to use the bundle() method.  Serve URL​  A serve URL is a URL under which the bundle is hosted. When rendering your video, Remotion will open a headless browser and visit that URL in order to make screenshots of it.  The most common use case for a serve URL is when rendering a video on Lambda, you need to deploy your bundle to Amazon S3, which will turn the bundle into a serve URL.  If you have a serve URL, you can also render a video locally by passing a serve URL instead of an entry point. A serve URL doesn't have to be on S3, it can be on any provider that supports static deployments (e.g. Netlify, Vercel or GitHub pages) or even be a URL that runs on Localhost.  Public Dir​  The public dir is the directory in which you can put assets that can be loaded using staticFile(). By default, it is the directory that is named public/ inside the Remotion Root.  Remotion Root​  The Remotion Root is the directory in which Remotion commands get executed in. It influences the default location of the public dir, the .env file and the config file amongst others. To determine the Remotion Root, take the directory from which you execute commands or run scripts, and go upwards until you hit a directory that contains a package.json file. Many Remotion CLI commands also print the Remotion Root directory if you pass --log=verbose.  Entry point​  The entry point is the file where the Remotion CLI and Node.JS APIs will look for a Remotion project.  By default in most templates, it is src/index.ts. In older projects, it may have an .tsx extension instead of .ts. The entry point can be passed to the render command, for example: npx remotion render src/index.ts. The entry point should call registerRoot(). If you render a video using npx remotion render, the entry point is printed in grey. You can customize the entry point in the config file using Config.setEntryPoint().  In the Remotion Player, there is no concept of an entry point. You directly pass a React component and metadata to the <Player>.  Remotion Studio​  The Remotion Studio is the editor that opens that when you run npx remotion studio or npx remotion preview. It allows fast editing and playback of compositions. It is included in the @remotion/cli package. It is not the same as the Remotion Player.  Remotion Preview​  The former name of the Remotion Studio, renamed in v4.0. Since the Preview gained more capabilities than just previewing, the name was not fitting anymore.  Remotion Player​  The Remotion Player is a React component <Player> that can be embedded into a React app. It can be used by installing the @remotion/player package into a React app (for example: Create React App, Next.JS, Remix). It is not the same as the Remotion Studio.  Concurrency​  For local rendering, concurrency refers to how many render processes are started in parallel. Each process holds a Chrome tab that renders web content and then screenshots it.  For rendering on Lambda, concurrency refers to the amount of Lambda functions that are spawned for a render.  Higher concurrency can lead to faster render times, but too high concurrency will lead to diminishing returns and to overload of the machines.  Input props​  Input props are data that can be passed to a render in order to parametrize the video. They can be obtained in two ways:  This data is passed as actual React props to the component that you defined in your composition Using the getInputProps() function, you can retrieve the props even outside your component, for example to dynamically change the duration or dimensions.  In the Remotion Studio, you can set default props to serve as placeholder data for designing your video. If your input props don't override the default props, the default props will be used. See: How props get resolved  In the Remotion Player, there are no default props, but you can pass inputProps directly to the <Player>.  Cloud Run Url​  For rendering on Cloud Run, this url is the address you use to access the service that performs the render. It is possible to make use of a custom domain, by visiting the console in GCP and navigating to Cloud Run.  Service Name​  For rendering on Cloud Run, this is the name of the deployed service. It can be used as an alternative to the full Cloud Run url.  Improve this page Ask on Discord Get help Previous HLS support (HTTP Live Streaming) Next List of resources Composition Sequence Composition ID Bundle Serve URL Public Dir Remotion Root Entry point Remotion Studio Remotion Preview Remotion Player Concurrency Input props Cloud Run Url Service Name  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/ssr","title":"Server-Side Rendering | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Overview Example Dockerizing a Remotion app Deploy Remotion Studio Multiple cores on Linux Using the GPU GPU in the cloud (bare) GPU in the cloud (Docker) Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Server-side rendering Server-Side Rendering  Remotion's rendering engine is built with Node.JS, which makes it easy to render a video in the cloud.  Render a video on AWS Lambda​  The easiest and fastest way to render videos in the cloud is to use @remotion/lambda.  Render a video using Node.js APIs​  We provide a set of APIs to render videos using Node.js and Bun. See an example or the API reference for more information.  Render using GitHub Actions​  The Hello World starter template includes a GitHub Actions workflow file .github/workflows/render-video.yml.  1 Commit the template to a GitHub repository. 2 On GitHub, click the Actions tab. 3 Select the Render video workflow on the left. 4 A Run workflow button should appear. Click it. 5 Fill in the props of the root component and click Run workflow. 6 After the rendering is finished, you can download the video under Artifacts.    Note that running the workflow may incur costs. However, the workflow will only run if you actively trigger it.  See also: Passing input props in GitHub Actions  Render a video using Docker​  See: Dockerizing a Remotion project  Render a video using GCP Cloud Run (Alpha)​  Check out the experimental Cloud Run package.  API reference​ getCompositions() List available compositions selectComposition() Get a composition renderMedia() Render a video or audio renderFrames() Render a series of images renderStill() Render a single image stitchFramesToVideo() Turn images into a video openBrowser() Open a Chrome browser to reuse across renders makeCancelSignal() Create token to later cancel a render getVideoMetadata() Get metadata from a video file in Node.js getSilentParts() Obtain silent portions of a video or audio ensureFfmpeg() Check for ffmpeg binary and install if not existing ensureFfprobe() Check for ffprobe binary and install if not existing getCanExtractFramesFast() Probes for fast extraction for <OffthreadVideo> Improve this page Ask on Discord Get help Previous <Video> vs. <OffthreadVideo> Next Overview Render a video on AWS Lambda Render a video using Node.js APIs Render using GitHub Actions Render a video using Docker Render a video using GCP Cloud Run (Alpha) API reference  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/#prerequisites","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/lambda","title":"@remotion/lambda | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda API Reference Setup Authentication Permissions Region selection Concurrency Runtime Disk size FAQ Light client Custom Layers Custom output destination Production Checklist Webhooks Auto-delete renders Troubleshooting Using without IAM users Rendering from PHP Rendering from Go Rendering from Python Serverless.com integration Insights Multiple buckets Bucket naming Optimizing for cost Optimizing for speed Limits Prerelease Changelog Upgrading Lambda Uninstall Lambda Cannot create public bucket Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Lambda @remotion/lambda Also available as a 11min video Integrate Remotion Lambda into your app  Render Remotion videos on AWS Lambda. This is the fastest, most cost-efficient and most scalable way to render Remotion videos.  When should I use it?​ Your videos are less than 30 minutes long at Full HD. approximately until the 15min AWS Timeout limit is hit You stay within the (AWS Lambda Concurrency Limit) or you are requesting an increase from AWS. You are fine with using Amazon Web Services in one of the supported regions.  If one of those constraints is a dealbreaker for you, resort to normal server-side rendering or consider using Cloud Run.  How it works​ A Lambda function and a S3 bucket is created on AWS. A Remotion project gets deployed to a S3 bucket as a website. The Lambda function gets invoked and opens the Remotion project. A lot of Lambda functions are created in parallel which each render a small part of the video The initial Lambda function downloads the videos and stitches them together. The final video gets uploaded to S3 and is available for download. Architecture​ Lambda function: Requires a layer with Chromium, currently hosted by Remotion. Only one Lambda function is required, but it can execute different actions. S3 bucket: Stores the projects, the renders, and render metadata. CLI: Allows to control the overall architecture from the command line. Is installed by adding @remotion/lambda to a project. Node.JS API: Has the same features as the CLI but is easier to use programmatically Setup / Installation​  See here  Region selection​  The following regions are available for Remotion Lambda:  eu-central-1 eu-west-1 eu-west-2 eu-west-3 eu-south-1 eu-north-1 us-east-1 us-east-2 us-west-1 us-west-2 af-south-1 ap-south-1 ap-east-1 ap-southeast-1 ap-southeast-2 ap-northeast-1 ap-northeast-2 ap-northeast-3 ca-central-1 me-south-1 sa-east-1  See here for configurations and considerations.  Limitations​ You only have up to 10GB of storage available in a Lambda function. This must be sufficient for both the separated chunks and the concatenated output, therefore the output file can only be about 5GB maximum, limiting the maximum video length to around 2 hours of Full HD video. Lambda has a global limit of 1000 concurrent lambdas per region by default, although it can be increased. Cost​  Most of our users render multiple minutes of video for just a few pennies. The exact cost is dependent on the region, assigned memory, type of video, parallelization and other parameters. For each render, we estimate a cost and display it to you. You might also need a Remotion license (see below).  AWS permissions​  Remotion Lambda requires you to create an AWS account and create a user with some permissions attached to it. We require only the minimal amount of permissions required for operating Remotion Lambda.  Read more about permissions  CLI​  You can control Remotion Lambda using the npx remotion lambda command.  Read more about the CLI  Node.JS API​  Everything you can do using the CLI, you can also control using Node.JS APIs. See the reference here.  License​  The standard Remotion license applies. https://github.com/remotion-dev/remotion/blob/main/LICENSE.md  Companies need to buy 1 cloud rendering seat per 2000 renders per month - see https://remotion.pro  Uninstalling​  We make it easy to remove all Remotion resources from your AWS account without leaving any traces or causing further costs.  How to uninstall Remotion Lambda  Improve this page Ask on Discord Get help Previous Avoiding flickers Next Setup When should I use it? How it works Architecture Setup / Installation Region selection Limitations Cost AWS permissions CLI Node.JS API License Uninstalling  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/the-fundamentals","title":"The fundamentals | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedThe fundamentals The fundamentals React components​  The idea of Remotion is to give you a frame number and a blank canvas, to which you can render anything you want using React. This is an example React component that renders the current frame as text:  MyComposition.tsx import { AbsoluteFill, useCurrentFrame } from \"remotion\";   export const MyComposition = () => {   const frame = useCurrentFrame();     return (     <AbsoluteFill       style={{         justifyContent: \"center\",         alignItems: \"center\",         fontSize: 100,         backgroundColor: \"white\",       }}     >       The current frame is {frame}.     </AbsoluteFill>   ); }; Copy  A video is a function of images over time. If you change content every frame, you'll end up with an animation.  Video properties​  A video has 4 properties:  width in pixels. height in pixels. durationInFrames: the number of frames which the video is long. fps: framerate of the video.  You can obtain these values from the useVideoConfig() hook:  import { AbsoluteFill, useVideoConfig } from \"remotion\";   export const MyComposition = () => {   const { fps, durationInFrames, width, height } = useVideoConfig();     return (     <AbsoluteFill       style={{         justifyContent: \"center\",         alignItems: \"center\",         fontSize: 60,         backgroundColor: \"white\",       }}     >       This {width}x{height}px video is {durationInFrames / fps} seconds long.     </AbsoluteFill>   ); }; Copy NOTE  A video's first frame is 0 and its last frame is durationInFrames - 1.  Compositions​  A composition is the combination of a React component and video metadata.  By rendering a <Composition> component in src/Root.tsx, you can register a renderable video and make it visible in the Remotion sidebar.  src/Root.tsx export const RemotionRoot: React.FC = () => {   return (     <Composition       id=\"MyComposition\"       durationInFrames={150}       fps={30}       width={1920}       height={1080}       component={MyComposition}     />   ); }; Copy NOTE  You can register multiple compositions in src/Root.tsx by wrapping them in a React Fragment: <><Composition/><Composition/></>  Improve this page Ask on Discord Get help Previous Installation Next Animating properties React components Video properties Compositions  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/#scaffolding-a-new-project","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/api","title":"API overview | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils API overview API overview Command line Reference for the npx remotion commands Configuration file Reference for the remotion.config.ts file Packages remotion Core APIs: useCurrentFrame(), interpolate(), etc. @remotion/bundler Create a Webpack bundle from Node.JS @remotion/player Play a Remotion video in the browser @remotion/lambda Render videos and stills on AWS Lambda @remotion/cloudrun Render videos and stills on GCP Cloud Run @remotion/gif Include a GIF in your video @remotion/media-utils Obtain info about video and audio @remotion/tailwind Utilities for using TailwindCSS in Remotion @remotion/three Create 3D videos using React Three Fiber @remotion/skia Low-level graphics using React Native Skia @remotion/lottie Include a Lottie animation in your video @remotion/preload Preload video and audio in the Player @remotion/renderer Render video, audio and stills from Node.JS @remotion/paths Manipulate and obtain info about SVG paths @remotion/noise Generate noise effects @remotion/shapes Generate SVG shapes @remotion/transitions Transition between scenes @remotion/layout-utils Layout helpers Improve this page Ask on Discord Get help Next CLI reference  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/brownfield","title":"Installing Remotion in an existing project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Player Installation in existing project Handling user video uploads Display a buffer state Upload with a presigned URL Build a Google Font picker Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Building appsInstallation in existing project Installing Remotion in an existing project  Remotion can be installed into existing projects, such as Next.JS, Remix, Vite or Create React App, as well as server-only projects that run on Node.JS. Get started by adding the following packages:  npm yarn pnpm npm i @remotion/cli remotion Copy If you'd like to embed a Remotion video in your existing React app, install @remotion/player as well. If you'd like to render a video using the Node.JS APIs, install @remotion/renderer as well. If you'd like to trigger a render on Remotion Lambda, install @remotion/lambda as well. Setting up the folder structure​  Create a new folder for the Remotion files. It can be anywhere and assume any name, in this example we name it remotion and put it in the root of our project. Inside the folder you created, create 3 files:  remotion/Composition.tsx export const MyComposition = () => {   return null; }; Copy remotion/Root.tsx import React from \"react\"; import { Composition } from \"remotion\"; import { MyComposition } from \"./Composition\";   export const RemotionRoot: React.FC = () => {   return (     <>       <Composition         id=\"Empty\"         component={MyComposition}         durationInFrames={60}         fps={30}         width={1280}         height={720}       />     </>   ); }; Copy remotion/index.ts import { registerRoot } from \"remotion\"; import { RemotionRoot } from \"./Root\";   registerRoot(RemotionRoot); Copy  The file that calls registerRoot() is now your Remotion entrypoint.  NOTE  Watch out for import aliases in your tsconfig.json that will resolve import {...} from \"remotion\" to the remotion folder. We recommend to not use paths without a prefix.  Starting the Studio​  Start the Remotion Studio using the following command:  npx remotion studio remotion/index.ts Copy  Replace remotion/index.ts with your entrypoint if necessary.  Render a video​  Render our a video using  npx remotion render remotion/index.ts MyComp out.mp4 Copy  Replace the entrypoint, composition name and output filename with the values that correspond to your usecase.  Install the ESLint Plugin​  Remotion has an ESLint plugin that warns about improper usage of Remotion APIs. To add it to your existing project, install it:  npm yarn pnpm npm i @remotion/eslint-plugin Copy  This snippet will enable the recommended rules only for the Remotion files:  .eslintrc {   \"plugins\": [\"@remotion\"],   \"overrides\": [     {       \"files\": [\"remotion/*.{ts,tsx}\"],       \"extends\": [\"plugin:@remotion/recommended\"]     }   ] } Copy Embed a Remotion video into your React app​  You can use the <Player> component to display a Remotion video in your React project. Read the separate page about it for instructions.  Improve this page Ask on Discord Get help Previous Uninstall Cloud Run Next Handling user video uploads Setting up the folder structure Starting the Studio Render a video Install the ESLint Plugin Embed a Remotion video into your React app  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/studio","title":"Remotion Studio | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedPreview your video Remotion Studio  You can preview your video by starting the Remotion Studio:  Regular templates Next.js and Remix templates npm start Copy  This is a shorthand for the studio command of the Remotion CLI:  npx remotion studio Copy  A server will be started on port 3000 (or a higher port if it isn't available) and the Remotion Studio should open in the browser.  Playback controls​  Use the  button or Space to play your video.  Use the and  buttons to jump 1 frame backwards or forwards. You can also use the arrow keys ◀︎ and ▶︎ to do so. If you hold the Shift key, you jump 1 second at a time.  Advanced playback controls Toggling transparent background​  By default, the background of your video is a checkerboard pattern signifying that the pixels are transparent. You can press  button to disable this behavior which will render a black background.  In / Out Markers​  Using In and Out markers, you can play only a certain range of your video.  Click  or press I to set an in marker. Click  or press O to set an out marker.  To clear a marker, press X. Alternatively, you can toggle a marker by clicking on it.  To move a marker, drag a marker somewhere else.  Change the canvas size​  By default the video scales to fit in the preview window. To change the canvas size:  1 Pinch to zoom 2 Hold Shift and use the scroll wheel or 3Use the dropdown that says Fit Change the playback speed​  By default the video will play in regular speed. You can speed up or slow down the video by clicking on the dropdown that says 1x.  You may also choose a negative value which will play the video in reverse. Note that <Audio/>, <Video/> and <OffthreadVideo/> tags cannot be played in reverse, this is a browser limitation.  Render a composition​  Click on the Render button or press R to open the Render dialog from where you can adjust settings and render your composition.  If you are using In and Out Markers, the render dialog will by default only render the selected portion.  Quick Switcher​  Use ⌘K / Ctrl+K to access the Quick Switcher to quickly change compositions. Start your input with > to switch to the command palette. Start your input with ? to search the documentation.  Compositions panel​  Click on the Compositions panel to view all registered <Composition />'s in your project. Click on a composition to preview it or click the rocket icon to render it.  Assets panel​  Click on the Assets panel to view a representation of your public/ folder. Click on an asset to preview it.  Renders panel​  Click on the Renders panel to see the progress of a render you have triggered via the studio. You may cancel, retry and preview renders from here.  Props panel​  Click on the Props panel to view and edit the props of the currently selected composition. To do so you, you need to define a Zod schema.  Keyboard shortcuts and help​  Press ? to open the help dialog which shows you all available keyboard shortcuts. In the opened dialog, enter a search term to search our documentation.  See also​ Deploying the Remotion Studio Improve this page Ask on Discord Get help Previous Reuse components Next Render your video Playback controls Toggling transparent background In / Out Markers Change the canvas size Change the playback speed Render a composition Quick Switcher Compositions panel Assets panel Renders panel Props panel Keyboard shortcuts and help See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/reusability","title":"Making components reusable | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedReuse components Making components reusable  React components allow us to encapsulate video logic and reuse the same visuals multiple times.  Consider a title - to make it reusable, factor it out into its own component:  MyComposition.tsx import { AbsoluteFill, interpolate, useCurrentFrame } from \"remotion\";   const Title: React.FC<{ title: string }> = ({ title }) => {   const frame = useCurrentFrame();   const opacity = interpolate(frame, [0, 20], [0, 1], {     extrapolateRight: \"clamp\",   });     return (     <div style={{ opacity, textAlign: \"center\", fontSize: \"7em\" }}>{title}</div>   ); };   export const MyVideo = () => {   return (     <AbsoluteFill>       <Title title=\"Hello World\" />     </AbsoluteFill>   ); }; Copy  To render multiple instances of the title, duplicate the <Title> component.  You can also use the <Sequence> component to limit the duration of the first title and time-shift the appearance of the second title.  import { Sequence } from \"remotion\";   export const MyVideo = () => {   return (     <AbsoluteFill>       <Sequence durationInFrames={40}>         <Title title=\"Hello\" />       </Sequence>       <Sequence from={40}>         <Title title=\"World\" />       </Sequence>     </AbsoluteFill>   ); }; Copy  You should see two titles appearing after each other.  Note that the value of useCurrentFrame() has been shifted in the second instance, so that it returns 0 only when the absolute time is 40. Before that, the sequence was not mounted at all.  Sequences by default are absolutely positioned - you can use layout=\"none\" to make them render like a regular <div>.  See also​ <Sequence> component Improve this page Ask on Discord Get help Previous Animating properties Next Preview your video See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/license","title":"License & Pricing | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing License & Pricing License & Pricing  Remotion is free to use if you are:  an individual a for-profit organisation with up to 3 employees a non-profit or not-for-profit organisation evaluating whether Remotion is a good fit, and are not yet using it in a commercial way  If you don't qualify for any of the above, you need to acquire a company license. Visit remotion.pro for pricing and buying a license.  When in doubt, read the LICENSE file and the Company License FAQ before using Remotion. You can contact us if you need clarification whether you can use Remotion in your project for free.  Improve this page Ask on Discord Get help Previous Testing prereleases  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/cloudrun-alpha","title":"Cloud Run Alpha | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Overview Setup Permissions Generate .env File Region selection Production Checklist Instance Count Multiple buckets Limits Light client Upgrading Cloud Run Uninstall Cloud Run Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Cloud Run (Alpha) Cloud Run Alpha  Help us shape Remotion Cloud Run!  Cloud Run is an alternative option to Remotion Lambda. Where Lambda offers a cloud-based rendering solution on AWS (Amazon Web Services), Cloud Run makes use of GCP (Google Cloud Platform).  What to test​  We are looking for feedback on the experience of setting up a GCP Project for Remotion Cloud Run, as well as the required components for rendering on the cloud:  Deploy a rendering service (in Lambda, a service is known as a function). Deploy a Remotion project to GCP Cloud Storage (in Lambda, the storage solution is S3). Render a composition stored in Cloud Storage on a Cloud Run service.  We are welcoming any bug reports.  1. Install @remotion/cloudrun​ npm yarn pnpm npm i @remotion/cloudrun Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Your package.json should look like the following:    \"@remotion/cli\": \"4.0.0\", // Replace 4.0.0 with the current version   \"@remotion/cloudrun\": \"4.0.0\", // Remove any `^` character   // ...   \"remotion\": \"4.0.0\", Copy  From v4.0.18, Cloud run is distributed together with the main release of Remotion. Before that, you had to install the alpha release (see below).  Changelog (moved)​  From 4.0.18 on, see changes here.  4.0.18​  Remotion Cloud Run is now distributed together with the main release of Remotion. You no longer need to switch to the alpha release, although Remotion Cloud Run is still alpha software. The changelog is now part of the main changelog.  4.1.0-alpha12​  Includes features and bugfixes from v4.0.17. Includes a fix for streaming progress sometimes throwing an exception.  4.1.0-alpha11​  Includes bugfixes from v4.0.12.  4.1.0-alpha9​ Known issues​ any internal errors created by Remotion from within the service are not currently sent back in the error response to the renderMediaOnCloudrun and renderStillOnCloudrun APIs (these APIs are also used within the CLI). For these errors, users will need to check the logs for now. Improvements​ Artifact registry, used to store versioned images for deploying services, now has two folders - production and development. Provide helpful response when Cloud Run crashes during render. CLI alerts user there was a crash, fetches logs, determines if cause was likely memory or timeout issue. API can receive a success or crash response New response documented Default concurrency for rendering media is now 100%. This will set the concurrency equal to the number of cores the deployed service has. 4.1.0-alpha5​ Fix input props not working for dynamic metadata Apply changes from 4.0.0-alpha20. 4.1.0-alpha4​  Fixed schema error when invoking a render.  Bug fixes leading to public testing.  Issue Resolution Rendering a still via CLI with defaults results in error - You can only pass the quality option if imageFormat is 'jpeg'. Migrated to V4 method, using internalRenderStill() instead of renderStill(). Noticed missing options, added them in and documented. 4.1.0-alpha3​  Bug fixes leading to public testing.  Issue Resolution When deploying a service, the image didn't exist in Google Artifact Registry. Added publish script that runs submit.mjs, automatically deploying the image, tagged with the version number. Functions folder wasn't included in dist folder, so no CLI commandswould work. Removed this from .npmignore, so that it is included. When using the CLI to request a render without passing a composition name, it fails to list out compositions to choose from Issue raised, present in V4 for Lambda also. Service name structuring clips off alpha version denominator. During alpha, this will make it impossible to deploy multiple services spanning alpha versions. Create new name formatting that meets requirements. Added tests for this. CLI commands for rendering not aligned with Remotion Lambda. npx remotion cloudrun render media is now npx remotion cloudrun render.  npx remotion cloudrun render still is now npx cloudrun remotion still.  Documentation also updated. 4.1.0-alpha2​  Initial cloud run alpha release 🎉.  Improve this page Ask on Discord Get help Previous Cannot create public bucket Next Overview What to test 1. Install @remotion/cloudrun Changelog (moved) 4.0.18 4.1.0-alpha12 4.1.0-alpha11 4.1.0-alpha9 4.1.0-alpha5 4.1.0-alpha4 4.1.0-alpha3 4.1.0-alpha2  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/#installation-in-existing-projects","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/support","title":"Support Policy | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help How to get help Discord GitHub Issues Support Policy Miscellaneous FAQ Contributing License & Pricing Get helpSupport Policy Support Policy  The Remotion team provides no guarantee for support, and you should not hold the expectation to receive any help.  However, we welcome you to ask questions and invest a lot of time into answering them. Follow the steps below if have a question that you would like to get answered.  How to ask for help​  See here for channels where you can ask for help as well as for best practices for asking questions.  Prioritized support​  Company license customers can get a  Company License badge on Discord for each Developer Seat they subscribe to. The badge can be activated on remotion.pro.  If posted in a public channel, the Remotion team will try to prioritize your question, albeit no guarantee of support is given.  We still expect company license subscribers to follow the best practices for asking questions outlined above.  Paid consulting​  Our Remotion Experts are available for technical advice and guidance. With their extensive experience in creating Remotion projects, they will surely be of great help.  You can also request a consultation session with Remotion's creator here. This is the only way to receive support via video call fom the Remotion team.  When we can't help​  We don't provide support if:  the guidelines above were not followed low effort was put into first solving the problem yourself your question is lacking reproduction or information the cause of problems is due to poor React or JavaScript skills our Code of Conduct is violated  Remotion is targeted towards developers and therefore basic skills in React and web development are expected. You should also be mindful of the limitations of those technologies as we cannot help you overcome them.  See also​ Get help Improve this page Ask on Discord Get help Previous Get help Next Security How to ask for help Prioritized support Paid consulting When we can't help See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/#","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/#__docusaurus_skipToContent_fallback","title":"Creating a new project | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Installation The fundamentals Animating properties Reuse components Preview your video Render your video Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Getting startedInstallation Creating a new project Prerequisites​  To use Remotion, you need at least Node 16 or Bun 1.0.3.  Scaffolding a new project​  You can initialize a new Remotion video using  npm bun pnpm yarn npm init video Copy  Choose the template that is most suitable for you. For your first project, we recommend the Hello World template.  After the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:  npm start Copy Additional information for Linux users Installation in existing projects​  Want to install Remotion in an existing project? Go here instead: Installation in existing projects  Improve this page Ask on Discord Get help Next The fundamentals Prerequisites Scaffolding a new project Installation in existing projects  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/bun","title":"Bun support | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous Security Chromium flags Temporary directory Thorium browser --gl flag Bun support Standalone functions FAQ Contributing License & Pricing MiscellaneousBun support Bun support  Remotion is excited about Bun, and we mostly support it (from v1.0.3).  As a package manager​  You can use bun i to initialize all of our Remotion templates. To scaffold a new project with bun, use:  bun create video Copy  Note that by default, Node.js will continue to be used as the runtime.  As a runtime​  As of Bun 1.0.14 and Remotion 4.0.43, the following issues are known:  ⚠️ The lazyComponent prop on <Composition> and <Player> does not work, and this feature is automatically disabled. ⚠️ A server-side rendering script may not quit automatically after it is done running. ⚠️ In a GitHub Action running on Ubuntu, the stitching state is not reached and the workflow will freeze.  Feel free to file more issues with Remotion if you find them.  Previous issues listed here have been resolved as of Bun 1.0.3.  For contributors​  Start the example testbed using bun run start-bun.  Improve this page Ask on Discord Get help Previous --gl flag Next Standalone functions As a package manager As a runtime For contributors  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/get-help","title":"Get help | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help How to get help Discord GitHub Issues Support Policy Miscellaneous FAQ Contributing License & Pricing Get help Get help  To receive help, either:  1 File an issue under remotion.dev/issue 2 Write in the #help channel or #help-forum on remotion.dev/discord Provide information​  Provide information that seems relevant to the issue. The more information that you give, the more we are able to help!  When you get an error:  1 Paste the full error message, including stack trace. 2 Provide the code or command that caused this error.    When you don't get an error:  1 Provide the code or command that you executed. 2 Describe what you expected.    Always mention the Remotion version:  npx remotion versions Copy Investigate yourself​  The following might also be useful information to us:  1 What have you already tried? 2 Do you have an suspicion what might cause the issue? 3 Does the issue go away if you delete certain code? 4 Do you have any unusual parts in your stack or OS? Do​ 1 Use search engines or ChatGPT to solve React-specific problems. 2 Search over 1100+ GitHub issues and 400+ documentation pages. 3 Attempt to find the root cause of an issue by narrowing down the code. 4 Provide relevant code snippets or reproductions. Do not​ 1 Ask for support using email or direct messages. 2 Ask without searching the docs first.  Paid support​  Our Remotion Experts are available for technical advice and guidance. With their extensive experience in creating Remotion projects, they will surely be of great help.  You can also request a consultation session with Remotion's creator here. This is the only way to receive support via video call fom the Remotion team.  Support policy​  See our policy on providing support.  See also​ Debugging render failures Improve this page Ask on Discord Get help Previous v2.0 Migration Next Support Policy Provide information Investigate yourself Do Do not Paid support Support policy See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/preload","title":"@remotion/preload | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload preloadVideo() preloadAudio() preloadImage() preloadFont() resolveRedirect() @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/preload @remotion/preload  This package provides functions for preloading assets. While preload is not necessary for rendering, it can help with seamless playback in the <Player /> and in the Studio. Currently, three functions are implemented:  preloadVideo() Preload a video source preloadAudio() Preload an audio source preloadFont() Preload a font preloadImage() Preload an image resolveRedirect() Get the definitive URL after all redirects  An alternative to @remotion/preload is the prefetch() API. See @remotion/preload vs prefetch() to decide which one is better for your usecase.  Installation​ npm yarn pnpm npm i @remotion/preload Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Improve this page Ask on Discord Get help Previous Finding Lottie files Next preloadVideo() Installation  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/rive/","title":"@remotion/rive | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive Overview <RemotionRiveCanvas> @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/rive @remotion/rive  This package provides a component for rendering Rive animations in Remotion.  Installation​  Install @remotion/rive  npm yarn pnpm npm i @remotion/rive Copy API​ <RemotionRiveCanvas> Render a Rive animation License​  Remotion License  Improve this page Ask on Discord Get help Previous makePolygon() Next Overview Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/player","title":"@remotion/player | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player API Reference Examples Scaling Code sharing Autoplay Getting the current time Preloading Best practices Avoiding flickers Lambda Cloud Run (Alpha) Building apps Player Installation in existing project Handling user video uploads Display a buffer state Upload with a presigned URL Build a Google Font picker Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Player @remotion/player  Using the Remotion Player you can embed Remotion videos in any React app and customize the video content at runtime.  Templates​  The following templates include the Player and Lambda rendering and are a good starting point for building a video app:  Next.js (App dir) Next.js (Pages dir) Remix Demo​  Play the video, then tweak the parameters below the video.  Hi there! Your favorite color is 0:00 / 0:11   Enter your name:    Select your favorite color:   Components​ <Player> Embed a Remotion composition in a web app <Thumbnail> Embed a still in a web app See also​ Installation API Improve this page Ask on Discord Get help Previous GPU in the cloud (Docker) Next Examples Templates Demo Components See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/gif","title":"@remotion/gif | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif <Gif> getGifDurationInSeconds() preloadGif() @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/gif @remotion/gif  You can install this package from NPM to get a component for displaying GIFs that synchronize with Remotions useCurrentFrame().  npm yarn pnpm npm i @remotion/gif Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  APIs​  The following APIs are available:  <Gif> Render a GIF getGifDurationInSeconds() Get the runtime of a GIF preloadGif() Prepare a GIF for displaying in the Player Improve this page Ask on Discord Get help Previous <Thumbnail> Next <Gif> APIs  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/paths/","title":"@remotion/paths | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths getLength() getPointAtLength() getTangentAtLength() getInstructionIndexAtLength() reversePath() normalizePath() interpolatePath() evolvePath() resetPath() getSubpaths() translatePath() warpPath() scalePath() getBoundingBox() extendViewBox() parsePath() serializeInstructions() reduceInstructions() getParts() @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/paths @remotion/paths  A package providing utility functions for dealing with SVG paths. This package includes code from svg-path-properties, svg-path-reverse, svgpath, svg-path-bbox, translate-svg-path and d3-interpolate-path with the following improvements:  Functional style APIs First class Typescript types Documentation with examples ESM import style  This package has no dependencies, meaning this package can be used without Remotion.  npm pnpm yarn npm i @remotion/paths Copy Functions​ getLength() Obtain length of an SVG path getPointAtLength() Get coordinates at a certain point of an SVG path getTangentAtLength() Gets tangents x and y of a point which is on an SVG path reversePath() Switch direction of an SVG path normalizePath() Replace relative with absolute coordinates interpolatePath() Interpolates between two SVG paths evolvePath() Animate an SVG path translatePath() Translates the position of an path against X/Y coordinates warpPath() Remap the coordinates of a path scalePath() Grow or shrink the size of the path getBoundingBox() Get the bounding box of a SVG path resetPath() Translates an SVG path to (0, 0) extendViewBox() Widen an SVG viewBox in all directions getSubpaths() Split SVG path into its parts parsePath() Parse a string into an array of instructions serializeInstructions() Turn an array of instructions into a SVG path reduceInstructions() Reduce the amount of instruction types License​  MIT  Improve this page Ask on Discord Get help Previous resolveRedirect() Next getLength() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/motion-blur/","title":"@remotion/motion-blur | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur <Trail> <CameraMotionBlur> @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/motion-blur @remotion/motion-blur  Available from v3.2.31  Higher order components that create a motion blur and trail effects.  npm pnpm yarn npm i @remotion/motion-blur Copy Components​ <Trail> Add a trail effect to children <CameraMotionBlur> Add a natural camera motion blur effect to children License​  MIT  Improve this page Ask on Discord Get help Previous visualizeAudio() Next <Trail> Components License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/lambda/api","title":"@remotion/lambda | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda CLI Reference estimatePrice() deployFunction() deleteFunction() getFunctionInfo() getFunctions() deleteSite() deploySite() getAwsClient() getRegions() getSites() downloadMedia() deleteRender() getUserPolicy() getRolePolicy() getCompositionsOnLambda() getOrCreateBucket() getRenderProgress() presignUrl() renderMediaOnLambda() renderStillOnLambda() simulatePermissions() speculateFunctionName() validateWebhookSignature() @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/lambda @remotion/lambda npm yarn pnpm npm i @remotion/lambda Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  See the setup guide for complete instructions on how to get started.  APIs​  The following Node.JS are available:  estimatePrice() Estimate the price of a render deployFunction() Create a new function in AWS Lambda deleteFunction() Delete a function in AWS Lambda getFunctionInfo() Gets information about a function getFunctions() Lists available Remotion Lambda functions getCompositionsOnLambda() Gets list of compositions inside a Lambda function deleteSite() Delete a bundle from S3 deploySite() Bundle and upload a site to S3 getAwsClient() Access the AWS SDK directly getRegions() Get all available regions getSites() Get all available sites downloadMedia() Download a render artifact from S3 getUserPolicy() Get the policy JSON for your AWS user getRolePolicy() Get the policy JSON for your AWS role getOrCreateBucket() Ensure a Remotion S3 bucket exists getRenderProgress() Query the progress of a render presignUrl() Make a private file public to those with the link renderMediaOnLambda() Trigger a video or audio render renderStillOnLambda() Trigger a still render simulatePermissions() Ensure permissions are correctly set up speculateFunctionName() Get the lambda function name based on its configuration validateWebhookSignature() Validate an incoming webhook request is authentic CLI​  See here for a list of CLI commands.  Improve this page Ask on Discord Get help Previous <CameraMotionBlur> Next estimatePrice() APIs CLI  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/cli","title":"Command line reference | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line studio render still compositions lambda cloudrun benchmark install versions upgrade ffmpeg ffprobe gpu help Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils Command line Command line reference How to use​ You can access the CLI by running npx remotion inside a npm project using remotion, yarn remotion inside a yarn project and pnpm exec remotion inside a pnpm project. For compactness, in the documentation we always say npx remotion. Inside an npm script, you don't need the npx prefix. Commands​  The following commands are available - you can always run them using npx remotion or even without the npx prefix if you put the command inside an npm script.  studio Start the Remotion Studio render Render video or audio still Render a still image compositions List available compositions lambda Control Remotion Lambda benchmark Measure and optimize render time versions List and validate Remotion package versions upgrade Upgrade to a newer version help Show CLI commands Example command​ npx remotion render --codec=vp8 HelloWorld out/video.webm Copy Fig.io autocompletion​  Install Fig (macOS only) to add Remotion autocomplete to your terminal. Type npx remotion to start get suggestions.  See also​ Render your video Configuration file Improve this page Ask on Discord Get help Previous API overview Next studio How to use Commands Example command Fig.io autocompletion See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/shapes","title":"@remotion/shapes | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes <Rect /> <Triangle /> <Circle /> <Ellipse /> <Star /> <Pie /> <Polygon /> makeRect() makeTriangle() makeCircle() makeEllipse() makeStar() makePie() makePolygon() @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/shapes @remotion/shapes  A package providing utility functions for generate SVG shapes.  npm pnpm yarn npm i @remotion/shapes Copy Functions​ makeRect() Generate SVG Path for a rect <Rect/> Render a rect makeCircle() Generate SVG Path for a circle <Circle/> Render a circle makePie() Generate SVG Path for a pie <Pie/> Render a pie makeEllipse() Generate SVG Path for a ellipse <Ellipse/> Render a ellipse makeTriangle() Generate SVG Path for a triangle <Triangle/> Render a triangle makeStar() Generate SVG Path for a star <Star/> Render a star makePolygon() Generate SVG Path for a polygon <Polygon/> Render a polygon License​  MIT  Improve this page Ask on Discord Get help Previous getInfo() Next <Rect /> Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/renderer","title":"@remotion/renderer | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer getCompositions() selectComposition() renderMedia() renderFrames() renderStill() stitchFramesToVideo() openBrowser() makeCancelSignal() ensureFfmpeg() ensureFfprobe() getCanExtractFramesFast() getVideoMetadata() getSilentParts() extractAudio() @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/renderer @remotion/renderer  The @remotion/renderer package provides APIs for rendering video server-side. The package is also internally used by the Remotion CLI and Remotion Lambda.  DANGER  The configuration file has no effect when using these APIs.  Installation​ npm yarn pnpm npm i @remotion/renderer Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Server-side rendering examples​  See the Server-side rendering for some examples of how to use server-side rendering.  Available functions​  The following APIs are available in the @remotion/renderer package:  getCompositions() List available compositions selectComposition() Get a composition renderMedia() Render a video or audio renderFrames() Render a series of images renderStill() Render a single image stitchFramesToVideo() Turn images into a video openBrowser() Open a Chrome browser to reuse across renders makeCancelSignal() Create token to later cancel a render getVideoMetadata() Get metadata from a video file in Node.js getSilentParts() Obtain silent portions of a video or audio ensureFfmpeg() Check for ffmpeg binary and install if not existing ensureFfprobe() Check for ffprobe binary and install if not existing getCanExtractFramesFast() Probes for fast extraction for <OffthreadVideo> What's the difference between renderMedia() and renderFrames()?​  In Remotion 3.0, we added the renderMedia() API which combines renderFrames() and stitchFramesToVideo() into one simplified step and performs the render faster. Prefer renderMedia() if you can.  Improve this page Ask on Discord Get help Previous bundle() Next getCompositions() Installation Server-side rendering examples Available functions What's the difference between renderMedia() and renderFrames()?  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/gif/","title":"@remotion/gif | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif <Gif> getGifDurationInSeconds() preloadGif() @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/gif @remotion/gif  You can install this package from NPM to get a component for displaying GIFs that synchronize with Remotions useCurrentFrame().  npm yarn pnpm npm i @remotion/gif Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  APIs​  The following APIs are available:  <Gif> Render a GIF getGifDurationInSeconds() Get the runtime of a GIF preloadGif() Prepare a GIF for displaying in the Player Improve this page Ask on Discord Get help Previous <Thumbnail> Next <Gif> APIs  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/shapes/","title":"@remotion/shapes | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes <Rect /> <Triangle /> <Circle /> <Ellipse /> <Star /> <Pie /> <Polygon /> makeRect() makeTriangle() makeCircle() makeEllipse() makeStar() makePie() makePolygon() @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/shapes @remotion/shapes  A package providing utility functions for generate SVG shapes.  npm pnpm yarn npm i @remotion/shapes Copy Functions​ makeRect() Generate SVG Path for a rect <Rect/> Render a rect makeCircle() Generate SVG Path for a circle <Circle/> Render a circle makePie() Generate SVG Path for a pie <Pie/> Render a pie makeEllipse() Generate SVG Path for a ellipse <Ellipse/> Render a ellipse makeTriangle() Generate SVG Path for a triangle <Triangle/> Render a triangle makeStar() Generate SVG Path for a star <Star/> Render a star makePolygon() Generate SVG Path for a polygon <Polygon/> Render a polygon License​  MIT  Improve this page Ask on Discord Get help Previous getInfo() Next <Rect /> Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/media-utils/","title":"@remotion/media-utils | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils audioBufferToDataUrl() getAudioData() getAudioDurationInSeconds() getVideoMetadata() getWaveformPortion() useAudioData() visualizeAudio() @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/media-utils @remotion/media-utils  A package providing utility functions for getting information about video and audio, and for visualizing audio.  Except for useAudioData(), all functions can also be used outside of Remotion.  npm pnpm yarn npm i @remotion/media-utils Copy Functions​ audioBufferToDataUrl() Serialize an audio buffer getAudioData() Get metadata of an audio source getAudioDurationInSeconds() Get the duration of an audio source getVideoMetadata() Get metadata of a video source getWaveformPortion() Trims audio data into a waveform useAudioData() getAudioData() as a hook visualizeAudio() Processes a waveform for visualization License​  MIT  Improve this page Ask on Discord Get help Previous preloadGif() Next audioBufferToDataUrl() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/noise","title":"@remotion/noise | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise noise2D() noise3D() noise4D() @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/noise @remotion/noise  Available from v3.2.32  Utility functions that create a noise effect.  npm pnpm yarn npm i @remotion/noise Copy Functions​ noise2D() Create 2D noise noise3D() Create 3D noise noise4D() Create 4D noise License​  MIT  Improve this page Ask on Discord Get help Previous getParts() Next noise2D() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/transitions/","title":"@remotion/transitions | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions <TransitionSeries> Timings Presentations @remotion/zod-types @remotion/layout-utils @remotion/transitions @remotion/transitions  available from v4.0.53  This package provides the <TransitionSeries> component for transitioning between two scenes as well as timing presets.  Installation​ npm yarn pnpm npm i @remotion/transitions Copy API​ Components <TransitionSeries> A <Series> with transitions inbetween Timings springTiming() Transition with a spring() linearTiming() Transition linearly with optional Easing Custom timings Implement your own timing Presentations  Hover over an effect to see the preview.  Overview List of available presentations Custom presentations Implement your own effect A B fade() Animate the opacity of the scenes A B slide() Slide in and push out the previous scene A B wipe() Slide over the previous scene A B flip() Rotate the previous scene A B clockWipe() Reveal the new scene in a circular movement A B cube()Paid Rotate both scenes with 3D perspective Audio transitions Add a sound effect to a transition License​  Remotion License  Improve this page Ask on Discord Get help Previous <RemotionRiveCanvas> Next <TransitionSeries> Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/api#","title":"API overview | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils API overview API overview Command line Reference for the npx remotion commands Configuration file Reference for the remotion.config.ts file Packages remotion Core APIs: useCurrentFrame(), interpolate(), etc. @remotion/bundler Create a Webpack bundle from Node.JS @remotion/player Play a Remotion video in the browser @remotion/lambda Render videos and stills on AWS Lambda @remotion/cloudrun Render videos and stills on GCP Cloud Run @remotion/gif Include a GIF in your video @remotion/media-utils Obtain info about video and audio @remotion/tailwind Utilities for using TailwindCSS in Remotion @remotion/three Create 3D videos using React Three Fiber @remotion/skia Low-level graphics using React Native Skia @remotion/lottie Include a Lottie animation in your video @remotion/preload Preload video and audio in the Player @remotion/renderer Render video, audio and stills from Node.JS @remotion/paths Manipulate and obtain info about SVG paths @remotion/noise Generate noise effects @remotion/shapes Generate SVG shapes @remotion/transitions Transition between scenes @remotion/layout-utils Layout helpers Improve this page Ask on Discord Get help Next CLI reference  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/cloudrun","title":"@remotion/cloudrun | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K Getting started Designing videos Parameterized videos Rendering Server-side rendering Player Lambda Cloud Run (Alpha) Overview Setup Permissions Generate .env File Region selection Production Checklist Instance Count Multiple buckets Limits Light client Upgrading Cloud Run Uninstall Cloud Run Building apps Tooling Troubleshooting Snippets API Reference Terminology List of resources Migration guides Get help Miscellaneous FAQ Contributing License & Pricing Cloud Run (Alpha)Overview @remotion/cloudrun EXPERIMENTAL  Cloud Run is in Alpha, which means APIs may change in any version and documentation is not yet finished. See the changelog to stay up to date with breaking changes.  Render Remotion videos on GCP Cloud Run.  When should I use it?​ You are fine with using Google Cloud Platform in one of the supported regions.  If one of those constraints is a dealbreaker for you, resort to normal server-side rendering.  How it works​ Deployment​ Any time a new version of Remotion is published by the Remotion team, a new image will be uploaded to a publicly readable artifact registry in GCP. When you deploy a new Cloud Run service to your GCP Project, it will by default download the latest image from the repository. If you require a specific version, you can specify that in the command. Rendering​ A Cloud Run service and a Cloud Storage bucket are created in GCP. A Remotion project gets deployed to a Cloud Storage bucket as a website. The Cloud Run service gets invoked and opens the Remotion project. The Cloud Run service renders the video or still, and the final file gets uploaded to Cloud Storage and is available for download. Architecture​ Cloud Run service: Contains the required libraries and binaries for rendering Remotion projects, and is available for invoking behind a URL. Cloud Storage bucket: Stores the projects, the renders, and render metadata. CLI: Allows control of the overall architecture from the command line. Is installed by adding @remotion/cloudrun to a project. Node.JS API: Has the same features as the CLI but is easier to use programmatically. Setup / Installation​  See here  Region selection​  The following regions are available for Remotion Cloud Run:  asia-east1 asia-east2 asia-northeast1 asia-northeast2 asia-northeast3 asia-south1 asia-south2 asia-southeast1 asia-southeast2 australia-southeast1 australia-southeast2 europe-central2 europe-north1 europe-southwest1 europe-west1 europe-west2 europe-west3 europe-west4 europe-west6 europe-west8 europe-west9 me-west1 northamerica-northeast1 northamerica-northeast2 southamerica-east1 southamerica-west1 us-central1 us-east1 us-east4 us-east5 us-south1 us-west1 us-west2 us-west3 us-west4  See here for configurations and considerations.  Quotas and Limits​  For all up-to-date values, check the official Cloud Run docs.  The maximum memory size is 32gb. The maximum number of vCPUs is 8. The maximum writeable, in-memory filesystem, limited by instance memory, is 32gb. The maximum timeout is 60 minutes. Cost​  Most of our users render multiple minutes of video for just a few pennies. The exact cost is dependent on the region, assigned memory, type of video and other parameters. You might also need a Remotion license (see below).  GCP permissions​  Remotion Cloud Run requires you to create a GCP project and create a Service Account with some permissions attached to it. We require only the minimal amount of permissions required for operating Remotion Cloud Run. Service Account permission list and reasons.  CLI​  You can control Remotion Cloud Run using the npx remotion cloudrun command.  Read more about the CLI  Node.JS API​  Everything you can do using the CLI, you can also control using Node.JS APIs. See the reference here.  License​  The standard Remotion license applies. https://github.com/remotion-dev/remotion/blob/main/LICENSE.md  Companies need to buy 1 cloud rendering seat per 2000 renders per month - see https://remotion.pro  Uninstalling​  We make it easy to remove all Remotion resources from your GCP project without leaving any traces or causing further costs.  How to uninstall Remotion Cloud Run.  Improve this page Ask on Discord Get help Previous Cloud Run Alpha Next Setup When should I use it? How it works Deployment Rendering Architecture Setup / Installation Region selection Quotas and Limits Cost GCP permissions CLI Node.JS API License Uninstalling  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/lottie/","title":"@remotion/lottie | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie <Lottie> getLottieMetadata() Loading from staticFile() Loading from a URL Finding Lottie files @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/lottie @remotion/lottie  This package provides a component for displaying Lottie animations in Remotion.  Installation​  Install, @remotion/lottie as well as lottie-web.  npm yarn pnpm npm i @remotion/lottie lottie-web Copy  You can now start using the <Lottie> component in your Remotion project.  Supported features​ Playing Lottie animations using lottie-web Change the speed of the animation Playing animation forwards and backwards Playing remote files Determining dimensions and duration of a Lottie animation Unsupported features​ Rendering on other renderers as svg setSubFrame(), setLocationHref() Limited expression support: Remotion uses the .goToAndStop() method from lottie-web to seek through the Lottie file. Depending on the expression, the frame might not render deterministally, leading to flickering in the Remotion output. Remotion cannot fix this without a change in lottie-web upstream. You need to evaluate on a case-by-case basis whether the expression you are using is supported by Remotion. NOTE  Open an issue if you want to request a currently unsupported feature.  Table of contents​ <Lottie> Embed a Lottie animation in Remotion getLottieMetadata() Get metadata of a Lottie animation staticFile() Load Lottie animations from a static file Loading Lottie animations from a remote URL Where to find Lottie files License​  Remotion License  Improve this page Ask on Discord Get help Previous <SkiaCanvas /> Next <Lottie> Installation Supported features Unsupported features Table of contents License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/bundler","title":"@remotion/bundler | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler bundle() @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/bundler @remotion/bundler  A package containing the bundle() function, which takes a Remotion project and bundles it using Webpack, preparing it to be used by server-side rendering functions such as getCompositions() and renderMedia()  Installation​ npm pnpm yarn npm i @remotion/bundler Copy API​ bundle() Create a Webpack bundle License​  Remotion License  Improve this page Ask on Discord Get help Previous <Experimental.Clipper> Next bundle() Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/cloudrun/api","title":"@remotion/cloudrun | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun CLI Reference getServiceInfo() deployService() deleteService() getServices() speculateServiceName() getRegions() deploySite() deleteSite() getSites() getOrCreateBucket() renderMediaOnCloudrun() renderStillOnCloudrun() testPermissions() @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/cloudrun @remotion/cloudrun EXPERIMENTAL  Cloud Run is in Alpha, which means APIs may change in any version and documentation is not yet finished. See the changelog to stay up to date with breaking changes.  npm yarn pnpm npm i @remotion/cloudrun Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  See the setup guide for complete instructions on how to get started.  APIs​  The following Node.JS are available:  getServiceInfo() Gets information about a service deployService() Create a new service in GCP Cloud Run deleteService() Delete a service in GCP Cloud Run getServices() Lists available Remotion Cloud Run services speculateServiceName() Speculate a service name based on its configuration getRegions() Get all available regions deploySite() Bundle and upload a site to Cloud Storage deleteSite() Delete a bundle from Cloud Storage getSites() Get all available sites from Cloud Storage getOrCreateBucket() Ensure a Remotion Cloud Storage bucket exists renderMediaOnCloudrun() Trigger a video or audio render renderStillOnCloudrun() Trigger a still render testPermissions() Ensure permissions are correctly set up in GCP CLI​  See here for a list of CLI commands.  Improve this page Ask on Discord Get help Previous validateWebhookSignature() Next getServiceInfo() APIs CLI  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/cli/","title":"Command line reference | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line studio render still compositions lambda cloudrun benchmark install versions upgrade ffmpeg ffprobe gpu help Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils Command line Command line reference How to use​ You can access the CLI by running npx remotion inside a npm project using remotion, yarn remotion inside a yarn project and pnpm exec remotion inside a pnpm project. For compactness, in the documentation we always say npx remotion. Inside an npm script, you don't need the npx prefix. Commands​  The following commands are available - you can always run them using npx remotion or even without the npx prefix if you put the command inside an npm script.  studio Start the Remotion Studio render Render video or audio still Render a still image compositions List available compositions lambda Control Remotion Lambda benchmark Measure and optimize render time versions List and validate Remotion package versions upgrade Upgrade to a newer version help Show CLI commands Example command​ npx remotion render --codec=vp8 HelloWorld out/video.webm Copy Fig.io autocompletion​  Install Fig (macOS only) to add Remotion autocomplete to your terminal. Type npx remotion to start get suggestions.  See also​ Render your video Configuration file Improve this page Ask on Discord Get help Previous API overview Next studio How to use Commands Example command Fig.io autocompletion See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/google-fonts/","title":"@remotion/google-fonts | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts loadFont() getAvailableFonts() getInfo() @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/google-fonts @remotion/google-fonts  The @remotion/google-fonts package provides APIs for easily integrating Google Fonts into Remotion.  Installation​ npm yarn pnpm npm i @remotion/google-fonts Copy Usage​  To load a font, import the package @remotion/google-fonts/<FontName> and call loadFont().  Load all font styles import { loadFont } from \"@remotion/google-fonts/TitanOne\"; const { fontFamily } = loadFont(); // \"Titan One\" Copy  If you want to import multiple fonts and want to avoid a variable name collision, you can import the fonts using an import * as statement.  Scope loadFont() variable import * as Montserrat from \"@remotion/google-fonts/Montserrat\"; Montserrat.loadFont(); Copy  Call loadFont() to start the loading process. By default, every style, weight and subset is loaded.  You can pass a style (such as normal, italic) to only load that specific style. If you want multiple styles, call loadFont() multiple times.  Load just one style import { loadFont } from \"@remotion/google-fonts/TitanOne\";   loadFont(\"normal\"); Copy  Use the TypeScript autocomplete to see the available styles. To further narrow down what's being loaded, you can specify weights and subsets. These options are also typesafe.  Load a specific style with limit weights and subsets import * as Montserrat from \"@remotion/google-fonts/Montserrat\";   Montserrat.loadFont(\"normal\", {   weights: [\"400\", \"600\", \"800\"],   subsets: [\"latin\", \"latin-ext\"], }); Copy  loadFonts() returns an object with a fontFamily property. You can use the style attribute to render text in the font you loaded.  Use the fontFamily property import { loadFont } from \"@remotion/google-fonts/TitanOne\"; import { AbsoluteFill } from \"remotion\";   const { fontFamily } = loadFont();   export const GoogleFontsDemoComposition = () => {   return (     <AbsoluteFill       style={{         fontFamily,       }}     >       <div>Hallo Google Fonts</div>     </AbsoluteFill>   ); }; Copy  To get information about a font, you can import the getInfo() function:  Get info about the font import { getInfo } from \"@remotion/google-fonts/Montserrat\"; console.log(getInfo()); Copy Example value of info object {   \"fontFamily\": \"Titan One\",   \"importName\": \"TitanOne\",   \"version\": \"v13\",   \"url\": \"https://fonts.googleapis.com/css2?family=Titan+One:ital,wght@0,400\",   \"unicodeRanges\": {     \"latin-ext\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF\",     \"latin\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\"   },   \"fonts\": {     \"normal\": {       \"400\": {         \"latin-ext\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjCmjgm6Es.woff2\",         \"latin\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjClDgm.woff2\"       }     }   } } Copy  To get a list of all available fonts, you can call getAvailableFonts() imported from @remotion/google-fonts:  import { getAvailableFonts } from \"@remotion/google-fonts\";   console.log(getAvailableFonts()); Copy APIs​ loadFont() Load a Google Font getAvailableFonts() Static list of available fonts getInfo() Metadata about a specific font Credits​  Implemented by Hidayatullah.  License​  MIT  See also​ Fonts loadFont() Improve this page Ask on Discord Get help Previous noise4D() Next loadFont() Installation Usage APIs Credits License See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/preload/","title":"@remotion/preload | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload preloadVideo() preloadAudio() preloadImage() preloadFont() resolveRedirect() @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/preload @remotion/preload  This package provides functions for preloading assets. While preload is not necessary for rendering, it can help with seamless playback in the <Player /> and in the Studio. Currently, three functions are implemented:  preloadVideo() Preload a video source preloadAudio() Preload an audio source preloadFont() Preload a font preloadImage() Preload an image resolveRedirect() Get the definitive URL after all redirects  An alternative to @remotion/preload is the prefetch() API. See @remotion/preload vs prefetch() to decide which one is better for your usecase.  Installation​ npm yarn pnpm npm i @remotion/preload Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Improve this page Ask on Discord Get help Previous Finding Lottie files Next preloadVideo() Installation  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/config","title":"Configuration file | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils Configuration file Configuration file  To configure Remotion, create a remotion.config.ts file in the root of your Remotion project.  These options will apply to CLI commands such as npx remotion studio and npx remotion render.  DANGER  The configuration file has no effect when using SSR APIs.  You can control several behaviors of Remotion here.  remotion.config.ts import { Config } from \"@remotion/cli/config\";   Config.setConcurrency(8); Config.setPixelFormat(\"yuv444p\"); Config.setCodec(\"h265\"); Copy Old config file format​  In v3.3.39, a new config file format was introduced which flattens the options so they can more easily be discovered using TypeScript autocompletion.  Previously, each config option was two levels deep:  remotion.config.ts Config.Bundling.setCachingEnabled(false); Copy  From v3.3.39 on, all options can be accessed directly from the Config object.  remotion.config.ts Config.setCachingEnabled(false); Copy  The old way is deprecated, but will work for the foreseeable future.  overrideWebpackConfig()v1.1.0​  Allows you to insert your custom Webpack config. See the page about custom Webpack configs for more information.  remotion.config.ts Config.overrideWebpackConfig((currentConfiguration) => {   // Return a new Webpack configuration   return {     ...currentConfiguration,     // new configuration   }; }); Copy setCachingEnabled()v2.0.0​  Enable or disable Webpack caching. Default is true which will make the Webpack step in the first run a bit slower but will massively speed up subsequent runs.  remotion.config.ts Config.setCachingEnabled(false); Copy  The command line flag --bundle-cache will take precedence over this option.  setStudioPort()v4.0.61​  Set the HTTP port for the Studio.  remotion.config.ts Config.setStudioPort(3003); Copy  The command line flag --port will take precedence over this option.  setRendererPort()v4.0.61​  Set the port to be used to host the Webpack bundle.  remotion.config.ts Config.setStudioPort(3004); Copy  The command line flag --port will take precedence over this option.  setPublicDir()v3.2.13​  Define the location of the public/ directory. By default it is a folder named \"public\" inside the current working directory. You can either set an absolute path, or a relative path that will be resolved from the closest package.json location.  remotion.config.ts Config.setPublicDir(\"./publico\"); Copy  The command line flag --public-dir will take precedence over this option.  setEntryPoint()v3.2.40​  Sets the Remotion entry point, you don't have to specify it for CLI commands.  remotion.config.ts Config.setEntryPoint(\"./src/index.ts\"); Copy  If you pass an entry point as a CLI argument, it will take precedence.  setLevel()v2.0.1​  Increase or decrease the amount of log messages in the CLI. Acceptable values:  error: Silent except error messages. warn: Only showing errors and warnings. info (default): Default output - besides errors and warnings, prints progress and output location. verbose: All of the above, plus browser logs and other debug info. remotion.config.ts Config.setLevel(\"verbose\"); Copy  The command line flag --log will take precedence over this option.  setMaxTimelineTracks()v2.1.10​  Set how many tracks are being displayed in the timeline in the Studio at most. This does not affect your video, just the amount of tracks shown when previewing. Default 15.  remotion.config.ts Config.setMaxTimelineTracks(20); Copy setKeyboardShortcutsEnabled()v3.2.11​  Whether the Studio should react to keyboard shortcuts. Default true.  remotion.config.ts Config.setKeyboardShortcutsEnabled(false); Copy  The command line flag --disable-keyboard-shortcuts will take precedence over this option.  setWebpackPollingInMilliseconds()v3.3.11​  Enables Webpack polling instead of the file system event listeners for hot reloading. This is useful if you are inside a virtual machine or have a remote file system.  remotion.config.ts Config.setWebpackPollingInMilliseconds(1000); Copy  The command line flag --webpack-poll will take precedence over this option.  setNumberOfSharedAudioTags()v3.3.2​  How many shared audio tags should be mounted in the Studio. Shared audio tags can help prevent playback issues due to audio autoplay policies of the browser. See this article which covers the same option but for the Player. Default 0, meaning no autoplay policies are circumvented.  remotion.config.ts Config.setNumberOfSharedAudioTags(5); Copy setShouldOpenBrowser()v3.3.19​  Whether Remotion should open a browser when starting the Studio. Default true.  remotion.config.ts Config.setShouldOpenBrowser(false); Copy setBrowserExecutable()v1.5.0​  Set a custom Chrome or Chromium executable path. By default Remotion will try to find an existing version of Chrome on your system and if not found, it will download one. This flag is useful if you don't have Chrome installed in a standard location and you want to prevent downloading an additional browser or need support for the H264 codec.  remotion.config.ts Config.setBrowserExecutable(\"/usr/bin/google-chrome-stable\"); Copy  The command line flag --browser-executable will take precedence over this option.  setDelayRenderTimeoutInMilliseconds()v2.6.3​  previously named \"setTimeoutInMilliseconds\"  Define how long a single frame may take to resolve all delayRender() calls before it times out. Default: 30000  remotion.config.ts Config.setDelayRenderTimeoutInMilliseconds(60000); Copy  The command line flag --timeout will take precedence over this option.  setChromiumDisableWebSecurity()v2.6.5​  This will most notably disable CORS among other security features during rendering.  remotion.config.ts Config.setChromiumDisableWebSecurity(true); Copy  The command line flag --disable-web-security will take precedence over this option.  setChromiumIgnoreCertificateErrors()v2.6.5​  Results in invalid SSL certificates, such as self-signed ones, being ignored during rendering.  remotion.config.ts Config.setChromiumIgnoreCertificateErrors(true); Copy  The command line flag --ignore-certificate-errors will take precedence over this option.  setChromiumHeadlessMode()v2.6.5​  By default true. Disabling it will open an actual Chrome window where you can see the render happen.  remotion.config.ts Config.setChromiumHeadlessMode(false); Copy setChromiumMultiProcessOnLinux()v4.0.42​ Removes the --single-process flag that gets passed to Chromium on Linux by default. This will make the render faster because multiple processes can be used, but may cause issues with some Linux distributions or if window server libraries are missing. remotion.config.ts Config.setChromiumMultiProcessOnLinux(true); Copy  The command line flag --enable-multiprocess-on-linux will take precedence over this option.  setChromiumOpenGlRenderer​ Changelog  Select the OpenGL renderer backend for Chromium. Accepted values:  \"angle\" \"egl\" \"swiftshader\" \"swangle\" \"vulkan\" (from Remotion v4.0.41) \"angle-egl\" (from Remotion v4.0.51)  The default is null, letting Chrome decide, except on Lambda where the default is \"swangle\"  remotion.config.ts Config.setChromiumOpenGlRenderer(\"angle\"); Copy  The command line flag --gl will take precedence over this option.  setConcurrency()​  Sets how many Puppeteer instances will work on rendering your video in parallel. Default: null, meaning half of the threads available on your CPU.  remotion.config.ts Config.setConcurrency(8); Copy  The command line flag --concurrency will take precedence over this option.  TIP  Try to set your concurrency to os.cpus().length to all the threads available on your CPU for faster rendering. The drawback is that other parts of your system might slow down.  setVideoImageFormat()v4.0.0​  Determines which in which image format to render the frames. Either:  jpeg - the fastest option (default) png - slower, but supports transparency none - don't render images, just calculate audio information remotion.config.ts Config.setVideoImageFormat(\"png\"); Copy setStillImageFormat()v4.0.0​  Determines which in which image format to render the frames. Either:  png (default) jpeg pdf webp remotion.config.ts Config.setStillImageFormat(\"pdf\"); Copy setImageFormat()v1.4.0​  Removed in v4.0  Replaced in v4.0 with setVideoImageFormat() and setStillImageFormat()  Determines which in which image format to render the frames. Either:  jpeg - the fastest option (default from v1.1) png - slower, but supports transparency none - don't render images, just calculate audio information (available from v2.0) remotion.config.ts import { Config } from \"@remotion/cli/config\"; // ---cut--- Config.setImageFormat(\"png\"); Copy  The command line flag --image-format will take precedence over this option.  setScale()v2.6.7​  Scales the output frames by the factor you pass in. For example, a 1280x720px frame will become a 1920x1080px frame with a scale factor of 1.5. Vector elements like fonts and HTML markups will be rendered with extra details. Default: 1.  remotion.config.ts Config.setScale(2); Copy  The command line flag --scale will take precedence over this option.  setMuted()v3.2.1​  Disables audio output. Default false.  remotion.config.ts Config.setMuted(true); Copy  The command line flag --muted will take precedence over this option.  setEnforceAudioTrack()v3.2.1​  Render a silent audio track if there would be none otherwise. Default false.  remotion.config.ts Config.setEnforceAudioTrack(true); Copy  The command line flag --enforce-audio-track will take precedence over this option.  setFrameRange()v2.0.0​  Pass a number to render a still frame or a tuple to render a subset of a video. The frame sequence is zero-indexed.  remotion.config.ts Config.setFrameRange(90); // To render only the 91st frame Copy  or  remotion.config.ts Config.setFrameRange([0, 20]); // Render a video only containing the first 21 frames Copy  The command line flag --frames will take precedence over this option.  setJpegQuality()​  The JPEG quality of each frame. Must be a number between 0 and 100. Will not work if you render PNG frames. Default: 80.  remotion.config.ts Config.setJpegQuality(90); Copy  The command line flag --jpeg-quality will take precedence over this option.  setQuality()​  Renamed to setJpegQuality in v4.0.0.  setDotEnvLocation()​  Set a custom location for a .env file. You can specify an absolute path or a relative path in which case it gets resolved based on the current working directory.  remotion.config.ts Config.setDotEnvLocation(\".my-env\"); Copy  The command line flag --env-file will take precedence over this option.  setEveryNthFrame()​  This option may only be set when rendering GIFs. It determines how many frames are rendered, while the other ones gets skipped in order to lower the FPS of the GIF.  For example, if the fps is 30, and everyNthFrame is 2, the FPS of the GIF is 15.  remotion.config.ts Config.setEveryNthFrame(2); Copy  The command line flag --every-nth-frame will take precedence over this option.  setNumberOfGifLoops()​ Allows you to set the number of loops as follows: null (or omitting in the CLI) plays the GIF indefinitely. 0 disables looping 1 loops the GIF once (plays twice in total) 2 loops the GIF twice (plays three times in total) and so on. remotion.config.ts Config.setNumberOfGifLoops(2); Copy  The command line flag --number-of-gif-loops will take precedence over this option.  setOutputLocation()v3.1.6​  Set the output location of the video or still, relative to the current working directory. The default is out/{composition}.{container}. For example, out/HelloWorld.mp4.  remotion.config.ts Config.setOutputLocation(\"out/video.mp4\"); Copy  If you pass another argument to the render command, it will take precedence: npx remotion render src/index.ts HelloWorld out/video.mp4.  setOverwriteOutput()​  Set this to false to prevent overwriting Remotion outputs when they already exists.  remotion.config.ts Config.setOverwriteOutput(false); Copy INFO  In version 1.x, the default behavior was inverse - Remotion would not override by default.  setPixelFormat()​  Controls the pixel format in FFmpeg. Read more about it here. Acceptable values: yuv420p, yuv422p, yuv444p, yuv420p10le, yuv422p10le, yuv444p10le. Since v1.4, yuva420p is also supported for transparent WebM videos. Since v2.1.7, yuva444p10le is also supported for transparent ProRes videos Default value: yuv420p  remotion.config.ts Config.setPixelFormat(\"yuv420p\"); Copy  The command line flag --pixel-format will take precedence over this option.  setCodec()v1.4.0​  Choose one of the supported codecs: h264 (default), h265, vp8, vp9.  h264 is the classic MP4 file as you know it. h265 is the successor of H264, with smaller file sizes. Also known as HEVC. Poor browser compatibility. vp8 is the codec for WebM. vp9 is the next-generation codec for WebM. Lower file size, longer compression time. prores is a common codec if you want to import the output into another video editing program (available from v2.1.6) mp3 will export audio only as an MP3 file (available from v2.0) wav will export audio only as an WAV file (available from v2.0) aac will export audio only as an AAC file (available from v2.0) remotion.config.ts Config.setCodec(\"h265\"); Copy  The command line flag --codec will take precedence over this option.  See also: Encoding guide  setAudioCodec()​ remotion.config.ts Config.setAudioCodec(\"pcm-16\"); Copy  Choose the encoding of your audio.  The default is dependent on the chosen codec. Choose pcm-16 if you need uncompressed audio. Not all video containers support all audio codecs. This option takes precedence if the codec option also specifies an audio codec.  The command line flag --audio-codec will take precedence over this option.  Refer to the Encoding guide to see defaults and supported combinations.  setProResProfile()v2.1.6​  Set the ProRes profile. This option is only valid if the codec has been set to prores. Possible values: 4444-xq, 4444, hq, standard, light, proxy. See here for explanation of possible values. Default: hq  remotion.config.ts Config.setProResProfile(\"4444\"); Copy  The command line flag --prores-profile will take precedence over this option.  setX264Preset()v4.2.2​  Set the Preset profile. This option is only valid if the codec has been set to h264. Possible values: superfast, veryfast, faster, fast, medium, slow, slower, veryslow, placebo, Default: medium  remotion.config.ts Config.setX264Preset(\"fast\"); Copy  The command line flag --prores-profile will take precedence over this option.  See also: Encoding guide, Transparent videos  setImageSequence()v1.4.0​  Set to true if you want to output an image sequence instead of a video.  remotion.config.ts Config.setImageSequence(true); Copy  The command line flag --sequence will take precedence over this option.  overrideHeight()v3.2.40​  Overrides the height of the rendered video.  remotion.config.ts Config.overrideHeight(600); Copy  The command line flag --height will take precedence over this option. (see h264 validation?)  overrideWidth()v3.2.40​  Overrides the width of the rendered video.  remotion.config.ts Config.overrideWidth(900); Copy  The command line flag --width will take precedence over this option  setOutputFormat()​  Removed in v4.0.0 Deprecated. Use setCodec() and setImageSequence() instead.  Either 'mp4' or 'png-sequence'.  remotion.config.ts import { Config } from \"@remotion/cli/config\"; // ---cut--- Config.setOutputFormat(\"mp4\"); Copy  The command line flags --sequence and --codec will take precedence over this option.  The command line flag --quality will take precedence over this option.  setCrf()v1.4.0​  The \"Constant Rate Factor\" (CRF) of the output. Use this setting to tell FFmpeg how to trade off size and quality.  Ranges for CRF scale, by codec:  h264 crf range is 1-51 where crf 18 is default. h265 crf range is 0-51 where crf 23 is default. vp8 crf range is 4-63 where crf 9 is default. vp9 crf range is 0-63 where crf 28 is default.  The lowest value is lossless, and the highest value is the worst quality possible. Higher values decrease the filesize at the cost of quality.  The range is exponential, so increasing the CRF value +6 results in roughly half the bitrate / file size, while -6 leads to roughly twice the bitrate.  Choose the highest CRF value that still provides an acceptable quality. If the output looks good, then try a higher value. If it looks bad, choose a lower value.  remotion.config.ts Config.setCrf(16); Copy  The command line flag --crf will take precedence over this option.  setVideoBitrate()v3.2.32​  Specify the target bitrate for the generated video. The syntax for FFMPEGs -b:v parameter should be used. FFmpeg may encode the video in a way that will not result in the exact video bitrate specified. This option cannot be set if --crf is set. Example values: 512K for 512 kbps, 1M for 1 Mbps.  remotion.config.ts Config.setVideoBitrate(\"1M\"); Copy  The command line flag --video-bitrate will take precedence over this option.  setEncodingBufferSize()v4.0.78​ The value for the -bufsize flag of FFmpeg. Should be used in conjunction with the encoding max rate flag. remotion.config.ts Config.setEncodingBufferSize(\"10000k\"); Copy  The command line flag --buffer-size will take precedence over this option.  setEncodingMaxRate()v4.0.78​ The value for the -maxrate flag of FFmpeg. Should be used in conjunction with the encoding buffer size flag. remotion.config.ts Config.setEncodingMaxRate(\"5000k\"); Copy  The command line flag --max-rate will take precedence over this option.  setAudioBitrate()v3.2.32​  Specify the target bitrate for the generated audio. The syntax for FFMPEGs -b:a parameter should be used. FFmpeg may encode the video in a way that will not result in the exact audio bitrate specified. Example values: 128K for 128 kbps, 1M for 1 Mbps. Default: 320k  remotion.config.ts Config.setAudioBitrate(\"128K\"); Copy  The command line flag --audio-bitrate will take precedence over this option.  setEnableFolderExpiry()v4.0.32​  For Lambda:  When deploying sites, enable or disable S3 Lifecycle policies which allow for renders to auto-delete after a certain time. Default is null, which does not change any lifecycle policies of the S3 bucket. See: Lambda autodelete.   remotion.config.ts Config.setEnableFolderExpiry(true); Copy setDeleteAfter()v4.0.32​  For Lambda:  Automatically delete the render after a certain period. Accepted values are 1-day, 3-days, 7-days and 30-days. For this to work, your bucket needs to have lifecycles enabled.   remotion.config.ts Config.setDeleteAfter(\"3-days\"); Copy setBeepOnFinish()v4.0.84​ Whether the Remotion Studio tab should beep when the render is finished.   remotion.config.ts Config.setBeepOnFinish(true); Copy  The command line flag --beep-on-finish will take precedence over this option.  overrideFfmpegCommand()v3.2.22​  Modifies the FFmpeg command that Remotion uses under the hood. It works reducer-style, meaning that you pass a function that takes a command as an argument and returns a new command.  remotion.config.ts Config.overrideFfmpegCommand(({ args }) => {   // Define the custom FFmpeg options as an array of strings   const customFfmpegOptions = [     \"-profile:v\",     \"main\",     \"-video_track_timescale\",     \"90000\",     \"-color_primaries\",     \"bt709\",     \"-color_trc\",     \"bt709\",     \"-strict\",     \"experimental\",   ];   // The customFfmpegOptions are inserted before the last element to ensure   // they appear before the ffmpeg's output path   args.splice(args.length - 1, 0, ...customFfmpegOptions);   return args; }); Copy  The function you pass must accept an object as it's only parameter which contains the following properties:  type: Either \"stitcher\" or \"pre-stitcher\". If enough memory and CPU is available, Remotion may use parallel rendering and encoding, which means that a pre-stitcher process gets spawned before all frames are rendered. You can tell whether parallel encoding is enabled by adding --log=verbose to your render command. args: An array of strings that is passed as arguments to the FFmpeg command.  Your function must return a modified array of strings.  DANGER  Using this feature is discouraged. Before using it, we want to make you aware of some caveats:  The render command can change with any new Remotion version, even when it is a patch upgrade. This might break your usage of this feature. Depending on the selected codec, available CPU and RAM, Remotion may or may not use \"parallel encoding\" which will result in multiple FFmpeg commands being executed. Your function must be able to handle being called multiple times. The FFmpeg binary provided by Remotion supports only a small subset of FFmpeg commands, therefore not every passed option will be applied. This feature is not available when using Remotion Lambda.  Before you use this hack, reach out to the Remotion team on Discord and ask us if we are open to implement the feature you need in a clean way - we often do implement new features quickly based on users feedback.  setFfmpegExecutable()​  removed in v4.0  Allows you to use a custom FFmpeg binary. Must be an absolute path. By default, this is null and the FFmpeg in PATH will be used.  remotion.config.ts import { Config } from \"@remotion/cli/config\"; // ---cut--- Config.setFfmpegExecutable(\"/path/to/custom/ffmpeg\"); Copy  The command line flag --ffmpeg-executable will take precedence over this option.  setFfprobeExecutable()​  removed in v4.0  Allows you to use a custom ffprobe binary. Must be an absolute path. By default, this is null and the ffprobe in PATH will be used.  remotion.config.ts import { Config } from \"@remotion/cli/config\"; // ---cut--- Config.setFfprobeExecutable(\"/path/to/custom/ffprobe\"); Copy  The command line flag --ffprobe-executable will take precedence over this option.  setPort()​  deprecated in v4.0.61 - use setStudioPort() and setRendererPort() instead.  Define on which port Remotion should start it's HTTP servers. By default, Remotion will try to find a free port. If you specify a port, but it's not available, Remotion will throw an error.  DANGER  Setting this option will break rendering in the Remotion Studio, because this option controls two settings at the same time:  When starting the Remotion Studio, a server will be started to host it (setStudioPort()). During rendering, a HTTP server is also started in the background to serve the Webpack bundle (setRendererPort()).  Use the options individually.  remotion.config.ts Config.setPort(3003); Copy  The command line flag --port will take precedence over this option. If set on npx remotion studio, it will set the Studio port, otherwise the renderer port.  See also​ Encoding guide Improve this page Ask on Discord Get help Previous help Next remotion Old config file format overrideWebpackConfig() setCachingEnabled() setStudioPort() setRendererPort() setPublicDir() setEntryPoint() setLevel() setMaxTimelineTracks() setKeyboardShortcutsEnabled() setWebpackPollingInMilliseconds() setNumberOfSharedAudioTags() setShouldOpenBrowser() setBrowserExecutable() setDelayRenderTimeoutInMilliseconds() setChromiumDisableWebSecurity() setChromiumIgnoreCertificateErrors() setChromiumHeadlessMode() setChromiumMultiProcessOnLinux() setChromiumOpenGlRenderer setConcurrency() setVideoImageFormat() setStillImageFormat() setImageFormat() setScale() setMuted() setEnforceAudioTrack() setFrameRange() setJpegQuality() setQuality() setDotEnvLocation() setEveryNthFrame() setNumberOfGifLoops() setOutputLocation() setOverwriteOutput() setPixelFormat() setCodec() setAudioCodec() setProResProfile() setX264Preset() setImageSequence() overrideHeight() overrideWidth() setOutputFormat() setCrf() setVideoBitrate() setEncodingBufferSize() setEncodingMaxRate() setAudioBitrate() setEnableFolderExpiry() setDeleteAfter() setBeepOnFinish() overrideFfmpegCommand() setFfmpegExecutable() setFfprobeExecutable() setPort() See also  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/remotion","title":"remotion | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion <AbsoluteFill> <Audio> calculateMetadata() cancelRender() <Composition> continueRender() delayRender() Easing <Folder> <Freeze> getInputProps() getRemotionEnvironment() getStaticFiles() <IFrame> <Img> interpolateColors() interpolate() <Loop> measureSpring() <OffthreadVideo> prefetch() random() registerRoot() <Sequence> <Series> spring() staticFile() <Still> useCurrentFrame() useVideoConfig() VERSION <Video> watchStaticFile() <Experimental.Null> <Experimental.Clipper> @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils remotion remotion  A package containing the essential building blocks of expressing videos in Remotion.  Some pure functions such as interpolate() and interpolateColors() can also be used outside of Remotion.  Installation​ npm pnpm yarn npm i remotion Copy API​  The following functions and components are exposed:  Defining compositions  Declare renderable assets.  <Composition> Define a video <Still> Define a still <Folder> Organize compositions in the Studio sidebar registerRoot() Initialize a Remotion project Hooks  To be used inside a composition.  useCurrentFrame() Obtain the current time useVideoConfig() Get the duration, dimensions and FPS of a composition Animations interpolate() Map a range of values to another spring() Physics-based animation primitive interpolateColors() Map a range of values to colors measureSpring() Determine the duration of a spring Easing Customize animation curve of interpolate() Media <Img> Render an <img> tag and wait for it to load <Video> Synchronize a <video> with Remotion's time <Audio> Synchronize <audio> with Remotion's time <OffthreadVideo> Alternative to <Video> <IFrame> Render an <iframe> tag and wait for it to load Timing <Sequence> Time-shifts it's children <Series> Display contents after another <Freeze> Freeze some content in time <Loop> Play some content repeatedly Async delayRender() Block a render from continuing continueRender() Unblock a render cancelRender() Abort an error Dynamic data getInputProps() Receive the user-defined input data getRemotionEnvironment() Determine if you are currently previewing or rendering Assets staticFile() Access file from public/ folder Layout <AbsoluteFill> Position content absolutely and in full size Version VERSION Get the current version of Remotion License​  Remotion License  Improve this page Ask on Discord Get help Previous Configuration file Next <AbsoluteFill> Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/skia/","title":"@remotion/skia | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia enableSkia() <SkiaCanvas /> @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/skia @remotion/skia  This package provides utilities useful for integrating React Native Skia with Remotion.  EXPERIMENTAL This package is currently a proof of technology.  It may change in minor version updates. Monitor this documentation page to see breaking changes when upgrading.  Installation​  Install, @remotion/skia as well as @shopify/react-native-skia.  npm yarn pnpm npm i @remotion/skia @shopify/react-native-skia Copy NOTE  Since Remotion v3.3.93 and React Native Skia 0.1.191, react-native-web is not a dependency anymore. You may remove it from your project.  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Override the Webpack config by using enableSkia().  remotion.config.ts import { Config } from \"@remotion/cli/config\"; import { enableSkia } from \"@remotion/skia/enable\";   Config.overrideWebpackConfig((currentConfiguration) => {   return enableSkia(currentConfiguration); }); Copy NOTE  Prior to v3.3.39, the option was called Config.Bundling.overrideWebpackConfig().  Next, you need to refactor the entry point file to first load the Skia WebAssembly binary before calling registerRoot():  src/index.ts import { LoadSkia } from \"@shopify/react-native-skia/src/web\"; import { registerRoot } from \"remotion\";   (async () => {   await LoadSkia();   const { RemotionRoot } = await import(\"./Root\");   registerRoot(RemotionRoot); })(); Copy  You can now start using the <SkiaCanvas> in your Remotion project.  Templates​  You can find the starter template here or install it using:  npm bun pnpm yarn npx create-video --skia Copy Rendering​  By default Remotion rendering are done on the CPU. Some Skia effects rely on advanced GPU features, which may be slow to run on the CPU depending on the kind of effect you are using. If your Skia export is extremely slow, we found that enabling the GPU via the --gl=angle option improves things substantially. Please check out the documentation on GPU rendering.  remotion render Main out/video.mp4 --gl=angle Copy Resources​ Example project by William Candillon Tutorial for the example project APIs​ enableSkia() <SkiaCanvas /> Improve this page Ask on Discord Get help Previous useOffthreadVideoTexture() Next enableSkia() Installation Templates Rendering Resources APIs  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/tailwind/tailwind","title":"@remotion/tailwind | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind enableTailwind() @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/tailwind @remotion/tailwind  This package provides utilities useful for integrating TailwindCSS with Remotion, as documented on our TailwindCSS page.  Installation​  Install @remotion/tailwind as well as TailwindCSS dependencies.  npm yarn pnpm npm i -D @remotion/tailwind Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Override the Webpack config by using enableTailwind().  remotion.config.ts import { Config } from \"@remotion/cli/config\"; import { enableTailwind } from \"@remotion/tailwind\";   Config.overrideWebpackConfig((currentConfiguration) => {   return enableTailwind(currentConfiguration); }); Copy  Then follow the remaining set up steps from the TailwindCSS page.  Templates​  You can find the starter template here or install it using:  npm yarn pnpm bun npx create-video --tailwind Copy APIs​ enableTailwind() Improve this page Ask on Discord Get help Previous testPermissions() Next enableTailwind() Installation Templates APIs  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/transitions","title":"@remotion/transitions | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions <TransitionSeries> Timings Presentations @remotion/zod-types @remotion/layout-utils @remotion/transitions @remotion/transitions  available from v4.0.53  This package provides the <TransitionSeries> component for transitioning between two scenes as well as timing presets.  Installation​ npm yarn pnpm npm i @remotion/transitions Copy API​ Components <TransitionSeries> A <Series> with transitions inbetween Timings springTiming() Transition with a spring() linearTiming() Transition linearly with optional Easing Custom timings Implement your own timing Presentations  Hover over an effect to see the preview.  Overview List of available presentations Custom presentations Implement your own effect A B fade() Animate the opacity of the scenes A B slide() Slide in and push out the previous scene A B wipe() Slide over the previous scene A B flip() Rotate the previous scene A B clockWipe() Reveal the new scene in a circular movement A B cube()Paid Rotate both scenes with 3D perspective Audio transitions Add a sound effect to a transition License​  Remotion License  Improve this page Ask on Discord Get help Previous <RemotionRiveCanvas> Next <TransitionSeries> Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/noise/","title":"@remotion/noise | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise noise2D() noise3D() noise4D() @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/noise @remotion/noise  Available from v3.2.32  Utility functions that create a noise effect.  npm pnpm yarn npm i @remotion/noise Copy Functions​ noise2D() Create 2D noise noise3D() Create 3D noise noise4D() Create 4D noise License​  MIT  Improve this page Ask on Discord Get help Previous getParts() Next noise2D() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/api#__docusaurus_skipToContent_fallback","title":"API overview | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils API overview API overview Command line Reference for the npx remotion commands Configuration file Reference for the remotion.config.ts file Packages remotion Core APIs: useCurrentFrame(), interpolate(), etc. @remotion/bundler Create a Webpack bundle from Node.JS @remotion/player Play a Remotion video in the browser @remotion/lambda Render videos and stills on AWS Lambda @remotion/cloudrun Render videos and stills on GCP Cloud Run @remotion/gif Include a GIF in your video @remotion/media-utils Obtain info about video and audio @remotion/tailwind Utilities for using TailwindCSS in Remotion @remotion/three Create 3D videos using React Three Fiber @remotion/skia Low-level graphics using React Native Skia @remotion/lottie Include a Lottie animation in your video @remotion/preload Preload video and audio in the Player @remotion/renderer Render video, audio and stills from Node.JS @remotion/paths Manipulate and obtain info about SVG paths @remotion/noise Generate noise effects @remotion/shapes Generate SVG shapes @remotion/transitions Transition between scenes @remotion/layout-utils Layout helpers Improve this page Ask on Discord Get help Next CLI reference  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/layout-utils/","title":"@remotion/layout-utils | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils measureText() fillTextBox() @remotion/layout-utils @remotion/layout-utils  Available from v4.0.50  Utility functions that create a remotion layout.  npm pnpm yarn npm i @remotion/layout-utils Copy Functions​ measureText() Get dimensions of text fillTextBox() Find line breaks and overflows in a text box License​  MIT  Improve this page Ask on Discord Get help Previous zTextarea() Next measureText() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/media-utils","title":"@remotion/media-utils | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils audioBufferToDataUrl() getAudioData() getAudioDurationInSeconds() getVideoMetadata() getWaveformPortion() useAudioData() visualizeAudio() @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/media-utils @remotion/media-utils  A package providing utility functions for getting information about video and audio, and for visualizing audio.  Except for useAudioData(), all functions can also be used outside of Remotion.  npm pnpm yarn npm i @remotion/media-utils Copy Functions​ audioBufferToDataUrl() Serialize an audio buffer getAudioData() Get metadata of an audio source getAudioDurationInSeconds() Get the duration of an audio source getVideoMetadata() Get metadata of a video source getWaveformPortion() Trims audio data into a waveform useAudioData() getAudioData() as a hook visualizeAudio() Processes a waveform for visualization License​  MIT  Improve this page Ask on Discord Get help Previous preloadGif() Next audioBufferToDataUrl() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/zod-types/","title":"@remotion/zod-types | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types zColor() zTextarea() @remotion/layout-utils @remotion/zod-types @remotion/zod-types  Includes utility types and Remotion-specific types for Zod.  Installation​  Install @remotion/zod-types  npm yarn pnpm npm i @remotion/zod-types Copy API​ zColor() A Zod Type for colors zTextarea() A Zod Type for multiple-line text in a textarea License​  Remotion License  Improve this page Ask on Discord Get help Previous Audio transitions Next zColor() Installation API License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/skia","title":"@remotion/skia | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia enableSkia() <SkiaCanvas /> @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/skia @remotion/skia  This package provides utilities useful for integrating React Native Skia with Remotion.  EXPERIMENTAL This package is currently a proof of technology.  It may change in minor version updates. Monitor this documentation page to see breaking changes when upgrading.  Installation​  Install, @remotion/skia as well as @shopify/react-native-skia.  npm yarn pnpm npm i @remotion/skia @shopify/react-native-skia Copy NOTE  Since Remotion v3.3.93 and React Native Skia 0.1.191, react-native-web is not a dependency anymore. You may remove it from your project.  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Override the Webpack config by using enableSkia().  remotion.config.ts import { Config } from \"@remotion/cli/config\"; import { enableSkia } from \"@remotion/skia/enable\";   Config.overrideWebpackConfig((currentConfiguration) => {   return enableSkia(currentConfiguration); }); Copy NOTE  Prior to v3.3.39, the option was called Config.Bundling.overrideWebpackConfig().  Next, you need to refactor the entry point file to first load the Skia WebAssembly binary before calling registerRoot():  src/index.ts import { LoadSkia } from \"@shopify/react-native-skia/src/web\"; import { registerRoot } from \"remotion\";   (async () => {   await LoadSkia();   const { RemotionRoot } = await import(\"./Root\");   registerRoot(RemotionRoot); })(); Copy  You can now start using the <SkiaCanvas> in your Remotion project.  Templates​  You can find the starter template here or install it using:  npm bun pnpm yarn npx create-video --skia Copy Rendering​  By default Remotion rendering are done on the CPU. Some Skia effects rely on advanced GPU features, which may be slow to run on the CPU depending on the kind of effect you are using. If your Skia export is extremely slow, we found that enabling the GPU via the --gl=angle option improves things substantially. Please check out the documentation on GPU rendering.  remotion render Main out/video.mp4 --gl=angle Copy Resources​ Example project by William Candillon Tutorial for the example project APIs​ enableSkia() <SkiaCanvas /> Improve this page Ask on Discord Get help Previous useOffthreadVideoTexture() Next enableSkia() Installation Templates Rendering Resources APIs  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/lottie","title":"@remotion/lottie | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie <Lottie> getLottieMetadata() Loading from staticFile() Loading from a URL Finding Lottie files @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/lottie @remotion/lottie  This package provides a component for displaying Lottie animations in Remotion.  Installation​  Install, @remotion/lottie as well as lottie-web.  npm yarn pnpm npm i @remotion/lottie lottie-web Copy  You can now start using the <Lottie> component in your Remotion project.  Supported features​ Playing Lottie animations using lottie-web Change the speed of the animation Playing animation forwards and backwards Playing remote files Determining dimensions and duration of a Lottie animation Unsupported features​ Rendering on other renderers as svg setSubFrame(), setLocationHref() Limited expression support: Remotion uses the .goToAndStop() method from lottie-web to seek through the Lottie file. Depending on the expression, the frame might not render deterministally, leading to flickering in the Remotion output. Remotion cannot fix this without a change in lottie-web upstream. You need to evaluate on a case-by-case basis whether the expression you are using is supported by Remotion. NOTE  Open an issue if you want to request a currently unsupported feature.  Table of contents​ <Lottie> Embed a Lottie animation in Remotion getLottieMetadata() Get metadata of a Lottie animation staticFile() Load Lottie animations from a static file Loading Lottie animations from a remote URL Where to find Lottie files License​  Remotion License  Improve this page Ask on Discord Get help Previous <SkiaCanvas /> Next <Lottie> Installation Supported features Unsupported features Table of contents License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/paths","title":"@remotion/paths | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths getLength() getPointAtLength() getTangentAtLength() getInstructionIndexAtLength() reversePath() normalizePath() interpolatePath() evolvePath() resetPath() getSubpaths() translatePath() warpPath() scalePath() getBoundingBox() extendViewBox() parsePath() serializeInstructions() reduceInstructions() getParts() @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/paths @remotion/paths  A package providing utility functions for dealing with SVG paths. This package includes code from svg-path-properties, svg-path-reverse, svgpath, svg-path-bbox, translate-svg-path and d3-interpolate-path with the following improvements:  Functional style APIs First class Typescript types Documentation with examples ESM import style  This package has no dependencies, meaning this package can be used without Remotion.  npm pnpm yarn npm i @remotion/paths Copy Functions​ getLength() Obtain length of an SVG path getPointAtLength() Get coordinates at a certain point of an SVG path getTangentAtLength() Gets tangents x and y of a point which is on an SVG path reversePath() Switch direction of an SVG path normalizePath() Replace relative with absolute coordinates interpolatePath() Interpolates between two SVG paths evolvePath() Animate an SVG path translatePath() Translates the position of an path against X/Y coordinates warpPath() Remap the coordinates of a path scalePath() Grow or shrink the size of the path getBoundingBox() Get the bounding box of a SVG path resetPath() Translates an SVG path to (0, 0) extendViewBox() Widen an SVG viewBox in all directions getSubpaths() Split SVG path into its parts parsePath() Parse a string into an array of instructions serializeInstructions() Turn an array of instructions into a SVG path reduceInstructions() Reduce the amount of instruction types License​  MIT  Improve this page Ask on Discord Get help Previous resolveRedirect() Next getLength() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/layout-utils","title":"@remotion/layout-utils | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils measureText() fillTextBox() @remotion/layout-utils @remotion/layout-utils  Available from v4.0.50  Utility functions that create a remotion layout.  npm pnpm yarn npm i @remotion/layout-utils Copy Functions​ measureText() Get dimensions of text fillTextBox() Find line breaks and overflows in a text box License​  MIT  Improve this page Ask on Discord Get help Previous zTextarea() Next measureText() Functions License  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/three","title":"@remotion/three | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three <ThreeCanvas> useVideoTexture() useOffthreadVideoTexture() @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/three @remotion/three  is a package for integrating React Three Fiber with Remotion.  <ThreeCanvas /> will allow you to use useCurrentFrame() and other Remotion hooks within a R3F Canvas. Animations are now not inside a useFrame() hook, but directly rendered into the markup.  useVideoTexture() allows you to use a Remotion <Video /> as a texture map.  useOffthreadVideoTexture() is an equivalent to useVideoTexture(), but displays the exact frame as an Three.ImageTexture during rendering, simillarly to <OffthreadVideo />.  These are the only two APIs provided - for everything else you can use the standard React Three Fiber APIs.  Starter template​  Check out remotion-template-three, a minimal boilerplate for Remotion and React Three Fiber. It is a template repository, you can click \"Use this template\" on the GitHub repo to get started.  0:00 / 0:10  The template features a 3D phone with a video inside which you can effortlessly swap out. Just as easily, you can change properties like the color, size, thickness, corner radius of the phone.  The template serves as a soft introduction on how to use <ThreeCanvas /> and useVideoTexture(). You can easily delete everything inside the canvas to start working on a different idea.  Installation​ npm yarn pnpm npm i three @react-three/fiber @remotion/three @types/three Copy  You are now set up and can render a <ThreeCanvas /> in your project.  Note on <Sequence>​  A <Sequence> by default will return a <div> component, which is not allowed inside a <ThreeCanvas>. To avoid an error, pass layout=\"none\" to <Sequence>.  Note on server-side rendering​  Three.JS does not render with the default OpenGL renderer - we recommend to set it to angle. The config file of new projects includes by default:  import { Config } from \"@remotion/cli/config\";   Config.setChromiumOpenGlRenderer(\"angle\"); Copy  Since the config file does not apply to server-side rendering, you need to explicitly add  \"chromiumOptions\": {   \"gl\": \"angle\" } Copy  to server-side rendering APIs like renderMedia(), renderFrames(), getCompositions() and renderMediaOnLambda().  Thanks​  A big thanks to Björn Zeutzheim for researching and discovering the techniques needed for React Three Fiber integration and for doing the initial implementation of the @remotion/three APIs.  Improve this page Ask on Discord Get help Previous enableTailwind() Next <ThreeCanvas> Starter template Installation Note on <Sequence> Note on server-side rendering Thanks  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"},{"url":"https://www.remotion.dev/docs/player/installation","title":"Installation | Remotion | Make videos programmatically in React","date":"2024-01-16","content":"Skip to main content Docs API Pricing More GitHub Discord X Search K API overview Command line Configuration file remotion @remotion/bundler @remotion/renderer @remotion/player <Player> <Thumbnail> @remotion/gif @remotion/media-utils @remotion/motion-blur @remotion/lambda @remotion/cloudrun @remotion/tailwind @remotion/three @remotion/skia @remotion/lottie @remotion/preload @remotion/paths @remotion/noise @remotion/google-fonts @remotion/shapes @remotion/rive @remotion/transitions @remotion/zod-types @remotion/layout-utils @remotion/player Installation  To install the Player, run the following command in a React project:  npm yarn pnpm npm i remotion @remotion/player Copy  Also update all the other Remotion packages to have the same version: remotion, @remotion/cli and others.  NOTE  Make sure no package version number has a ^ character in front of it as it can lead to a version conflict.  Read the examples and API reference next.  Components​ <Player> Embed a Remotion composition in a web app <Thumbnail> Embed a still in a web app Improve this page Ask on Discord Get help Previous extractAudio() Next <Player> Components  © Copyright 2024 Remotion AG. Website created with Docusaurus.  Remotion Getting started API Reference Player Lambda Learn Store Changelog GitHub Community Showcase Experts Discord X YouTube LinkedIn Instagram TikTok Threads More About us Blog Success Stories Support License Remotion Pro Brand"}]